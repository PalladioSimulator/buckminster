<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsd:schema xmlns:bc="http://www.eclipse.org/buckminster/Common-1.0" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:xsd="http://www.w3.org/2001/XMLSchema" ecore:nsPrefix="bc" ecore:package="org.eclipse.buckminster.model.common" targetNamespace="http://www.eclipse.org/buckminster/Common-1.0">
  <xsd:import namespace="http://www.eclipse.org/emf/2002/Ecore" schemaLocation="platform:/plugin/org.eclipse.emf.ecore/model/Ecore.xsd"/>
  <xsd:complexType name="Constant">
    <xsd:attribute name="value" type="ecore:EString" use="required"/>
  </xsd:complexType>
  <xsd:complexType name="Documentation"/>
  <xsd:complexType name="Format">
    <xsd:annotation>
      <xsd:documentation>A Format is the base for a java.text.Format that in turn is used when creating a string from a set of parameter values. A parameter is denoted by {&lt;n&gt;} where &lt;n&gt; denotes n'th parameter element using zero for the first parameter.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="bc:ValueFilter">
        <xsd:attribute name="format" type="ecore:EString" use="required"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Match">
    <xsd:attribute name="pattern" type="ecore:EString" use="required"/>
    <xsd:attribute default="false" name="quotePattern" type="ecore:EBoolean"/>
    <xsd:attribute name="replacement" type="ecore:EString" use="required"/>
  </xsd:complexType>
  <xsd:complexType name="Property">
    <xsd:annotation>
      <xsd:documentation>A property that maps a key to a value. Several attributes in the cspec and rmap may be subject to property expansion. TODO: Should subjected attributes use a special naming convention in order to clarify that they will be property expanded?</xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="key" type="bc:propertyKey" use="required"/>
    <xsd:attribute name="mutable" type="ecore:EBoolean"/>
  </xsd:complexType>
  <xsd:complexType name="PropertyConstant">
    <xsd:annotation>
      <xsd:documentation>A simple property that maps a key to a constant value.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="bc:Property">
        <xsd:attribute name="value" type="ecore:EString" use="required"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="PropertyElement">
    <xsd:annotation>
      <xsd:documentation>A simple property that maps a key to a constant value.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="bc:Property">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" form="qualified" minOccurs="0" name="constant" type="bc:Constant"/>
          <xsd:element ecore:resolveProxies="true" form="qualified" minOccurs="0" name="format" type="bc:Format"/>
          <xsd:element ecore:resolveProxies="true" form="qualified" minOccurs="0" name="propertyRef" type="bc:PropertyRef"/>
          <xsd:element ecore:resolveProxies="true" form="qualified" minOccurs="0" name="replace" type="bc:Replace"/>
          <xsd:element ecore:resolveProxies="true" form="qualified" minOccurs="0" name="toLower" type="bc:ToLower"/>
          <xsd:element ecore:resolveProxies="true" form="qualified" minOccurs="0" name="toUpper" type="bc:ToUpper"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:simpleType ecore:name="PropertyKey" name="propertyKey">
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="[A-Za-z0-9_.${}/]+"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType name="PropertyRef">
    <xsd:attribute name="key" type="bc:propertyKey" use="required"/>
  </xsd:complexType>
  <xsd:complexType name="Replace">
    <xsd:complexContent>
      <xsd:extension base="bc:ValueFilter">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="matches" type="bc:Match"/>
        </xsd:sequence>
        <xsd:attribute name="pattern" type="ecore:EString"/>
        <xsd:attribute default="false" name="quotePattern" type="ecore:EBoolean"/>
        <xsd:attribute name="replacement" type="ecore:EString"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="RxGroup">
    <xsd:annotation>
      <xsd:documentation>Defines a regexp capturing group as a named assembly of part</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="bc:RxPart">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="rxParts" type="bc:RxPart"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="RxPart">
    <xsd:annotation>
      <xsd:documentation>Defines a partial regexp</xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="name" type="ecore:EString">
      <xsd:annotation>
        <xsd:documentation>
					Denotes if this part a capturing group or not. The
					match for a named part can be used in replacement
					patterns.
				</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute default="false" name="optional" type="ecore:EBoolean">
      <xsd:annotation>
        <xsd:documentation>
					Denotes if this part is optional (must be matched)
					or not. The top element of a regexp can not be
					optional.
				</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:complexType name="RxPattern">
    <xsd:annotation>
      <xsd:documentation>Defines a partial regexp as a pattern</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="bc:RxPart">
        <xsd:attribute name="pattern" type="ecore:EString" use="required">
          <xsd:annotation>
            <xsd:documentation>The regular expression for this group (excluding parenthesis for the group itself).</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="prefix" type="ecore:EString">
          <xsd:annotation>
            <xsd:documentation>The quoted prefix of the pattern. Not included in the capture</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="suffix" type="ecore:EString">
          <xsd:annotation>
            <xsd:documentation>The quoted suffix of the pattern. Not included in the capture</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Split">
    <xsd:complexContent>
      <xsd:extension base="bc:ValueFilter">
        <xsd:attribute ecore:unsettable="false" name="limit" type="ecore:EInt"/>
        <xsd:attribute name="pattern" type="ecore:EString" use="required"/>
        <xsd:attribute default="quoted" name="style" type="bc:SplitType"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:simpleType name="SplitType">
    <xsd:annotation>
      <xsd:documentation>A split can be done using a delimiter or a pattern containing capturing groups. In case of delimiter it can be quoted or not quoted.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="quoted"/>
      <xsd:enumeration value="unquoted"/>
      <xsd:enumeration value="groups"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType name="ToLower">
    <xsd:complexContent>
      <xsd:extension base="bc:ValueFilter"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ToUpper">
    <xsd:complexContent>
      <xsd:extension base="bc:ValueFilter"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:simpleType ecore:instanceClass="java.net.URL" name="URL">
    <xsd:annotation>
      <xsd:documentation>A type that describes an URL. TODO: Needs patterns that restrict the URL. Must be available from somewhere.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:anyURI"/>
  </xsd:simpleType>
  <xsd:simpleType ecore:instanceClass="java.util.UUID" ecore:name="Uuid" name="uuid">
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType abstract="true" name="ValueFilter">
    <xsd:sequence>
      <xsd:element ecore:name="constants" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="constant" type="bc:Constant"/>
      <xsd:element ecore:name="formats" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="format" type="bc:Format"/>
      <xsd:element ecore:name="propertyRefs" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="propertyRef" type="bc:PropertyRef"/>
      <xsd:element ecore:name="replacements" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="replace" type="bc:Replace"/>
      <xsd:element ecore:name="splits" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="split" type="bc:Split"/>
      <xsd:element ecore:name="toLowers" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="toLower" type="bc:ToLower"/>
      <xsd:element ecore:name="toUppers" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="toUpper" type="bc:ToUpper"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:simpleType ecore:instanceClass="java.util.regex.Pattern" ecore:name="Pattern" name="pattern">
    <xsd:restriction base="xsd:string"/>
  </xsd:simpleType>
</xsd:schema>
