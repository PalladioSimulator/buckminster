<?xml version="1.0" encoding="UTF-8"?>

<!--A cspec that describes a plugin component that has a dependency to
	another plugin component.
-->

<cs:cspec name="buckminster.test_a"
	xmlns:cs="http://www.eclipse.org/buckminster/CSpec-1.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

	<!--List of components that this component are dependent on, one way
		or another. Dependencies are imposed by actions or exports and
		it is possible to leave out some of the dependencies when the
		reqirement is limited to a subset of the listed actions and exports.
	-->
	<cs:dependencies>
		<cs:dependency name = "buckminster.test_b"/>
	</cs:dependencies>

	<!--The artifacts describes the content of the materialized
		component. Among other things, this list will be used
		to calculate the component manifest.

		The lack of path implies that the path is equal to the name.
		The lack of type implies the type 'file'

		In a plugin project, this information will reflect what's
		listed as the src.includes of the build.properties file.
	-->
	<cs:artifacts>
		<cs:artifact name="source" path="src/" type="java.sources"/>
		<cs:artifact name="make/"/>
		<cs:artifact name="META-INF/"/>
		<cs:artifact name="plugin.xml"/>
		<cs:artifact name="plugin.properties"/>
		<cs:artifact name="build.properties"/>
		<cs:artifact name=".project"/>
		<cs:artifact name=".classpath"/>
	</cs:artifacts>

	<!--Actions that reflect things that you can do with the component. Some
		actions are internal and maps to built in functionality. Actions may
		produce additional artifacts. A dependency to such an artifact implies
		the execution of the action.
	-->
	<cs:actions>
		<cs:internalAction name="buckminster.classpath.container">
			<cs:prerequisites>
				<cs:external name="buckminster.test_b" purpose="java.classpath"/>
				<cs:external name="buckminster.test_b" purpose="java.sourcepath" optional="true"/>
			</cs:prerequisites>
			<cs:products>
				<cs:artifact name="buckminster.classpath.container" type="internal"/>
			</cs:products>
		</cs:internalAction>

		<cs:internalAction name="eclipse.incremental.build">
			<cs:prerequisites>
				<cs:external name="buckminster.test_b" purpose="java.compile"/>
				<cs:local name="buckminster.classpath.container"/>
				<cs:local name="source"/>
			</cs:prerequisites>
			<cs:products>
				<cs:artifact name="classes" path="bin/classes/" type="java.binaries"/>
			</cs:products>
		</cs:internalAction>

		<cs:action name="create.jar" script="make/build.xml" performer="ant">
			<cs:prerequisites>
				<cs:local name="classes"/>
			</cs:prerequisites>
			<cs:products>
				<cs:artifact name="test_a.jar" path="bin/deploy" type="java.binaries"/>
			</cs:products>
		</cs:action>
	</cs:actions>

	<!--Exports list ways that other components can use this component. One can think
		of it as an advanced way of declaring what this component will export.
	-->
	<cs:exports>
		<cs:export name="java.classpath">
			<!--An artifactReference will not cause execution of the action that produces the
				artifact. This is merely an indication that this artifact can be produced.
			-->
			<cs:local name="classes" referenceOnly="true"/>
			<cs:external name="buckminster.test_b" purpose="java.classpath"/>
		</cs:export>

		<cs:export name="java.compile">
			<cs:local name="classes"/>
			<cs:external name="buckminster.test_b" purpose="java.compile"/>
		</cs:export>

		<cs:export name="java.sourcepath">
			<cs:local name="source"/>
			<cs:external name="buckminster.test_b" purpose="java.sourcepath" optional="true"/>
		</cs:export>
	</cs:exports>
</cs:cspec>
