/*
* generated by Xtext
*/
grammar InternalBeeLang;

options {
	superClass=AbstractInternalAntlrParser;
	 memoize=true;
	
}

@lexer::header {
package org.eclipse.b3.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.b3.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.b3.services.BeeLangGrammarAccess;

}

@parser::members {
 
 	private BeeLangGrammarAccess grammarAccess;
 	
    public InternalBeeLangParser(TokenStream input, IAstFactory factory, BeeLangGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/b3/parser/antlr/internal/InternalBeeLang.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "BeeModel";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleBeeModel
entryRuleBeeModel returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBeeModelRule(), currentNode); }
	 iv_ruleBeeModel=ruleBeeModel 
	 { $current=$iv_ruleBeeModel.current; } 
	 EOF 
;

// Rule BeeModel
ruleBeeModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBeeModelAccess().getImportsImportParserRuleCall_0_0(), currentNode); 
	    }
	    lv_imports_0=ruleImport 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBeeModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "imports", lv_imports_0, "Import", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBeeModelAccess().getBodyUnitParserRuleCall_1_0(), currentNode); 
	    }
	    lv_body_1=ruleUnit 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBeeModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "body", lv_body_1, "Unit", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getQualifiedNameRule(), currentNode); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
		myHiddenTokenState.restore();
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0(), null); 
    }
(    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    createLeafNode(grammarAccess.getQualifiedNameAccess().getINTTerminalRuleCall_1_0(), null); 
    }

    |    this_HEX_2=RULE_HEX    {
		$current.merge(this_HEX_2);
    }

    { 
    createLeafNode(grammarAccess.getQualifiedNameAccess().getHEXTerminalRuleCall_1_1(), null); 
    }

    |    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    createLeafNode(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_2(), null); 
    }
)*(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_2_0(), null); 
    }
    this_ID_5=RULE_ID    {
		$current.merge(this_ID_5);
    }

    { 
    createLeafNode(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_2_1(), null); 
    }
(    this_INT_6=RULE_INT    {
		$current.merge(this_INT_6);
    }

    { 
    createLeafNode(grammarAccess.getQualifiedNameAccess().getINTTerminalRuleCall_2_2_0(), null); 
    }

    |    this_HEX_7=RULE_HEX    {
		$current.merge(this_HEX_7);
    }

    { 
    createLeafNode(grammarAccess.getQualifiedNameAccess().getHEXTerminalRuleCall_2_2_1(), null); 
    }

    |    this_ID_8=RULE_ID    {
		$current.merge(this_ID_8);
    }

    { 
    createLeafNode(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_2_2_2(), null); 
    }
)*)*
    { 
        currentNode=createCompositeNode(grammarAccess.getQualifiedNameAccess().getHIDDENBUGParserRuleCall_3(), currentNode); 
    }
    this_HIDDENBUG_9=ruleHIDDENBUG    {
		$current.merge(this_HIDDENBUG_9);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleHIDDENBUG
entryRuleHIDDENBUG returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getHIDDENBUGRule(), currentNode); } 
	 iv_ruleHIDDENBUG=ruleHIDDENBUG 
	 { $current=$iv_ruleHIDDENBUG.current.getText(); }  
	 EOF 
;

// Rule HIDDENBUG
ruleHIDDENBUG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT", "RULE_ML_COMMENT");
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
		myHiddenTokenState.restore();
    }:
(
	kw='~~~~~' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getHIDDENBUGAccess().getTildeTildeTildeTildeTildeKeyword(), null); 
    }
)?
    ;







// Entry rule entryRulePropertyName
entryRulePropertyName returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPropertyNameRule(), currentNode); } 
	 iv_rulePropertyName=rulePropertyName 
	 { $current=$iv_rulePropertyName.current.getText(); }  
	 EOF 
;

// Rule PropertyName
rulePropertyName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
    this_PID_0=RULE_PID    {
		$current.merge(this_PID_0);
    }

    { 
    createLeafNode(grammarAccess.getPropertyNameAccess().getPIDTerminalRuleCall(), null); 
    }

    ;





// Entry rule entryRuleEscapedQualifiedName
entryRuleEscapedQualifiedName returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getEscapedQualifiedNameRule(), currentNode); } 
	 iv_ruleEscapedQualifiedName=ruleEscapedQualifiedName 
	 { $current=$iv_ruleEscapedQualifiedName.current.getText(); }  
	 EOF 
;

// Rule EscapedQualifiedName
ruleEscapedQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    createLeafNode(grammarAccess.getEscapedQualifiedNameAccess().getSTRINGTerminalRuleCall_0(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getEscapedQualifiedNameAccess().getQualifiedNameParserRuleCall_1(), currentNode); 
    }
    this_QualifiedName_1=ruleQualifiedName    {
		$current.merge(this_QualifiedName_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleInterfaceName
entryRuleInterfaceName returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getInterfaceNameRule(), currentNode); } 
	 iv_ruleInterfaceName=ruleInterfaceName 
	 { $current=$iv_ruleInterfaceName.current.getText(); }  
	 EOF 
;

// Rule InterfaceName
ruleInterfaceName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getInterfaceNameAccess().getQualifiedNameParserRuleCall(), currentNode); 
    }
    this_QualifiedName_0=ruleQualifiedName    {
		$current.merge(this_QualifiedName_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    ;





// Entry rule entryRuleCompoundName
entryRuleCompoundName returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCompoundNameRule(), currentNode); } 
	 iv_ruleCompoundName=ruleCompoundName 
	 { $current=$iv_ruleCompoundName.current.getText(); }  
	 EOF 
;

// Rule CompoundName
ruleCompoundName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getCompoundNameAccess().getEscapedQualifiedNameParserRuleCall_0(), currentNode); 
    }
    this_EscapedQualifiedName_0=ruleEscapedQualifiedName    {
		$current.merge(this_EscapedQualifiedName_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

	kw='/' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getCompoundNameAccess().getSolidusKeyword_1(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getCompoundNameAccess().getEscapedQualifiedNameParserRuleCall_2(), currentNode); 
    }
    this_EscapedQualifiedName_2=ruleEscapedQualifiedName    {
		$current.merge(this_EscapedQualifiedName_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleUnitName
entryRuleUnitName returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getUnitNameRule(), currentNode); } 
	 iv_ruleUnitName=ruleUnitName 
	 { $current=$iv_ruleUnitName.current.getText(); }  
	 EOF 
;

// Rule UnitName
ruleUnitName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getUnitNameAccess().getEscapedQualifiedNameParserRuleCall(), currentNode); 
    }
    this_EscapedQualifiedName_0=ruleEscapedQualifiedName    {
		$current.merge(this_EscapedQualifiedName_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    ;





// Entry rule entryRulePartName
entryRulePartName returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPartNameRule(), currentNode); } 
	 iv_rulePartName=rulePartName 
	 { $current=$iv_rulePartName.current.getText(); }  
	 EOF 
;

// Rule PartName
rulePartName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getPartNameAccess().getEscapedQualifiedNameParserRuleCall(), currentNode); 
    }
    this_EscapedQualifiedName_0=ruleEscapedQualifiedName    {
		$current.merge(this_EscapedQualifiedName_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    ;





// Entry rule entryRuleSeparator
entryRuleSeparator returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSeparatorRule(), currentNode); } 
	 iv_ruleSeparator=ruleSeparator 
	 { $current=$iv_ruleSeparator.current.getText(); }  
	 EOF 
;

// Rule Separator
ruleSeparator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getFullStopKeyword_0(), null); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getHyphenMinusKeyword_1(), null); 
    }

    |
	kw='!' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getExclamationMarkKeyword_2(), null); 
    }

    |
	kw='@' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getCommercialAtKeyword_3(), null); 
    }

    |
	kw='$' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getDollarSignKeyword_4(), null); 
    }

    |
	kw='%' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getPercentSignKeyword_5(), null); 
    }

    |
	kw='&' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getAmpersandKeyword_6(), null); 
    }

    |
	kw='+' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getPlusSignKeyword_7(), null); 
    }

    |
	kw='=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getEqualsSignKeyword_8(), null); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getAsteriskKeyword_9(), null); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getLessThanSignKeyword_10(), null); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getGreaterThanSignKeyword_11(), null); 
    }

    |
	kw=':' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getColonKeyword_12(), null); 
    }

    |
	kw='?' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getQuestionMarkKeyword_13(), null); 
    }
)
    ;





// Entry rule entryRuleAlfanumSym
entryRuleAlfanumSym returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAlfanumSymRule(), currentNode); } 
	 iv_ruleAlfanumSym=ruleAlfanumSym 
	 { $current=$iv_ruleAlfanumSym.current.getText(); }  
	 EOF 
;

// Rule AlfanumSym
ruleAlfanumSym returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
((    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getAlfanumSymAccess().getIDTerminalRuleCall_0_0(), null); 
    }

    |    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    createLeafNode(grammarAccess.getAlfanumSymAccess().getINTTerminalRuleCall_0_1(), null); 
    }

    |    this_HEX_2=RULE_HEX    {
		$current.merge(this_HEX_2);
    }

    { 
    createLeafNode(grammarAccess.getAlfanumSymAccess().getHEXTerminalRuleCall_0_2(), null); 
    }

    |    this_REAL_3=RULE_REAL    {
		$current.merge(this_REAL_3);
    }

    { 
    createLeafNode(grammarAccess.getAlfanumSymAccess().getREALTerminalRuleCall_0_3(), null); 
    }
)(
    { 
        currentNode=createCompositeNode(grammarAccess.getAlfanumSymAccess().getSeparatorParserRuleCall_1_0(), currentNode); 
    }
    this_Separator_4=ruleSeparator    {
		$current.merge(this_Separator_4);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |    this_ID_5=RULE_ID    {
		$current.merge(this_ID_5);
    }

    { 
    createLeafNode(grammarAccess.getAlfanumSymAccess().getIDTerminalRuleCall_1_1(), null); 
    }

    |    this_INT_6=RULE_INT    {
		$current.merge(this_INT_6);
    }

    { 
    createLeafNode(grammarAccess.getAlfanumSymAccess().getINTTerminalRuleCall_1_2(), null); 
    }

    |    this_HEX_7=RULE_HEX    {
		$current.merge(this_HEX_7);
    }

    { 
    createLeafNode(grammarAccess.getAlfanumSymAccess().getHEXTerminalRuleCall_1_3(), null); 
    }

    |    this_REAL_8=RULE_REAL    {
		$current.merge(this_REAL_8);
    }

    { 
    createLeafNode(grammarAccess.getAlfanumSymAccess().getREALTerminalRuleCall_1_4(), null); 
    }
)*)
    ;





// Entry rule entryRuleVersion
entryRuleVersion returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getVersionRule(), currentNode); } 
	 iv_ruleVersion=ruleVersion 
	 { $current=$iv_ruleVersion.current.getText(); }  
	 EOF 
;

// Rule Version
ruleVersion returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    createLeafNode(grammarAccess.getVersionAccess().getSTRINGTerminalRuleCall_0(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getVersionAccess().getAlfanumSymParserRuleCall_1(), currentNode); 
    }
    this_AlfanumSym_1=ruleAlfanumSym    {
		$current.merge(this_AlfanumSym_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleVersionRange
entryRuleVersionRange returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getVersionRangeRule(), currentNode); } 
	 iv_ruleVersionRange=ruleVersionRange 
	 { $current=$iv_ruleVersionRange.current.getText(); }  
	 EOF 
;

// Rule VersionRange
ruleVersionRange returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(((
	kw='[' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getVersionRangeAccess().getLeftSquareBracketKeyword_0_0_0(), null); 
    }

    |
	kw='(' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getVersionRangeAccess().getLeftParenthesisKeyword_0_0_1(), null); 
    }
)
    { 
        currentNode=createCompositeNode(grammarAccess.getVersionRangeAccess().getVersionParserRuleCall_0_1(), currentNode); 
    }
    this_Version_2=ruleVersion    {
		$current.merge(this_Version_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getVersionRangeAccess().getCommaKeyword_0_2_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getVersionRangeAccess().getVersionParserRuleCall_0_2_1(), currentNode); 
    }
    this_Version_4=ruleVersion    {
		$current.merge(this_Version_4);
    }

    { 
        currentNode = currentNode.getParent();
    }
)?(
	kw=']' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getVersionRangeAccess().getRightSquareBracketKeyword_0_3_0(), null); 
    }

    |
	kw=')' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getVersionRangeAccess().getRightParenthesisKeyword_0_3_1(), null); 
    }
))
    |
    { 
        currentNode=createCompositeNode(grammarAccess.getVersionRangeAccess().getVersionParserRuleCall_1(), currentNode); 
    }
    this_Version_7=ruleVersion    {
		$current.merge(this_Version_7);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getImportRule(), currentNode); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('import' 
    {
        createLeafNode(grammarAccess.getImportAccess().getImportKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getImportAccess().getImportClassQualifiedNameParserRuleCall_1_0(), currentNode); 
	    }
	    lv_importClass_1=ruleQualifiedName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImportRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "importClass", lv_importClass_1, "QualifiedName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('.*' 
    {
        createLeafNode(grammarAccess.getImportAccess().getFullStopAsteriskKeyword_2(), null); 
    }
)?';' 
    {
        createLeafNode(grammarAccess.getImportAccess().getSemicolonKeyword_3(), null); 
    }
);





// Entry rule entryRuleUnit
entryRuleUnit returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getUnitRule(), currentNode); }
	 iv_ruleUnit=ruleUnit 
	 { $current=$iv_ruleUnit.current; } 
	 EOF 
;

// Rule Unit
ruleUnit returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
		myHiddenTokenState.restore();
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getExecutionModeExecutionModeEnumRuleCall_0_0(), currentNode); 
	    }
	    lv_executionMode_0=ruleExecutionMode 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "executionMode", lv_executionMode_0, "ExecutionMode", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?'unit' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getUnitKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getNameUnitNameParserRuleCall_2_0(), currentNode); 
	    }
	    lv_name_2=ruleUnitName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_2, "UnitName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?('version' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getVersionKeyword_3_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getVersionVersionParserRuleCall_3_1_0(), currentNode); 
	    }
	    lv_version_4=ruleVersion 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "version", lv_version_4, "Version", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?('implements' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getImplementsKeyword_4_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getImplementsInterfaceNameParserRuleCall_4_1_0(), currentNode); 
	    }
	    lv_implements_6=ruleInterfaceName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "implements", lv_implements_6, "InterfaceName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getCommaKeyword_4_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getImplementsInterfaceNameParserRuleCall_4_2_1_0(), currentNode); 
	    }
	    lv_implements_8=ruleInterfaceName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "implements", lv_implements_8, "InterfaceName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)?'{' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_5(), null); 
    }
('properties' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getPropertiesKeyword_6_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getPropertyStatementsNamedPropertyStatementsParserRuleCall_6_1_0(), currentNode); 
	    }
	    lv_propertyStatements_11=ruleNamedPropertyStatements 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "propertyStatements", lv_propertyStatements_11, "NamedPropertyStatements", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*(('provides' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getProvidesKeyword_7_0_0(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_7_0_1(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getProvidedCapabilityProvidedCapabilityParserRuleCall_7_0_2_0_0(), currentNode); 
	    }
	    lv_providedCapability_14=ruleProvidedCapability 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "providedCapability", lv_providedCapability_14, "ProvidedCapability", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getSemicolonKeyword_7_0_2_1(), null); 
    }
)+'}' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_7_0_3(), null); 
    }
)
    |('provides' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getProvidesKeyword_7_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getProvidedCapabilityProvidedCapabilityParserRuleCall_7_1_1_0(), currentNode); 
	    }
	    lv_providedCapability_18=ruleProvidedCapability 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "providedCapability", lv_providedCapability_18, "ProvidedCapability", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getSemicolonKeyword_7_1_2(), null); 
    }
)
    |('requires' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRequiresKeyword_7_2_0(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_7_2_1(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_2_2_0_0(), currentNode); 
	    }
	    lv_requiredCapabilities_22=ruleRequiredCapability 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "requiredCapabilities", lv_requiredCapabilities_22, "RequiredCapability", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getSemicolonKeyword_7_2_2_1(), null); 
    }
)+'}' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_7_2_3(), null); 
    }
)
    |('requires' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRequiresKeyword_7_3_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_3_1_0(), currentNode); 
	    }
	    lv_requiredCapabilities_26=ruleRequiredCapability 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "requiredCapabilities", lv_requiredCapabilities_26, "RequiredCapability", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getSemicolonKeyword_7_3_2(), null); 
    }
)
    |('meta' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getMetaKeyword_7_4_0(), null); 
    }
'requires' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRequiresKeyword_7_4_1(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_7_4_2(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getMetaRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_4_3_0_0(), currentNode); 
	    }
	    lv_metaRequiredCapabilities_31=ruleRequiredCapability 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "metaRequiredCapabilities", lv_metaRequiredCapabilities_31, "RequiredCapability", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getSemicolonKeyword_7_4_3_1(), null); 
    }
)+'}' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_7_4_4(), null); 
    }
)
    |('meta' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getMetaKeyword_7_5_0(), null); 
    }
'requires' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRequiresKeyword_7_5_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getMetaRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_5_2_0(), currentNode); 
	    }
	    lv_metaRequiredCapabilities_36=ruleRequiredCapability 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "metaRequiredCapabilities", lv_metaRequiredCapabilities_36, "RequiredCapability", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getSemicolonKeyword_7_5_3(), null); 
    }
)
    |('advice' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getAdviceKeyword_7_6_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getAdviceNamedAdviceParserRuleCall_7_6_1_0(), currentNode); 
	    }
	    lv_advice_39=ruleNamedAdvice 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "advice", lv_advice_39, "NamedAdvice", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))
    |('sequential' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getSequentialKeyword_7_7_0(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_7_7_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getSynchronizeSynchronizationParserRuleCall_7_7_2_0(), currentNode); 
	    }
	    lv_synchronize_42=ruleSynchronization 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "synchronize", lv_synchronize_42, "Synchronization", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)+'}' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_7_7_3(), null); 
    }
)
    |('sequential' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getSequentialKeyword_7_8_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getSynchronizeSynchronizationParserRuleCall_7_8_1_0(), currentNode); 
	    }
	    lv_synchronize_45=ruleSynchronization 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "synchronize", lv_synchronize_45, "Synchronization", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getPartsBuildPartParserRuleCall_7_9_0(), currentNode); 
	    }
	    lv_parts_46=ruleBuildPart 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "parts", lv_parts_46, "BuildPart", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |('repositories' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRepositoriesKeyword_7_10_0(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_7_10_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getRepositoryConfigRepositoryConfigurationParserRuleCall_7_10_2_0(), currentNode); 
	    }
	    lv_repositoryConfig_49=ruleRepositoryConfiguration 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "repositoryConfig", lv_repositoryConfig_49, "RepositoryConfiguration", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_7_10_3(), null); 
    }
))*'}' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_8(), null); 
    }
);





// Entry rule entryRuleProvidedCapability
entryRuleProvidedCapability returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getProvidedCapabilityRule(), currentNode); }
	 iv_ruleProvidedCapability=ruleProvidedCapability 
	 { $current=$iv_ruleProvidedCapability.current; } 
	 EOF 
;

// Rule ProvidedCapability
ruleProvidedCapability returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('when' 
    {
        createLeafNode(grammarAccess.getProvidedCapabilityAccess().getWhenKeyword_0_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getProvidedCapabilityAccess().getFilterFilterParserRuleCall_0_1_0(), currentNode); 
	    }
	    lv_filter_1=ruleFilter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProvidedCapabilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "filter", lv_filter_1, "Filter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getProvidedCapabilityAccess().getInterfaceQualifiedNameParserRuleCall_1_0(), currentNode); 
	    }
	    lv_interface_2=ruleQualifiedName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProvidedCapabilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "interface", lv_interface_2, "QualifiedName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'/' 
    {
        createLeafNode(grammarAccess.getProvidedCapabilityAccess().getSolidusKeyword_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getProvidedCapabilityAccess().getNameQualifiedNameParserRuleCall_3_0(), currentNode); 
	    }
	    lv_name_4=ruleQualifiedName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProvidedCapabilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_4, "QualifiedName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('/' 
    {
        createLeafNode(grammarAccess.getProvidedCapabilityAccess().getSolidusKeyword_4_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getProvidedCapabilityAccess().getVersionVersionParserRuleCall_4_1_0(), currentNode); 
	    }
	    lv_version_6=ruleVersion 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProvidedCapabilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "version", lv_version_6, "Version", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?);





// Entry rule entryRuleRequiredCapability
entryRuleRequiredCapability returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRequiredCapabilityRule(), currentNode); }
	 iv_ruleRequiredCapability=ruleRequiredCapability 
	 { $current=$iv_ruleRequiredCapability.current; } 
	 EOF 
;

// Rule RequiredCapability
ruleRequiredCapability returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('when' 
    {
        createLeafNode(grammarAccess.getRequiredCapabilityAccess().getWhenKeyword_0_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRequiredCapabilityAccess().getFilterFilterParserRuleCall_0_1_0(), currentNode); 
	    }
	    lv_filter_1=ruleFilter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRequiredCapabilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "filter", lv_filter_1, "Filter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRequiredCapabilityAccess().getInterfaceQualifiedNameParserRuleCall_1_0(), currentNode); 
	    }
	    lv_interface_2=ruleQualifiedName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRequiredCapabilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "interface", lv_interface_2, "QualifiedName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'/' 
    {
        createLeafNode(grammarAccess.getRequiredCapabilityAccess().getSolidusKeyword_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRequiredCapabilityAccess().getNameQualifiedNameParserRuleCall_3_0(), currentNode); 
	    }
	    lv_name_4=ruleQualifiedName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRequiredCapabilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_4, "QualifiedName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('/' 
    {
        createLeafNode(grammarAccess.getRequiredCapabilityAccess().getSolidusKeyword_4_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRequiredCapabilityAccess().getRangeVersionRangeParserRuleCall_4_1_0(), currentNode); 
	    }
	    lv_range_6=ruleVersionRange 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRequiredCapabilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "range", lv_range_6, "VersionRange", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?);





// Entry rule entryRuleNamedPropertyStatements
entryRuleNamedPropertyStatements returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getNamedPropertyStatementsRule(), currentNode); }
	 iv_ruleNamedPropertyStatements=ruleNamedPropertyStatements 
	 { $current=$iv_ruleNamedPropertyStatements.current; } 
	 EOF 
;

// Rule NamedPropertyStatements
ruleNamedPropertyStatements returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_name_0=	RULE_ID
	{
		createLeafNode(grammarAccess.getNamedPropertyStatementsAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNamedPropertyStatementsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getNamedPropertyStatementsAccess().getStatementsPropertyStatementsParserRuleCall_1_0(), currentNode); 
	    }
	    lv_statements_1=rulePropertyStatements 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNamedPropertyStatementsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "statements", lv_statements_1, "PropertyStatements", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRulePropertyStatements
entryRulePropertyStatements returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPropertyStatementsRule(), currentNode); }
	 iv_rulePropertyStatements=rulePropertyStatements 
	 { $current=$iv_rulePropertyStatements.current; } 
	 EOF 
;

// Rule PropertyStatements
rulePropertyStatements returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('{' 
    {
        createLeafNode(grammarAccess.getPropertyStatementsAccess().getLeftCurlyBracketKeyword_0(), null); 
    }
(('when' 
    {
        createLeafNode(grammarAccess.getPropertyStatementsAccess().getWhenKeyword_1_0_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPropertyStatementsAccess().getFilterFilterParserRuleCall_1_0_1_0(), currentNode); 
	    }
	    lv_filter_2=ruleFilter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyStatementsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "filter", lv_filter_2, "Filter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPropertyStatementsAccess().getStatementsUnsetPropertyStatementParserRuleCall_1_1_0_0(), currentNode); 
	    }
	    lv_statements_3=ruleUnsetPropertyStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyStatementsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "statements", lv_statements_3, "UnsetPropertyStatement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPropertyStatementsAccess().getStatementsPropertyStatementParserRuleCall_1_1_1_0(), currentNode); 
	    }
	    lv_statements_4=rulePropertyStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyStatementsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "statements", lv_statements_4, "PropertyStatement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPropertyStatementsAccess().getStatementsPropertyStatementsParserRuleCall_1_1_2_0(), currentNode); 
	    }
	    lv_statements_5=rulePropertyStatements 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyStatementsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "statements", lv_statements_5, "PropertyStatements", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)))*'}' 
    {
        createLeafNode(grammarAccess.getPropertyStatementsAccess().getRightCurlyBracketKeyword_2(), null); 
    }
);





// Entry rule entryRulePropertyStatement
entryRulePropertyStatement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPropertyStatementRule(), currentNode); }
	 iv_rulePropertyStatement=rulePropertyStatement 
	 { $current=$iv_rulePropertyStatement.current; } 
	 EOF 
;

// Rule PropertyStatement
rulePropertyStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_immutable_0='immutable' 
    {
        createLeafNode(grammarAccess.getPropertyStatementAccess().getImmutableImmutableKeyword_0_0(), "immutable"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "immutable", true, "immutable", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPropertyStatementAccess().getKeyPropertyNameParserRuleCall_1_0(), currentNode); 
	    }
	    lv_key_1=rulePropertyName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "key", lv_key_1, "PropertyName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    lv_op_2=('=' 
    {
        createLeafNode(grammarAccess.getPropertyStatementAccess().getOpEqualsSignKeyword_2_0_0(), "op"); 
    }


    |'+=' 
    {
        createLeafNode(grammarAccess.getPropertyStatementAccess().getOpPlusSignEqualsSignKeyword_2_0_1(), "op"); 
    }


    |'-=' 
    {
        createLeafNode(grammarAccess.getPropertyStatementAccess().getOpHyphenMinusEqualsSignKeyword_2_0_2(), "op"); 
    }


    |'*=' 
    {
        createLeafNode(grammarAccess.getPropertyStatementAccess().getOpAsteriskEqualsSignKeyword_2_0_3(), "op"); 
    }


    |'/=' 
    {
        createLeafNode(grammarAccess.getPropertyStatementAccess().getOpSolidusEqualsSignKeyword_2_0_4(), "op"); 
    }

)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", /* lv_op_2 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPropertyStatementAccess().getValuePropertyExpressionParserRuleCall_3_0(), currentNode); 
	    }
	    lv_value_3=rulePropertyExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_3, "PropertyExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getPropertyStatementAccess().getSemicolonKeyword_4(), null); 
    }
);





// Entry rule entryRuleUnsetPropertyStatement
entryRuleUnsetPropertyStatement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getUnsetPropertyStatementRule(), currentNode); }
	 iv_ruleUnsetPropertyStatement=ruleUnsetPropertyStatement 
	 { $current=$iv_ruleUnsetPropertyStatement.current; } 
	 EOF 
;

// Rule UnsetPropertyStatement
ruleUnsetPropertyStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('unset' 
    {
        createLeafNode(grammarAccess.getUnsetPropertyStatementAccess().getUnsetKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnsetPropertyStatementAccess().getUnsetPropertiesPropertyNameParserRuleCall_1_0(), currentNode); 
	    }
	    lv_unsetProperties_1=rulePropertyName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnsetPropertyStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "unsetProperties", lv_unsetProperties_1, "PropertyName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getUnsetPropertyStatementAccess().getSemicolonKeyword_2(), null); 
    }
);





// Entry rule entryRuleAnnotationStatement
entryRuleAnnotationStatement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAnnotationStatementRule(), currentNode); }
	 iv_ruleAnnotationStatement=ruleAnnotationStatement 
	 { $current=$iv_ruleAnnotationStatement.current; } 
	 EOF 
;

// Rule AnnotationStatement
ruleAnnotationStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('when' 
    {
        createLeafNode(grammarAccess.getAnnotationStatementAccess().getWhenKeyword_0_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAnnotationStatementAccess().getFilterFilterParserRuleCall_0_1_0(), currentNode); 
	    }
	    lv_filter_1=ruleFilter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "filter", lv_filter_1, "Filter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?(	
	
	    lv_immutable_2='immutable' 
    {
        createLeafNode(grammarAccess.getAnnotationStatementAccess().getImmutableImmutableKeyword_1_0(), "immutable"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "immutable", true, "immutable", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAnnotationStatementAccess().getKeyPropertyNameParserRuleCall_2_0(), currentNode); 
	    }
	    lv_key_3=rulePropertyName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "key", lv_key_3, "PropertyName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    lv_op_4=('=' 
    {
        createLeafNode(grammarAccess.getAnnotationStatementAccess().getOpEqualsSignKeyword_3_0_0(), "op"); 
    }


    |'+=' 
    {
        createLeafNode(grammarAccess.getAnnotationStatementAccess().getOpPlusSignEqualsSignKeyword_3_0_1(), "op"); 
    }


    |'-=' 
    {
        createLeafNode(grammarAccess.getAnnotationStatementAccess().getOpHyphenMinusEqualsSignKeyword_3_0_2(), "op"); 
    }


    |'*=' 
    {
        createLeafNode(grammarAccess.getAnnotationStatementAccess().getOpAsteriskEqualsSignKeyword_3_0_3(), "op"); 
    }


    |'/=' 
    {
        createLeafNode(grammarAccess.getAnnotationStatementAccess().getOpSolidusEqualsSignKeyword_3_0_4(), "op"); 
    }

)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", /* lv_op_4 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAnnotationStatementAccess().getValuePropertyExpressionParserRuleCall_4_0(), currentNode); 
	    }
	    lv_value_5=rulePropertyExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_5, "PropertyExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getAnnotationStatementAccess().getSemicolonKeyword_5(), null); 
    }
);





// Entry rule entryRulePropertyExpression
entryRulePropertyExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPropertyExpressionRule(), currentNode); }
	 iv_rulePropertyExpression=rulePropertyExpression 
	 { $current=$iv_rulePropertyExpression.current; } 
	 EOF 
;

// Rule PropertyExpression
rulePropertyExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getPropertyExpressionAccess().getExpressionParserRuleCall(), currentNode); 
    }
    this_Expression_0=ruleExpression
    { 
        $current = $this_Expression_0.current; 
        currentNode = currentNode.getParent();
    }
;





// Entry rule entryRuleSynchronization
entryRuleSynchronization returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSynchronizationRule(), currentNode); }
	 iv_ruleSynchronization=ruleSynchronization 
	 { $current=$iv_ruleSynchronization.current; } 
	 EOF 
;

// Rule Synchronization
ruleSynchronization returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSynchronizationAccess().getPartrefsSynchronizedPartParserRuleCall_0_0(), currentNode); 
	    }
	    lv_partrefs_0=ruleSynchronizedPart 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSynchronizationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "partrefs", lv_partrefs_0, "SynchronizedPart", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getSynchronizationAccess().getCommaKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSynchronizationAccess().getPartrefsSynchronizedPartParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_partrefs_2=ruleSynchronizedPart 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSynchronizationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "partrefs", lv_partrefs_2, "SynchronizedPart", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))+';' 
    {
        createLeafNode(grammarAccess.getSynchronizationAccess().getSemicolonKeyword_2(), null); 
    }
);





// Entry rule entryRuleSynchronizedPart
entryRuleSynchronizedPart returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSynchronizedPartRule(), currentNode); } 
	 iv_ruleSynchronizedPart=ruleSynchronizedPart 
	 { $current=$iv_ruleSynchronizedPart.current.getText(); }  
	 EOF 
;

// Rule SynchronizedPart
ruleSynchronizedPart returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
((
    { 
        currentNode=createCompositeNode(grammarAccess.getSynchronizedPartAccess().getCompoundNameParserRuleCall_0_0(), currentNode); 
    }
    this_CompoundName_0=ruleCompoundName    {
		$current.merge(this_CompoundName_0);
    }

    { 
        currentNode = currentNode.getParent();
    }
(
	kw='#' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSynchronizedPartAccess().getNumberSignKeyword_0_1_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getSynchronizedPartAccess().getPartNameParserRuleCall_0_1_1(), currentNode); 
    }
    this_PartName_2=rulePartName    {
		$current.merge(this_PartName_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
)?)
    |
    { 
        currentNode=createCompositeNode(grammarAccess.getSynchronizedPartAccess().getPartNameParserRuleCall_1(), currentNode); 
    }
    this_PartName_3=rulePartName    {
		$current.merge(this_PartName_3);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleBuildPart
entryRuleBuildPart returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBuildPartRule(), currentNode); }
	 iv_ruleBuildPart=ruleBuildPart 
	 { $current=$iv_ruleBuildPart.current; } 
	 EOF 
;

// Rule BuildPart
ruleBuildPart returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getBuildPartAccess().getArtifactsParserRuleCall_0(), currentNode); 
    }
    this_Artifacts_0=ruleArtifacts
    { 
        $current = $this_Artifacts_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getBuildPartAccess().getGroupParserRuleCall_1(), currentNode); 
    }
    this_Group_1=ruleGroup
    { 
        $current = $this_Group_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getBuildPartAccess().getActionParserRuleCall_2(), currentNode); 
    }
    this_Action_2=ruleAction
    { 
        $current = $this_Action_2.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleArtifacts
entryRuleArtifacts returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getArtifactsRule(), currentNode); }
	 iv_ruleArtifacts=ruleArtifacts 
	 { $current=$iv_ruleArtifacts.current; } 
	 EOF 
;

// Rule Artifacts
ruleArtifacts returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getArtifactsAccess().getVisibilityVisibilityEnumRuleCall_0_0(), currentNode); 
	    }
	    lv_visibility_0=ruleVisibility 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArtifactsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "visibility", lv_visibility_0, "Visibility", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?'artifacts' 
    {
        createLeafNode(grammarAccess.getArtifactsAccess().getArtifactsKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getArtifactsAccess().getNamePartNameParserRuleCall_2_0(), currentNode); 
	    }
	    lv_name_2=rulePartName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArtifactsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_2, "PartName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('provides' 
    {
        createLeafNode(grammarAccess.getArtifactsAccess().getProvidesKeyword_3_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getArtifactsAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_3_1_0(), currentNode); 
	    }
	    lv_providedCapabilities_4=ruleProvidedCapability 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArtifactsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "providedCapabilities", lv_providedCapabilities_4, "ProvidedCapability", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getArtifactsAccess().getCommaKeyword_3_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getArtifactsAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_3_2_1_0(), currentNode); 
	    }
	    lv_providedCapabilities_6=ruleProvidedCapability 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArtifactsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "providedCapabilities", lv_providedCapabilities_6, "ProvidedCapability", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getArtifactsAccess().getAssertsPostConditionAssertParserRuleCall_4_0(), currentNode); 
	    }
	    lv_asserts_7=rulePostConditionAssert 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArtifactsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "asserts", lv_asserts_7, "PostConditionAssert", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?'{' 
    {
        createLeafNode(grammarAccess.getArtifactsAccess().getLeftCurlyBracketKeyword_5(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getArtifactsAccess().getPathsPathGroupParserRuleCall_6_0(), currentNode); 
	    }
	    lv_paths_9=rulePathGroup 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArtifactsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "paths", lv_paths_9, "PathGroup", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getArtifactsAccess().getRightCurlyBracketKeyword_7(), null); 
    }
);





// Entry rule entryRulePathGroup
entryRulePathGroup returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPathGroupRule(), currentNode); }
	 iv_rulePathGroup=rulePathGroup 
	 { $current=$iv_rulePathGroup.current; } 
	 EOF 
;

// Rule PathGroup
rulePathGroup returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('when' 
    {
        createLeafNode(grammarAccess.getPathGroupAccess().getWhenKeyword_0_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPathGroupAccess().getFilterFilterParserRuleCall_0_1_0(), currentNode); 
	    }
	    lv_filter_1=ruleFilter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "filter", lv_filter_1, "Filter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?(((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPathGroupAccess().getPathsPathExpressionParserRuleCall_1_0_0_0(), currentNode); 
	    }
	    lv_paths_2=rulePathExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "paths", lv_paths_2, "PathExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)((',' 
    {
        createLeafNode(grammarAccess.getPathGroupAccess().getCommaKeyword_1_0_1_0_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPathGroupAccess().getPathsPathExpressionParserRuleCall_1_0_1_0_1_0(), currentNode); 
	    }
	    lv_paths_4=rulePathExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "paths", lv_paths_4, "PathExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*
    |((	
	
	    lv_firstIsBase_5='[' 
    {
        createLeafNode(grammarAccess.getPathGroupAccess().getFirstIsBaseLeftSquareBracketKeyword_1_0_1_1_0_0(), "firstIsBase"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "firstIsBase", true, "[", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPathGroupAccess().getPathsPathExpressionParserRuleCall_1_0_1_1_1_0(), currentNode); 
	    }
	    lv_paths_6=rulePathExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "paths", lv_paths_6, "PathExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getPathGroupAccess().getCommaKeyword_1_0_1_1_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPathGroupAccess().getPathsPathExpressionParserRuleCall_1_0_1_1_2_1_0(), currentNode); 
	    }
	    lv_paths_8=rulePathExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "paths", lv_paths_8, "PathExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*']' 
    {
        createLeafNode(grammarAccess.getPathGroupAccess().getRightSquareBracketKeyword_1_0_1_1_3(), null); 
    }
))';' 
    {
        createLeafNode(grammarAccess.getPathGroupAccess().getSemicolonKeyword_1_0_2(), null); 
    }
)
    |('annotations' 
    {
        createLeafNode(grammarAccess.getPathGroupAccess().getAnnotationsKeyword_1_1_0(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getPathGroupAccess().getLeftCurlyBracketKeyword_1_1_1(), null); 
    }
(('unset' 
    {
        createLeafNode(grammarAccess.getPathGroupAccess().getUnsetKeyword_1_1_2_0_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPathGroupAccess().getUnsetPropertiesPropertyNameParserRuleCall_1_1_2_0_1_0(), currentNode); 
	    }
	    lv_unsetProperties_14=rulePropertyName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "unsetProperties", lv_unsetProperties_14, "PropertyName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getPathGroupAccess().getSemicolonKeyword_1_1_2_0_2(), null); 
    }
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPathGroupAccess().getSetPropertiesAnnotationStatementParserRuleCall_1_1_2_1_0(), currentNode); 
	    }
	    lv_setProperties_16=ruleAnnotationStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "setProperties", lv_setProperties_16, "AnnotationStatement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))+'}' 
    {
        createLeafNode(grammarAccess.getPathGroupAccess().getRightCurlyBracketKeyword_1_1_3(), null); 
    }
)));





// Entry rule entryRulePathExpression
entryRulePathExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPathExpressionRule(), currentNode); }
	 iv_rulePathExpression=rulePathExpression 
	 { $current=$iv_rulePathExpression.current; } 
	 EOF 
;

// Rule PathExpression
rulePathExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(rulePath
    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPathExpressionAccess().getExprStatementParserRuleCall_1(), currentNode); 
    }
    this_ExprStatement_1=ruleExprStatement
    { 
        $current = $this_ExprStatement_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleExprStatement
entryRuleExprStatement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getExprStatementRule(), currentNode); }
	 iv_ruleExprStatement=ruleExprStatement 
	 { $current=$iv_ruleExprStatement.current; } 
	 EOF 
;

// Rule ExprStatement
ruleExprStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('expr' 
    {
        createLeafNode(grammarAccess.getExprStatementAccess().getExprKeyword_0(), null); 
    }
'(' 
    {
        createLeafNode(grammarAccess.getExprStatementAccess().getLeftParenthesisKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getExprStatementAccess().getExpressionExpressionParserRuleCall_2_0(), currentNode); 
	    }
	    lv_expression_2=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExprStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expression", lv_expression_2, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)')' 
    {
        createLeafNode(grammarAccess.getExprStatementAccess().getRightParenthesisKeyword_3(), null); 
    }
);





// Entry rule entryRulePath
entryRulePath returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPathRule(), currentNode); } 
	 iv_rulePath=rulePath 
	 { $current=$iv_rulePath.current.getText(); }  
	 EOF 
;

// Rule Path
rulePath returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
		myHiddenTokenState.restore();
    }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    createLeafNode(grammarAccess.getPathAccess().getSTRINGTerminalRuleCall_0(), null); 
    }

    |((
	kw='/' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPathAccess().getSolidusKeyword_1_0(), null); 
    }
)?
    { 
        currentNode=createCompositeNode(grammarAccess.getPathAccess().getQualifiedNameParserRuleCall_1_1(), currentNode); 
    }
    this_QualifiedName_2=ruleQualifiedName    {
		$current.merge(this_QualifiedName_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
(
	kw='/' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPathAccess().getSolidusKeyword_1_2_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getPathAccess().getQualifiedNameParserRuleCall_1_2_1(), currentNode); 
    }
    this_QualifiedName_4=ruleQualifiedName    {
		$current.merge(this_QualifiedName_4);
    }

    { 
        currentNode = currentNode.getParent();
    }
)*(
	kw='/' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPathAccess().getSolidusKeyword_1_3(), null); 
    }
)?))
    ;





// Entry rule entryRuleGroup
entryRuleGroup returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getGroupRule(), currentNode); }
	 iv_ruleGroup=ruleGroup 
	 { $current=$iv_ruleGroup.current; } 
	 EOF 
;

// Rule Group
ruleGroup returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getGroupAccess().getVisibilityVisibilityEnumRuleCall_0_0(), currentNode); 
	    }
	    lv_visibility_0=ruleVisibility 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "visibility", lv_visibility_0, "Visibility", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getGroupAccess().getExecutionModeExecutionModeEnumRuleCall_1_0(), currentNode); 
	    }
	    lv_executionMode_1=ruleExecutionMode 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "executionMode", lv_executionMode_1, "ExecutionMode", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?'group' 
    {
        createLeafNode(grammarAccess.getGroupAccess().getGroupKeyword_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getGroupAccess().getNamePartNameParserRuleCall_3_0(), currentNode); 
	    }
	    lv_name_3=rulePartName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_3, "PartName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('provides' 
    {
        createLeafNode(grammarAccess.getGroupAccess().getProvidesKeyword_4_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getGroupAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_4_1_0(), currentNode); 
	    }
	    lv_providedCapabilities_5=ruleProvidedCapability 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "providedCapabilities", lv_providedCapabilities_5, "ProvidedCapability", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getGroupAccess().getCommaKeyword_4_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getGroupAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_4_2_1_0(), currentNode); 
	    }
	    lv_providedCapabilities_7=ruleProvidedCapability 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "providedCapabilities", lv_providedCapabilities_7, "ProvidedCapability", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getGroupAccess().getAssertsPreConditionAssertParserRuleCall_5_0(), currentNode); 
	    }
	    lv_asserts_8=rulePreConditionAssert 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "asserts", lv_asserts_8, "PreConditionAssert", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getGroupAccess().getAssertsPostConditionAssertParserRuleCall_6_0(), currentNode); 
	    }
	    lv_asserts_9=rulePostConditionAssert 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "asserts", lv_asserts_9, "PostConditionAssert", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?'{' 
    {
        createLeafNode(grammarAccess.getGroupAccess().getLeftCurlyBracketKeyword_7(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getGroupAccess().getPrerequisitesPrerequisiteParserRuleCall_8_0(), currentNode); 
	    }
	    lv_prerequisites_11=rulePrerequisite 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "prerequisites", lv_prerequisites_11, "Prerequisite", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getGroupAccess().getRightCurlyBracketKeyword_9(), null); 
    }
);





// Entry rule entryRulePrerequisite
entryRulePrerequisite returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPrerequisiteRule(), currentNode); }
	 iv_rulePrerequisite=rulePrerequisite 
	 { $current=$iv_rulePrerequisite.current; } 
	 EOF 
;

// Rule Prerequisite
rulePrerequisite returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((	
	
	    lv_surpressed_0='hidden' 
    {
        createLeafNode(grammarAccess.getPrerequisiteAccess().getSurpressedHiddenKeyword_0_0_0(), "surpressed"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrerequisiteRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "surpressed", true, "hidden", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?('when' 
    {
        createLeafNode(grammarAccess.getPrerequisiteAccess().getWhenKeyword_0_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPrerequisiteAccess().getFilterFilterParserRuleCall_0_1_1_0(), currentNode); 
	    }
	    lv_filter_2=ruleFilter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrerequisiteRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "filter", lv_filter_2, "Filter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?((	
	
	    lv_alias_3=	RULE_ID
	{
		createLeafNode(grammarAccess.getPrerequisiteAccess().getAliasIDTerminalRuleCall_0_2_0_0(), "alias"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrerequisiteRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "alias", lv_alias_3, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)'=' 
    {
        createLeafNode(grammarAccess.getPrerequisiteAccess().getEqualsSignKeyword_0_2_1(), null); 
    }
)?((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPrerequisiteAccess().getPartReferencePrerequisiteEntryParserRuleCall_0_3_0_0(), currentNode); 
	    }
	    lv_partReference_5=rulePrerequisiteEntry 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrerequisiteRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "partReference", lv_partReference_5, "PrerequisiteEntry", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPrerequisiteAccess().getClosureClosureParserRuleCall_0_3_1_0(), currentNode); 
	    }
	    lv_closure_6=ruleClosure 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrerequisiteRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "closure", lv_closure_6, "Closure", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?))';' 
    {
        createLeafNode(grammarAccess.getPrerequisiteAccess().getSemicolonKeyword_1(), null); 
    }
);





// Entry rule entryRuleClosure
entryRuleClosure returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getClosureRule(), currentNode); }
	 iv_ruleClosure=ruleClosure 
	 { $current=$iv_ruleClosure.current; } 
	 EOF 
;

// Rule Closure
ruleClosure returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('with' 
    {
        createLeafNode(grammarAccess.getClosureAccess().getWithKeyword_0(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getClosureAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
(('properties' 
    {
        createLeafNode(grammarAccess.getClosureAccess().getPropertiesKeyword_2_0_0(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getClosureAccess().getLeftCurlyBracketKeyword_2_0_1(), null); 
    }
(('unset' 
    {
        createLeafNode(grammarAccess.getClosureAccess().getUnsetKeyword_2_0_2_0_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClosureAccess().getUnsetPropertiesPropertyNameParserRuleCall_2_0_2_0_1_0(), currentNode); 
	    }
	    lv_unsetProperties_5=rulePropertyName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClosureRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "unsetProperties", lv_unsetProperties_5, "PropertyName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getClosureAccess().getSemicolonKeyword_2_0_2_0_2(), null); 
    }
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClosureAccess().getSetPropertiesPropertyStatementParserRuleCall_2_0_2_1_0(), currentNode); 
	    }
	    lv_setProperties_7=rulePropertyStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClosureRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "setProperties", lv_setProperties_7, "PropertyStatement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))+'}' 
    {
        createLeafNode(grammarAccess.getClosureAccess().getRightCurlyBracketKeyword_2_0_3(), null); 
    }
)
    |('advice' 
    {
        createLeafNode(grammarAccess.getClosureAccess().getAdviceKeyword_2_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClosureAccess().getAdviceCompoundAdviceParserRuleCall_2_1_1_0(), currentNode); 
	    }
	    lv_advice_10=ruleCompoundAdvice 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClosureRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "advice", lv_advice_10, "CompoundAdvice", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)))*'}' 
    {
        createLeafNode(grammarAccess.getClosureAccess().getRightCurlyBracketKeyword_3(), null); 
    }
);





// Entry rule entryRulePrerequisiteEntry
entryRulePrerequisiteEntry returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPrerequisiteEntryRule(), currentNode); }
	 iv_rulePrerequisiteEntry=rulePrerequisiteEntry 
	 { $current=$iv_rulePrerequisiteEntry.current; } 
	 EOF 
;

// Rule PrerequisiteEntry
rulePrerequisiteEntry returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getPrerequisiteEntryAccess().getPartInSelfParserRuleCall_0(), currentNode); 
    }
    this_PartInSelf_0=rulePartInSelf
    { 
        $current = $this_PartInSelf_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrerequisiteEntryAccess().getCapabilityReferencedPartParserRuleCall_1(), currentNode); 
    }
    this_CapabilityReferencedPart_1=ruleCapabilityReferencedPart
    { 
        $current = $this_CapabilityReferencedPart_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrerequisiteEntryAccess().getCompoundReferencesParserRuleCall_2(), currentNode); 
    }
    this_CompoundReferences_2=ruleCompoundReferences
    { 
        $current = $this_CompoundReferences_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrerequisiteEntryAccess().getExprStatementParserRuleCall_3(), currentNode); 
    }
    this_ExprStatement_3=ruleExprStatement
    { 
        $current = $this_ExprStatement_3.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRulePartInSelf
entryRulePartInSelf returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPartInSelfRule(), currentNode); }
	 iv_rulePartInSelf=rulePartInSelf 
	 { $current=$iv_rulePartInSelf.current; } 
	 EOF 
;

// Rule PartInSelf
rulePartInSelf returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPartInSelfAccess().getPartNamePartNameParserRuleCall_0(), currentNode); 
	    }
	    lv_partName_0=rulePartName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPartInSelfRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "partName", lv_partName_0, "PartName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
);





// Entry rule entryRuleCapabilityReferencedPart
entryRuleCapabilityReferencedPart returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCapabilityReferencedPartRule(), currentNode); }
	 iv_ruleCapabilityReferencedPart=ruleCapabilityReferencedPart 
	 { $current=$iv_ruleCapabilityReferencedPart.current; } 
	 EOF 
;

// Rule CapabilityReferencedPart
ruleCapabilityReferencedPart returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCapabilityReferencedPartAccess().getInterfaceInterfaceNameParserRuleCall_0_0_0(), currentNode); 
	    }
	    lv_interface_0=ruleInterfaceName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCapabilityReferencedPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "interface", lv_interface_0, "InterfaceName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'/' 
    {
        createLeafNode(grammarAccess.getCapabilityReferencedPartAccess().getSolidusKeyword_0_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCapabilityReferencedPartAccess().getNameUnitNameParserRuleCall_0_2_0(), currentNode); 
	    }
	    lv_name_2=ruleUnitName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCapabilityReferencedPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_2, "UnitName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('/' 
    {
        createLeafNode(grammarAccess.getCapabilityReferencedPartAccess().getSolidusKeyword_0_3_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCapabilityReferencedPartAccess().getRangeVersionRangeParserRuleCall_0_3_1_0(), currentNode); 
	    }
	    lv_range_4=ruleVersionRange 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCapabilityReferencedPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "range", lv_range_4, "VersionRange", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?'#' 
    {
        createLeafNode(grammarAccess.getCapabilityReferencedPartAccess().getNumberSignKeyword_0_4(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCapabilityReferencedPartAccess().getPartNamePartNameParserRuleCall_0_5_0(), currentNode); 
	    }
	    lv_partName_6=rulePartName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCapabilityReferencedPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "partName", lv_partName_6, "PartName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))
    |((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCapabilityReferencedPartAccess().getInterfaceInterfaceNameParserRuleCall_1_0_0(), currentNode); 
	    }
	    lv_interface_7=ruleInterfaceName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCapabilityReferencedPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "interface", lv_interface_7, "InterfaceName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'/' 
    {
        createLeafNode(grammarAccess.getCapabilityReferencedPartAccess().getSolidusKeyword_1_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCapabilityReferencedPartAccess().getNameUnitNameParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_name_9=ruleUnitName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCapabilityReferencedPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_9, "UnitName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('/' 
    {
        createLeafNode(grammarAccess.getCapabilityReferencedPartAccess().getSolidusKeyword_1_3_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCapabilityReferencedPartAccess().getRangeVersionRangeParserRuleCall_1_3_1_0(), currentNode); 
	    }
	    lv_range_11=ruleVersionRange 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCapabilityReferencedPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "range", lv_range_11, "VersionRange", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?));





// Entry rule entryRuleCompoundReferences
entryRuleCompoundReferences returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCompoundReferencesRule(), currentNode); }
	 iv_ruleCompoundReferences=ruleCompoundReferences 
	 { $current=$iv_ruleCompoundReferences.current; } 
	 EOF 
;

// Rule CompoundReferences
ruleCompoundReferences returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('{' 
    {
        createLeafNode(grammarAccess.getCompoundReferencesAccess().getLeftCurlyBracketKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCompoundReferencesAccess().getPrerequisitesPrerequisiteParserRuleCall_1_0(), currentNode); 
	    }
	    lv_prerequisites_1=rulePrerequisite 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompoundReferencesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "prerequisites", lv_prerequisites_1, "Prerequisite", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getCompoundReferencesAccess().getRightCurlyBracketKeyword_2(), null); 
    }
);





// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getActionRule(), currentNode); }
	 iv_ruleAction=ruleAction 
	 { $current=$iv_ruleAction.current; } 
	 EOF 
;

// Rule Action
ruleAction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getActionAccess().getVisibilityVisibilityEnumRuleCall_0_0(), currentNode); 
	    }
	    lv_visibility_0=ruleVisibility 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "visibility", lv_visibility_0, "Visibility", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getActionAccess().getExecutionModeExecutionModeEnumRuleCall_1_0(), currentNode); 
	    }
	    lv_executionMode_1=ruleExecutionMode 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "executionMode", lv_executionMode_1, "ExecutionMode", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?'action' 
    {
        createLeafNode(grammarAccess.getActionAccess().getActionKeyword_2(), null); 
    }
rulePartName('provides' 
    {
        createLeafNode(grammarAccess.getActionAccess().getProvidesKeyword_4_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getActionAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_4_1_0(), currentNode); 
	    }
	    lv_providedCapabilities_5=ruleProvidedCapability 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "providedCapabilities", lv_providedCapabilities_5, "ProvidedCapability", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getActionAccess().getCommaKeyword_4_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getActionAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_4_2_1_0(), currentNode); 
	    }
	    lv_providedCapabilities_7=ruleProvidedCapability 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "providedCapabilities", lv_providedCapabilities_7, "ProvidedCapability", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getActionAccess().getAssertsPreConditionAssertParserRuleCall_5_0(), currentNode); 
	    }
	    lv_asserts_8=rulePreConditionAssert 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "asserts", lv_asserts_8, "PreConditionAssert", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getActionAccess().getAssertsPostConditionAssertParserRuleCall_6_0(), currentNode); 
	    }
	    lv_asserts_9=rulePostConditionAssert 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "asserts", lv_asserts_9, "PostConditionAssert", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?'{' 
    {
        createLeafNode(grammarAccess.getActionAccess().getLeftCurlyBracketKeyword_7(), null); 
    }
('properties' 
    {
        createLeafNode(grammarAccess.getActionAccess().getPropertiesKeyword_8_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getActionAccess().getPropertiesPropertyStatementsParserRuleCall_8_1_0(), currentNode); 
	    }
	    lv_properties_12=rulePropertyStatements 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "properties", lv_properties_12, "PropertyStatements", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getActionAccess().getAdviceAdviceParserRuleCall_9_0(), currentNode); 
	    }
	    lv_advice_13=ruleAdvice 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "advice", lv_advice_13, "Advice", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getActionAccess().getResultGroupActionInputGroupParserRuleCall_10_0(), currentNode); 
	    }
	    lv_resultGroup_14=ruleActionInputGroup 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "resultGroup", lv_resultGroup_14, "ActionInputGroup", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getActionAccess().getLayoutLayoutParserRuleCall_11_0(), currentNode); 
	    }
	    lv_layout_15=ruleLayout 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "layout", lv_layout_15, "Layout", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getActionAccess().getStatementsStatementsParserRuleCall_12_0(), currentNode); 
	    }
	    lv_statements_16=ruleStatements 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "statements", lv_statements_16, "Statements", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'}' 
    {
        createLeafNode(grammarAccess.getActionAccess().getRightCurlyBracketKeyword_13(), null); 
    }
);





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getParameterRule(), currentNode); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getParameterAccess().getValExpressionParserRuleCall_0(), currentNode); 
	    }
	    lv_val_0=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "val", lv_val_0, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
);





// Entry rule entryRuleLayout
entryRuleLayout returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLayoutRule(), currentNode); }
	 iv_ruleLayout=ruleLayout 
	 { $current=$iv_ruleLayout.current; } 
	 EOF 
;

// Rule Layout
ruleLayout returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('when' 
    {
        createLeafNode(grammarAccess.getLayoutAccess().getWhenKeyword_0_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getLayoutAccess().getFilterFilterParserRuleCall_0_1_0(), currentNode); 
	    }
	    lv_filter_1=ruleFilter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLayoutRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "filter", lv_filter_1, "Filter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?'layout' 
    {
        createLeafNode(grammarAccess.getLayoutAccess().getLayoutKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getLayoutAccess().getNameQualifiedNameParserRuleCall_2_0(), currentNode); 
	    }
	    lv_name_3=ruleQualifiedName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLayoutRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_3, "QualifiedName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getLayoutAccess().getAssertsPostConditionAssertParserRuleCall_3_0(), currentNode); 
	    }
	    lv_asserts_4=rulePostConditionAssert 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLayoutRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "asserts", lv_asserts_4, "PostConditionAssert", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?'{' 
    {
        createLeafNode(grammarAccess.getLayoutAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getLayoutAccess().getPathsPathGroupParserRuleCall_5_0(), currentNode); 
	    }
	    lv_paths_6=rulePathGroup 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLayoutRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "paths", lv_paths_6, "PathGroup", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getLayoutAccess().getRightCurlyBracketKeyword_6(), null); 
    }
);





// Entry rule entryRuleActionInputGroup
entryRuleActionInputGroup returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getActionInputGroupRule(), currentNode); }
	 iv_ruleActionInputGroup=ruleActionInputGroup 
	 { $current=$iv_ruleActionInputGroup.current; } 
	 EOF 
;

// Rule ActionInputGroup
ruleActionInputGroup returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('group' 
    {
        createLeafNode(grammarAccess.getActionInputGroupAccess().getGroupKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getActionInputGroupAccess().getAssertsPreConditionAssertParserRuleCall_1_0(), currentNode); 
	    }
	    lv_asserts_1=rulePreConditionAssert 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActionInputGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "asserts", lv_asserts_1, "PreConditionAssert", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getActionInputGroupAccess().getAssertsPostConditionAssertParserRuleCall_2_0(), currentNode); 
	    }
	    lv_asserts_2=rulePostConditionAssert 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActionInputGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "asserts", lv_asserts_2, "PostConditionAssert", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?'{' 
    {
        createLeafNode(grammarAccess.getActionInputGroupAccess().getLeftCurlyBracketKeyword_3(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getActionInputGroupAccess().getPrerequisitesPrerequisiteParserRuleCall_4_0(), currentNode); 
	    }
	    lv_prerequisites_4=rulePrerequisite 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActionInputGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "prerequisites", lv_prerequisites_4, "Prerequisite", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getActionInputGroupAccess().getRightCurlyBracketKeyword_5(), null); 
    }
);





// Entry rule entryRuleRepositoryConfiguration
entryRuleRepositoryConfiguration returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRepositoryConfigurationRule(), currentNode); }
	 iv_ruleRepositoryConfiguration=ruleRepositoryConfiguration 
	 { $current=$iv_ruleRepositoryConfiguration.current; } 
	 EOF 
;

// Rule RepositoryConfiguration
ruleRepositoryConfiguration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRepositoryConfigurationAccess().getLocationURIParserRuleCall_0_0_0(), currentNode); 
	    }
	    lv_location_0=ruleURI 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRepositoryConfigurationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "location", lv_location_0, "URI", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |('resolver' 
    {
        createLeafNode(grammarAccess.getRepositoryConfigurationAccess().getResolverKeyword_0_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRepositoryConfigurationAccess().getResolverClassQualifiedNameParserRuleCall_0_1_1_0(), currentNode); 
	    }
	    lv_resolverClass_2=ruleQualifiedName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRepositoryConfigurationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "resolverClass", lv_resolverClass_2, "QualifiedName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)))(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRepositoryConfigurationAccess().getAdviceCompoundAdviceParserRuleCall_1_0(), currentNode); 
	    }
	    lv_advice_3=ruleCompoundAdvice 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRepositoryConfigurationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "advice", lv_advice_3, "CompoundAdvice", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?';' 
    {
        createLeafNode(grammarAccess.getRepositoryConfigurationAccess().getSemicolonKeyword_2(), null); 
    }
);





// Entry rule entryRuleURI
entryRuleURI returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getURIRule(), currentNode); } 
	 iv_ruleURI=ruleURI 
	 { $current=$iv_ruleURI.current.getText(); }  
	 EOF 
;

// Rule URI
ruleURI returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    createLeafNode(grammarAccess.getURIAccess().getSTRINGTerminalRuleCall(), null); 
    }

    ;





// Entry rule entryRuleNamedAdvice
entryRuleNamedAdvice returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getNamedAdviceRule(), currentNode); }
	 iv_ruleNamedAdvice=ruleNamedAdvice 
	 { $current=$iv_ruleNamedAdvice.current; } 
	 EOF 
;

// Rule NamedAdvice
ruleNamedAdvice returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_name_0=	RULE_ID
	{
		createLeafNode(grammarAccess.getNamedAdviceAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNamedAdviceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getNamedAdviceAccess().getAdviceCompoundAdviceParserRuleCall_1_0(), currentNode); 
	    }
	    lv_advice_1=ruleCompoundAdvice 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNamedAdviceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "advice", lv_advice_1, "CompoundAdvice", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleAdvice
entryRuleAdvice returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAdviceRule(), currentNode); }
	 iv_ruleAdvice=ruleAdvice 
	 { $current=$iv_ruleAdvice.current; } 
	 EOF 
;

// Rule Advice
ruleAdvice returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('advice' 
    {
        createLeafNode(grammarAccess.getAdviceAccess().getAdviceKeyword_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getAdviceAccess().getCompoundAdviceParserRuleCall_1(), currentNode); 
    }
    this_CompoundAdvice_1=ruleCompoundAdvice
    { 
        $current = $this_CompoundAdvice_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleCompoundAdvice
entryRuleCompoundAdvice returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCompoundAdviceRule(), currentNode); }
	 iv_ruleCompoundAdvice=ruleCompoundAdvice 
	 { $current=$iv_ruleCompoundAdvice.current; } 
	 EOF 
;

// Rule CompoundAdvice
ruleCompoundAdvice returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('{' 
    {
        createLeafNode(grammarAccess.getCompoundAdviceAccess().getLeftCurlyBracketKeyword_0(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCompoundAdviceAccess().getAdviceAdviceStatementParserRuleCall_1_0_0(), currentNode); 
	    }
	    lv_advice_1=ruleAdviceStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompoundAdviceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "advice", lv_advice_1, "AdviceStatement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getCompoundAdviceAccess().getSemicolonKeyword_1_1(), null); 
    }
)*'}' 
    {
        createLeafNode(grammarAccess.getCompoundAdviceAccess().getRightCurlyBracketKeyword_2(), null); 
    }
);





// Entry rule entryRuleAdviceStatement
entryRuleAdviceStatement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAdviceStatementRule(), currentNode); }
	 iv_ruleAdviceStatement=ruleAdviceStatement 
	 { $current=$iv_ruleAdviceStatement.current; } 
	 EOF 
;

// Rule AdviceStatement
ruleAdviceStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAdviceStatementAccess().getPathAdvicePathParserRuleCall_0_0(), currentNode); 
	    }
	    lv_path_0=ruleAdvicePath 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdviceStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "path", lv_path_0, "AdvicePath", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(('=' 
    {
        createLeafNode(grammarAccess.getAdviceStatementAccess().getEqualsSignKeyword_1_0_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAdviceStatementAccess().getValueExpressionParserRuleCall_1_0_1_0(), currentNode); 
	    }
	    lv_value_2=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdviceStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_2, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAdviceStatementAccess().getAdviceCompoundAdviceParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_advice_3=ruleCompoundAdvice 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdviceStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "advice", lv_advice_3, "CompoundAdvice", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)));





// Entry rule entryRuleAdvicePath
entryRuleAdvicePath returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAdvicePathRule(), currentNode); }
	 iv_ruleAdvicePath=ruleAdvicePath 
	 { $current=$iv_ruleAdvicePath.current; } 
	 EOF 
;

// Rule AdvicePath
ruleAdvicePath returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAdvicePathAccess().getPathElementsAdvicePathSeparatorParserRuleCall_0_0(), currentNode); 
	    }
	    lv_pathElements_0=ruleAdvicePathSeparator 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdvicePathRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "pathElements", lv_pathElements_0, "AdvicePathSeparator", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAdvicePathAccess().getPathElementsAdvicePathElementParserRuleCall_1_0(), currentNode); 
	    }
	    lv_pathElements_1=ruleAdvicePathElement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdvicePathRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "pathElements", lv_pathElements_1, "AdvicePathElement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAdvicePathAccess().getPathElementsAdvicePathSeparatorParserRuleCall_2_0_0(), currentNode); 
	    }
	    lv_pathElements_2=ruleAdvicePathSeparator 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdvicePathRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "pathElements", lv_pathElements_2, "AdvicePathSeparator", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAdvicePathAccess().getPathElementAdvicePathElementParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_pathElement_3=ruleAdvicePathElement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdvicePathRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "pathElement", lv_pathElement_3, "AdvicePathElement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleAdvicePathSeparator
entryRuleAdvicePathSeparator returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAdvicePathSeparatorRule(), currentNode); }
	 iv_ruleAdvicePathSeparator=ruleAdvicePathSeparator 
	 { $current=$iv_ruleAdvicePathSeparator.current; } 
	 EOF 
;

// Rule AdvicePathSeparator
ruleAdvicePathSeparator returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getAdvicePathSeparatorAccess().getAdvicePathChildrenParserRuleCall(), currentNode); 
    }
    this_AdvicePathChildren_0=ruleAdvicePathChildren
    { 
        $current = $this_AdvicePathChildren_0.current; 
        currentNode = currentNode.getParent();
    }
;





// Entry rule entryRuleAdvicePathChildren
entryRuleAdvicePathChildren returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAdvicePathChildrenRule(), currentNode); }
	 iv_ruleAdvicePathChildren=ruleAdvicePathChildren 
	 { $current=$iv_ruleAdvicePathChildren.current; } 
	 EOF 
;

// Rule AdvicePathChildren
ruleAdvicePathChildren returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getAdvicePathChildrenAccess().getAdvicePathChildrenAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAdvicePathChildrenAccess().getAdvicePathChildrenAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'/' 
    {
        createLeafNode(grammarAccess.getAdvicePathChildrenAccess().getSolidusKeyword_1(), null); 
    }
);





// Entry rule entryRuleAdvicePathElement
entryRuleAdvicePathElement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAdvicePathElementRule(), currentNode); }
	 iv_ruleAdvicePathElement=ruleAdvicePathElement 
	 { $current=$iv_ruleAdvicePathElement.current; } 
	 EOF 
;

// Rule AdvicePathElement
ruleAdvicePathElement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((	
	
	    lv_node_0=(	{ 
        currentNode=createCompositeNode(grammarAccess.getAdvicePathElementAccess().getNodeQualifiedNameParserRuleCall_0_0_0_0(), currentNode); 
    }
	ruleQualifiedName	{ 
        currentNode = currentNode.getParent();
    }

    |	{ 
        currentNode=createCompositeNode(grammarAccess.getAdvicePathElementAccess().getNodeWildcardNodeParserRuleCall_0_0_0_1(), currentNode); 
    }
	ruleWildcardNode	{ 
        currentNode = currentNode.getParent();
    }

    |'.' 
    {
        createLeafNode(grammarAccess.getAdvicePathElementAccess().getNodeFullStopKeyword_0_0_0_2(), "node"); 
    }

)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdvicePathElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "node", /* lv_node_0 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)('[' 
    {
        createLeafNode(grammarAccess.getAdvicePathElementAccess().getLeftSquareBracketKeyword_0_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAdvicePathElementAccess().getPredicateExpressionParserRuleCall_0_1_1_0(), currentNode); 
	    }
	    lv_predicate_2=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdvicePathElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "predicate", lv_predicate_2, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)']' 
    {
        createLeafNode(grammarAccess.getAdvicePathElementAccess().getRightSquareBracketKeyword_0_1_2(), null); 
    }
)?)
    |(	
	
	    lv_node_4='..' 
    {
        createLeafNode(grammarAccess.getAdvicePathElementAccess().getNodeFullStopFullStopKeyword_1_0(), "node"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdvicePathElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "node", /* lv_node_4 */ input.LT(-1), "..", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleWildcardNode
entryRuleWildcardNode returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getWildcardNodeRule(), currentNode); } 
	 iv_ruleWildcardNode=ruleWildcardNode 
	 { $current=$iv_ruleWildcardNode.current.getText(); }  
	 EOF 
;

// Rule WildcardNode
ruleWildcardNode returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
	kw='?' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getWildcardNodeAccess().getQuestionMarkKeyword_0(), null); 
    }
(
	kw='?' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getWildcardNodeAccess().getQuestionMarkKeyword_1(), null); 
    }
)?)
    ;





// Entry rule entryRuleFilter
entryRuleFilter returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFilterRule(), currentNode); }
	 iv_ruleFilter=ruleFilter 
	 { $current=$iv_ruleFilter.current; } 
	 EOF 
;

// Rule Filter
ruleFilter returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('(' 
    {
        createLeafNode(grammarAccess.getFilterAccess().getLeftParenthesisKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFilterAccess().getPredicateExpressionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_predicate_1=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFilterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "predicate", lv_predicate_1, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)')' 
    {
        createLeafNode(grammarAccess.getFilterAccess().getRightParenthesisKeyword_2(), null); 
    }
);





// Entry rule entryRulePreConditionAssert
entryRulePreConditionAssert returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPreConditionAssertRule(), currentNode); }
	 iv_rulePreConditionAssert=rulePreConditionAssert 
	 { $current=$iv_rulePreConditionAssert.current; } 
	 EOF 
;

// Rule PreConditionAssert
rulePreConditionAssert returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_scope_0='precondition' 
    {
        createLeafNode(grammarAccess.getPreConditionAssertAccess().getScopePreconditionKeyword_0_0(), "scope"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPreConditionAssertRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "scope", /* lv_scope_0 */ input.LT(-1), "precondition", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)'{' 
    {
        createLeafNode(grammarAccess.getPreConditionAssertAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPreConditionAssertAccess().getAssertsAssertionExpressionParserRuleCall_2_0(), currentNode); 
	    }
	    lv_asserts_2=ruleAssertionExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPreConditionAssertRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "asserts", lv_asserts_2, "AssertionExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getPreConditionAssertAccess().getRightCurlyBracketKeyword_3(), null); 
    }
);





// Entry rule entryRulePostConditionAssert
entryRulePostConditionAssert returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPostConditionAssertRule(), currentNode); }
	 iv_rulePostConditionAssert=rulePostConditionAssert 
	 { $current=$iv_rulePostConditionAssert.current; } 
	 EOF 
;

// Rule PostConditionAssert
rulePostConditionAssert returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_scope_0='postcondition' 
    {
        createLeafNode(grammarAccess.getPostConditionAssertAccess().getScopePostconditionKeyword_0_0(), "scope"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPostConditionAssertRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "scope", /* lv_scope_0 */ input.LT(-1), "postcondition", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)'{' 
    {
        createLeafNode(grammarAccess.getPostConditionAssertAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPostConditionAssertAccess().getAssertsAssertionExpressionParserRuleCall_2_0(), currentNode); 
	    }
	    lv_asserts_2=ruleAssertionExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPostConditionAssertRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "asserts", lv_asserts_2, "AssertionExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getPostConditionAssertAccess().getRightCurlyBracketKeyword_3(), null); 
    }
);





// Entry rule entryRuleAssertionExpression
entryRuleAssertionExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAssertionExpressionRule(), currentNode); }
	 iv_ruleAssertionExpression=ruleAssertionExpression 
	 { $current=$iv_ruleAssertionExpression.current; } 
	 EOF 
;

// Rule AssertionExpression
ruleAssertionExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('assert' 
    {
        createLeafNode(grammarAccess.getAssertionExpressionAccess().getAssertKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAssertionExpressionAccess().getExprExpressionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_expr_1=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssertionExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expr", lv_expr_1, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getAssertionExpressionAccess().getCommaKeyword_2_0(), null); 
    }
(	
	
	    lv_message_3=	RULE_STRING
	{
		createLeafNode(grammarAccess.getAssertionExpressionAccess().getMessageSTRINGTerminalRuleCall_2_1_0(), "message"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssertionExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "message", lv_message_3, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?';' 
    {
        createLeafNode(grammarAccess.getAssertionExpressionAccess().getSemicolonKeyword_3(), null); 
    }
);





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getStatementRule(), currentNode); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getSwitchStatementParserRuleCall_0(), currentNode); 
    }
    this_SwitchStatement_0=ruleSwitchStatement
    { 
        $current = $this_SwitchStatement_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_1(), currentNode); 
    }
    this_WhileStatement_1=ruleWhileStatement
    { 
        $current = $this_WhileStatement_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getForStatementParserRuleCall_2(), currentNode); 
    }
    this_ForStatement_2=ruleForStatement
    { 
        $current = $this_ForStatement_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getCompoundStatementParserRuleCall_3(), currentNode); 
    }
    this_CompoundStatement_3=ruleCompoundStatement
    { 
        $current = $this_CompoundStatement_3.current; 
        currentNode = currentNode.getParent();
    }

    |(
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getVarExpressionParserRuleCall_4_0(), currentNode); 
    }
    this_VarExpression_4=ruleVarExpression
    { 
        $current = $this_VarExpression_4.current; 
        currentNode = currentNode.getParent();
    }
';' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getSemicolonKeyword_4_1(), null); 
    }
)
    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getBreakStatementParserRuleCall_5(), currentNode); 
    }
    this_BreakStatement_6=ruleBreakStatement
    { 
        $current = $this_BreakStatement_6.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getContinueStatementParserRuleCall_6(), currentNode); 
    }
    this_ContinueStatement_7=ruleContinueStatement
    { 
        $current = $this_ContinueStatement_7.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_7(), currentNode); 
    }
    this_ReturnStatement_8=ruleReturnStatement
    { 
        $current = $this_ReturnStatement_8.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleBreakStatement
entryRuleBreakStatement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBreakStatementRule(), currentNode); }
	 iv_ruleBreakStatement=ruleBreakStatement 
	 { $current=$iv_ruleBreakStatement.current; } 
	 EOF 
;

// Rule BreakStatement
ruleBreakStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getBreakStatementAccess().getBreakStatementAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBreakStatementAccess().getBreakStatementAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'break' 
    {
        createLeafNode(grammarAccess.getBreakStatementAccess().getBreakKeyword_1(), null); 
    }
';' 
    {
        createLeafNode(grammarAccess.getBreakStatementAccess().getSemicolonKeyword_2(), null); 
    }
);





// Entry rule entryRuleContinueStatement
entryRuleContinueStatement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getContinueStatementRule(), currentNode); }
	 iv_ruleContinueStatement=ruleContinueStatement 
	 { $current=$iv_ruleContinueStatement.current; } 
	 EOF 
;

// Rule ContinueStatement
ruleContinueStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getContinueStatementAccess().getContinueStatementAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getContinueStatementAccess().getContinueStatementAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'continue' 
    {
        createLeafNode(grammarAccess.getContinueStatementAccess().getContinueKeyword_1(), null); 
    }
';' 
    {
        createLeafNode(grammarAccess.getContinueStatementAccess().getSemicolonKeyword_2(), null); 
    }
);





// Entry rule entryRuleCompoundStatement
entryRuleCompoundStatement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCompoundStatementRule(), currentNode); }
	 iv_ruleCompoundStatement=ruleCompoundStatement 
	 { $current=$iv_ruleCompoundStatement.current; } 
	 EOF 
;

// Rule CompoundStatement
ruleCompoundStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('{' 
    {
        createLeafNode(grammarAccess.getCompoundStatementAccess().getLeftCurlyBracketKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCompoundStatementAccess().getStatementsStatementsParserRuleCall_1_0(), currentNode); 
	    }
	    lv_statements_1=ruleStatements 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompoundStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "statements", lv_statements_1, "Statements", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'}' 
    {
        createLeafNode(grammarAccess.getCompoundStatementAccess().getRightCurlyBracketKeyword_2(), null); 
    }
);





// Entry rule entryRuleStatements
entryRuleStatements returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getStatementsRule(), currentNode); }
	 iv_ruleStatements=ruleStatements 
	 { $current=$iv_ruleStatements.current; } 
	 EOF 
;

// Rule Statements
ruleStatements returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getStatementsAccess().getStatementsStatementParserRuleCall_0(), currentNode); 
	    }
	    lv_statements_0=ruleStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "statements", lv_statements_0, "Statement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*;





// Entry rule entryRuleWhileStatement
entryRuleWhileStatement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getWhileStatementRule(), currentNode); }
	 iv_ruleWhileStatement=ruleWhileStatement 
	 { $current=$iv_ruleWhileStatement.current; } 
	 EOF 
;

// Rule WhileStatement
ruleWhileStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('while' 
    {
        createLeafNode(grammarAccess.getWhileStatementAccess().getWhileKeyword_0(), null); 
    }
'(' 
    {
        createLeafNode(grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getWhileStatementAccess().getConditionVarExpressionParserRuleCall_2_0(), currentNode); 
	    }
	    lv_condition_2=ruleVarExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhileStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "condition", lv_condition_2, "VarExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)')' 
    {
        createLeafNode(grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getWhileStatementAccess().getBodyStatementParserRuleCall_4_0(), currentNode); 
	    }
	    lv_body_4=ruleStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhileStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "body", lv_body_4, "Statement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleSwitchStatement
entryRuleSwitchStatement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSwitchStatementRule(), currentNode); }
	 iv_ruleSwitchStatement=ruleSwitchStatement 
	 { $current=$iv_ruleSwitchStatement.current; } 
	 EOF 
;

// Rule SwitchStatement
ruleSwitchStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('switch' 
    {
        createLeafNode(grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0(), null); 
    }
'(' 
    {
        createLeafNode(grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSwitchStatementAccess().getSwitchExprVarExpressionParserRuleCall_2_0(), currentNode); 
	    }
	    lv_switchExpr_2=ruleVarExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSwitchStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "switchExpr", lv_switchExpr_2, "VarExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)')' 
    {
        createLeafNode(grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSwitchStatementAccess().getCaseCaseParserRuleCall_5_0(), currentNode); 
	    }
	    lv_case_5=ruleCase 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSwitchStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "case", lv_case_5, "Case", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*('default' 
    {
        createLeafNode(grammarAccess.getSwitchStatementAccess().getDefaultKeyword_6_0(), null); 
    }
':' 
    {
        createLeafNode(grammarAccess.getSwitchStatementAccess().getColonKeyword_6_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSwitchStatementAccess().getStatementsStatementsParserRuleCall_6_2_0(), currentNode); 
	    }
	    lv_statements_8=ruleStatements 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSwitchStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "statements", lv_statements_8, "Statements", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?'}' 
    {
        createLeafNode(grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7(), null); 
    }
);





// Entry rule entryRuleCase
entryRuleCase returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCaseRule(), currentNode); }
	 iv_ruleCase=ruleCase 
	 { $current=$iv_ruleCase.current; } 
	 EOF 
;

// Rule Case
ruleCase returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('case' 
    {
        createLeafNode(grammarAccess.getCaseAccess().getCaseKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCaseAccess().getConditionValueLiteralParserRuleCall_1_0(), currentNode); 
	    }
	    lv_condition_1=ruleValueLiteral 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "condition", lv_condition_1, "ValueLiteral", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)':' 
    {
        createLeafNode(grammarAccess.getCaseAccess().getColonKeyword_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCaseAccess().getStatementsStatementParserRuleCall_3_0(), currentNode); 
	    }
	    lv_statements_3=ruleStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "statements", lv_statements_3, "Statement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleForStatement
entryRuleForStatement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getForStatementRule(), currentNode); }
	 iv_ruleForStatement=ruleForStatement 
	 { $current=$iv_ruleForStatement.current; } 
	 EOF 
;

// Rule ForStatement
ruleForStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getForStatementAccess().getForStatementAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getForStatementAccess().getForStatementAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'for' 
    {
        createLeafNode(grammarAccess.getForStatementAccess().getForKeyword_1(), null); 
    }
'(' 
    {
        createLeafNode(grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getForStatementAccess().getInitVarExpressionListParserRuleCall_3_0(), currentNode); 
	    }
	    lv_init_3=ruleVarExpressionList 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "init", lv_init_3, "VarExpressionList", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?';' 
    {
        createLeafNode(grammarAccess.getForStatementAccess().getSemicolonKeyword_4(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getForStatementAccess().getCondExpressionParserRuleCall_5_0(), currentNode); 
	    }
	    lv_cond_5=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "cond", lv_cond_5, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?';' 
    {
        createLeafNode(grammarAccess.getForStatementAccess().getSemicolonKeyword_6(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getForStatementAccess().getIterateExpressionListParserRuleCall_7_0(), currentNode); 
	    }
	    lv_iterate_7=ruleExpressionList 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "iterate", lv_iterate_7, "ExpressionList", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?')' 
    {
        createLeafNode(grammarAccess.getForStatementAccess().getRightParenthesisKeyword_8(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getForStatementAccess().getBodyStatementParserRuleCall_9_0(), currentNode); 
	    }
	    lv_body_9=ruleStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "body", lv_body_9, "Statement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleReturnStatement
entryRuleReturnStatement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getReturnStatementRule(), currentNode); }
	 iv_ruleReturnStatement=ruleReturnStatement 
	 { $current=$iv_ruleReturnStatement.current; } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('return' 
    {
        createLeafNode(grammarAccess.getReturnStatementAccess().getReturnKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getReturnStatementAccess().getReturnExpressionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_return_1=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReturnStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "return", lv_return_1, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getReturnStatementAccess().getSemicolonKeyword_2(), null); 
    }
);







// Entry rule entryRuleVarExpressionList
entryRuleVarExpressionList returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getVarExpressionListRule(), currentNode); }
	 iv_ruleVarExpressionList=ruleVarExpressionList 
	 { $current=$iv_ruleVarExpressionList.current; } 
	 EOF 
;

// Rule VarExpressionList
ruleVarExpressionList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getVarExpressionListAccess().getExprVarExpressionParserRuleCall_0_0(), currentNode); 
	    }
	    lv_expr_0=ruleVarExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVarExpressionListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "expr", lv_expr_0, "VarExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getVarExpressionListAccess().getCommaKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getVarExpressionListAccess().getExprVarExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_expr_2=ruleVarExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVarExpressionListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "expr", lv_expr_2, "VarExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleExpressionList
entryRuleExpressionList returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getExpressionListRule(), currentNode); }
	 iv_ruleExpressionList=ruleExpressionList 
	 { $current=$iv_ruleExpressionList.current; } 
	 EOF 
;

// Rule ExpressionList
ruleExpressionList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getExpressionListAccess().getExprExpressionParserRuleCall_0_0(), currentNode); 
	    }
	    lv_expr_0=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "expr", lv_expr_0, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getExpressionListAccess().getCommaKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getExpressionListAccess().getExprExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_expr_2=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "expr", lv_expr_2, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleVarExpression
entryRuleVarExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getVarExpressionRule(), currentNode); }
	 iv_ruleVarExpression=ruleVarExpression 
	 { $current=$iv_ruleVarExpression.current; } 
	 EOF 
;

// Rule VarExpression
ruleVarExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getVarExpressionAccess().getExpressionParserRuleCall_0(), currentNode); 
    }
    this_Expression_0=ruleExpression
    { 
        $current = $this_Expression_0.current; 
        currentNode = currentNode.getParent();
    }

    |('var' 
    {
        createLeafNode(grammarAccess.getVarExpressionAccess().getVarKeyword_1_0(), null); 
    }
(	
	
	    lv_name_2=	RULE_ID
	{
		createLeafNode(grammarAccess.getVarExpressionAccess().getNameIDTerminalRuleCall_1_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVarExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)'=' 
    {
        createLeafNode(grammarAccess.getVarExpressionAccess().getEqualsSignKeyword_1_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getVarExpressionAccess().getValueExpressionParserRuleCall_1_3_0(), currentNode); 
	    }
	    lv_value_4=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVarExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_4, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)));





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getValueExpressionParserRuleCall(), currentNode); 
    }
    this_ValueExpression_0=ruleValueExpression
    { 
        $current = $this_ValueExpression_0.current; 
        currentNode = currentNode.getParent();
    }
;





// Entry rule entryRuleValueExpression
entryRuleValueExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getValueExpressionRule(), currentNode); }
	 iv_ruleValueExpression=ruleValueExpression 
	 { $current=$iv_ruleValueExpression.current; } 
	 EOF 
;

// Rule ValueExpression
ruleValueExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getValueExpressionAccess().getValueAssignmentExpressionParserRuleCall_0(), currentNode); 
	    }
	    lv_value_0=ruleAssignmentExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getValueExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0, "AssignmentExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
);





// Entry rule entryRuleAssignmentExpression
entryRuleAssignmentExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAssignmentExpressionRule(), currentNode); }
	 iv_ruleAssignmentExpression=ruleAssignmentExpression 
	 { $current=$iv_ruleAssignmentExpression.current; } 
	 EOF 
;

// Rule AssignmentExpression
ruleAssignmentExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAssignmentExpressionAccess().getChainExpressionParserRuleCall_0(), currentNode); 
    }
    this_ChainExpression_0=ruleChainExpression
    { 
        $current = $this_ChainExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getAssignmentExpressionAccess().getAssignmentOperationLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAssignmentExpressionAccess().getAssignmentOperationLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_op_2=('=' 
    {
        createLeafNode(grammarAccess.getAssignmentExpressionAccess().getOpEqualsSignKeyword_1_1_0_0(), "op"); 
    }


    |'+=' 
    {
        createLeafNode(grammarAccess.getAssignmentExpressionAccess().getOpPlusSignEqualsSignKeyword_1_1_0_1(), "op"); 
    }


    |'-=' 
    {
        createLeafNode(grammarAccess.getAssignmentExpressionAccess().getOpHyphenMinusEqualsSignKeyword_1_1_0_2(), "op"); 
    }


    |'*=' 
    {
        createLeafNode(grammarAccess.getAssignmentExpressionAccess().getOpAsteriskEqualsSignKeyword_1_1_0_3(), "op"); 
    }


    |'/=' 
    {
        createLeafNode(grammarAccess.getAssignmentExpressionAccess().getOpSolidusEqualsSignKeyword_1_1_0_4(), "op"); 
    }


    |'%=' 
    {
        createLeafNode(grammarAccess.getAssignmentExpressionAccess().getOpPercentSignEqualsSignKeyword_1_1_0_5(), "op"); 
    }

)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", /* lv_op_2 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAssignmentExpressionAccess().getRightAssignmentExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_right_3=ruleAssignmentExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "right", lv_right_3, "AssignmentExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?);





// Entry rule entryRuleChainExpression
entryRuleChainExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getChainExpressionRule(), currentNode); }
	 iv_ruleChainExpression=ruleChainExpression 
	 { $current=$iv_ruleChainExpression.current; } 
	 EOF 
;

// Rule ChainExpression
ruleChainExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getChainExpressionAccess().getChainedExpressionParserRuleCall(), currentNode); 
    }
    this_ChainedExpression_0=ruleChainedExpression
    { 
        $current = $this_ChainedExpression_0.current; 
        currentNode = currentNode.getParent();
    }
;





// Entry rule entryRuleChainedExpression
entryRuleChainedExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getChainedExpressionRule(), currentNode); }
	 iv_ruleChainedExpression=ruleChainedExpression 
	 { $current=$iv_ruleChainedExpression.current; } 
	 EOF 
;

// Rule ChainedExpression
ruleChainedExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getChainedExpressionAccess().getIfExpressionParserRuleCall(), currentNode); 
    }
    this_IfExpression_0=ruleIfExpression
    { 
        $current = $this_IfExpression_0.current; 
        currentNode = currentNode.getParent();
    }
;





// Entry rule entryRuleIfExpression
entryRuleIfExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getIfExpressionRule(), currentNode); }
	 iv_ruleIfExpression=ruleIfExpression 
	 { $current=$iv_ruleIfExpression.current; } 
	 EOF 
;

// Rule IfExpression
ruleIfExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getIfExpressionAccess().getOrExpressionParserRuleCall_0(), currentNode); 
    }
    this_OrExpression_0=ruleOrExpression
    { 
        $current = $this_OrExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getIfExpressionAccess().getIfExpressionConditionAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "condition", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getIfExpressionAccess().getIfExpressionConditionAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'?' 
    {
        createLeafNode(grammarAccess.getIfExpressionAccess().getQuestionMarkKeyword_1_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getIfExpressionAccess().getThenPartChainedExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_thenPart_3=ruleChainedExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "thenPart", lv_thenPart_3, "ChainedExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)':' 
    {
        createLeafNode(grammarAccess.getIfExpressionAccess().getColonKeyword_1_3(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getIfExpressionAccess().getElsePartChainedExpressionParserRuleCall_1_4_0(), currentNode); 
	    }
	    lv_elsePart_5=ruleChainedExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "elsePart", lv_elsePart_5, "ChainedExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?);





// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getOrExpressionRule(), currentNode); }
	 iv_ruleOrExpression=ruleOrExpression 
	 { $current=$iv_ruleOrExpression.current; } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0(), currentNode); 
    }
    this_AndExpression_0=ruleAndExpression
    { 
        $current = $this_AndExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getOrExpressionAccess().getBooleanOperationLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getOrExpressionAccess().getBooleanOperationLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_operator_2='||' 
    {
        createLeafNode(grammarAccess.getOrExpressionAccess().getOperatorVerticalLineVerticalLineKeyword_1_1_0(), "operator"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "operator", /* lv_operator_2 */ input.LT(-1), "||", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_right_3=ruleAndExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "right", lv_right_3, "AndExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAndExpressionRule(), currentNode); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAndExpressionAccess().getRelationalExpressionParserRuleCall_0(), currentNode); 
    }
    this_RelationalExpression_0=ruleRelationalExpression
    { 
        $current = $this_RelationalExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getAndExpressionAccess().getBooleanOperationLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAndExpressionAccess().getBooleanOperationLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_operator_2='&&' 
    {
        createLeafNode(grammarAccess.getAndExpressionAccess().getOperatorAmpersandAmpersandKeyword_1_1_0(), "operator"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "operator", /* lv_operator_2 */ input.LT(-1), "&&", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAndExpressionAccess().getRightRelationalExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_right_3=ruleRelationalExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "right", lv_right_3, "RelationalExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRelationalExpressionRule(), currentNode); }
	 iv_ruleRelationalExpression=ruleRelationalExpression 
	 { $current=$iv_ruleRelationalExpression.current; } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getAdditiveExpressionParserRuleCall_0(), currentNode); 
    }
    this_AdditiveExpression_0=ruleAdditiveExpression
    { 
        $current = $this_AdditiveExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getRelationalExpressionAccess().getBooleanOperationLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getRelationalExpressionAccess().getBooleanOperationLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_operator_2=('~=' 
    {
        createLeafNode(grammarAccess.getRelationalExpressionAccess().getOperatorTildeEqualsSignKeyword_1_1_0_0(), "operator"); 
    }


    |'==' 
    {
        createLeafNode(grammarAccess.getRelationalExpressionAccess().getOperatorEqualsSignEqualsSignKeyword_1_1_0_1(), "operator"); 
    }


    |'!=' 
    {
        createLeafNode(grammarAccess.getRelationalExpressionAccess().getOperatorExclamationMarkEqualsSignKeyword_1_1_0_2(), "operator"); 
    }


    |'>=' 
    {
        createLeafNode(grammarAccess.getRelationalExpressionAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3(), "operator"); 
    }


    |'<=' 
    {
        createLeafNode(grammarAccess.getRelationalExpressionAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_4(), "operator"); 
    }


    |'>' 
    {
        createLeafNode(grammarAccess.getRelationalExpressionAccess().getOperatorGreaterThanSignKeyword_1_1_0_5(), "operator"); 
    }


    |'<' 
    {
        createLeafNode(grammarAccess.getRelationalExpressionAccess().getOperatorLessThanSignKeyword_1_1_0_6(), "operator"); 
    }

)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "operator", /* lv_operator_2 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getRightAdditiveExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_right_3=ruleAdditiveExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "right", lv_right_3, "AdditiveExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAdditiveExpressionRule(), currentNode); }
	 iv_ruleAdditiveExpression=ruleAdditiveExpression 
	 { $current=$iv_ruleAdditiveExpression.current; } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0(), currentNode); 
    }
    this_MultiplicativeExpression_0=ruleMultiplicativeExpression
    { 
        $current = $this_MultiplicativeExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getAdditiveExpressionAccess().getOperationCallParamsAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "params", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOperationCallParamsAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_name_2=('+' 
    {
        createLeafNode(grammarAccess.getAdditiveExpressionAccess().getNamePlusSignKeyword_1_1_0_0(), "name"); 
    }


    |'-' 
    {
        createLeafNode(grammarAccess.getAdditiveExpressionAccess().getNameHyphenMinusKeyword_1_1_0_1(), "name"); 
    }

)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", /* lv_name_2 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getParamsMultiplicativeExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_params_3=ruleMultiplicativeExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_3, "MultiplicativeExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getMultiplicativeExpressionRule(), currentNode); }
	 iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression 
	 { $current=$iv_ruleMultiplicativeExpression.current; } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getUnaryOrInfixExpressionParserRuleCall_0(), currentNode); 
    }
    this_UnaryOrInfixExpression_0=ruleUnaryOrInfixExpression
    { 
        $current = $this_UnaryOrInfixExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getMultiplicativeExpressionAccess().getOperationCallParamsAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "params", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOperationCallParamsAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_name_2=('*' 
    {
        createLeafNode(grammarAccess.getMultiplicativeExpressionAccess().getNameAsteriskKeyword_1_1_0_0(), "name"); 
    }


    |'/' 
    {
        createLeafNode(grammarAccess.getMultiplicativeExpressionAccess().getNameSolidusKeyword_1_1_0_1(), "name"); 
    }


    |'%' 
    {
        createLeafNode(grammarAccess.getMultiplicativeExpressionAccess().getNamePercentSignKeyword_1_1_0_2(), "name"); 
    }

)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", /* lv_name_2 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getParamsUnaryOrInfixExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_params_3=ruleUnaryOrInfixExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_3, "UnaryOrInfixExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleUnaryOrInfixExpression
entryRuleUnaryOrInfixExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getUnaryOrInfixExpressionRule(), currentNode); }
	 iv_ruleUnaryOrInfixExpression=ruleUnaryOrInfixExpression 
	 { $current=$iv_ruleUnaryOrInfixExpression.current; } 
	 EOF 
;

// Rule UnaryOrInfixExpression
ruleUnaryOrInfixExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getUnaryOrInfixExpressionAccess().getUnaryExpressionParserRuleCall_0(), currentNode); 
    }
    this_UnaryExpression_0=ruleUnaryExpression
    { 
        $current = $this_UnaryExpression_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getUnaryOrInfixExpressionAccess().getPostopExpressionParserRuleCall_1(), currentNode); 
    }
    this_PostopExpression_1=rulePostopExpression
    { 
        $current = $this_PostopExpression_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getUnaryExpressionRule(), currentNode); }
	 iv_ruleUnaryExpression=ruleUnaryExpression 
	 { $current=$iv_ruleUnaryExpression.current; } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_name_0=('!' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getNameExclamationMarkKeyword_0_0_0(), "name"); 
    }


    |'-' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getNameHyphenMinusKeyword_0_0_1(), "name"); 
    }


    |'++' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getNamePlusSignPlusSignKeyword_0_0_2(), "name"); 
    }


    |'--' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getNameHyphenMinusHyphenMinusKeyword_0_0_3(), "name"); 
    }

)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", /* lv_name_0 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getParamsPostopExpressionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_params_1=rulePostopExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_1, "PostopExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRulePostopExpression
entryRulePostopExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPostopExpressionRule(), currentNode); }
	 iv_rulePostopExpression=rulePostopExpression 
	 { $current=$iv_rulePostopExpression.current; } 
	 EOF 
;

// Rule PostopExpression
rulePostopExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getPostopExpressionAccess().getInfixExpressionParserRuleCall_0(), currentNode); 
    }
    this_InfixExpression_0=ruleInfixExpression
    { 
        $current = $this_InfixExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getPostopExpressionAccess().getPostOpCallTargetAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "target", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPostopExpressionAccess().getPostOpCallTargetAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_name_2=('--' 
    {
        createLeafNode(grammarAccess.getPostopExpressionAccess().getNameHyphenMinusHyphenMinusKeyword_1_1_0_0(), "name"); 
    }


    |'++' 
    {
        createLeafNode(grammarAccess.getPostopExpressionAccess().getNamePlusSignPlusSignKeyword_1_1_0_1(), "name"); 
    }

)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPostopExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", /* lv_name_2 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?);





// Entry rule entryRuleInfixExpression
entryRuleInfixExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getInfixExpressionRule(), currentNode); }
	 iv_ruleInfixExpression=ruleInfixExpression 
	 { $current=$iv_ruleInfixExpression.current; } 
	 EOF 
;

// Rule InfixExpression
ruleInfixExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getInfixExpressionAccess().getPrimaryExpressionParserRuleCall_0(), currentNode); 
    }
    this_PrimaryExpression_0=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_0.current; 
        currentNode = currentNode.getParent();
    }
(((
    { 
        temp=factory.create(grammarAccess.getInfixExpressionAccess().getOperationCallTargetAction_1_0_0().getType().getClassifier());
        try {
        	factory.set(temp, "target", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getInfixExpressionAccess().getOperationCallTargetAction_1_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'.' 
    {
        createLeafNode(grammarAccess.getInfixExpressionAccess().getFullStopKeyword_1_0_1(), null); 
    }
(	
	
	    lv_name_3=	RULE_ID
	{
		createLeafNode(grammarAccess.getInfixExpressionAccess().getNameIDTerminalRuleCall_1_0_2_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInfixExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_3, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)'(' 
    {
        createLeafNode(grammarAccess.getInfixExpressionAccess().getLeftParenthesisKeyword_1_0_3(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getInfixExpressionAccess().getParamsParameterParserRuleCall_1_0_4_0_0(), currentNode); 
	    }
	    lv_params_5=ruleParameter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInfixExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_5, "Parameter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getInfixExpressionAccess().getCommaKeyword_1_0_4_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getInfixExpressionAccess().getParamsParameterParserRuleCall_1_0_4_1_1_0(), currentNode); 
	    }
	    lv_params_7=ruleParameter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInfixExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_7, "Parameter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)?')' 
    {
        createLeafNode(grammarAccess.getInfixExpressionAccess().getRightParenthesisKeyword_1_0_5(), null); 
    }
)
    |((
    { 
        temp=factory.create(grammarAccess.getInfixExpressionAccess().getAtCallTargetAction_1_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "target", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getInfixExpressionAccess().getAtCallTargetAction_1_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'[' 
    {
        createLeafNode(grammarAccess.getInfixExpressionAccess().getLeftSquareBracketKeyword_1_1_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getInfixExpressionAccess().getIndexExpressionParserRuleCall_1_1_2_0(), currentNode); 
	    }
	    lv_index_11=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInfixExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "index", lv_index_11, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)']' 
    {
        createLeafNode(grammarAccess.getInfixExpressionAccess().getRightSquareBracketKeyword_1_1_3(), null); 
    }
('(' 
    {
        createLeafNode(grammarAccess.getInfixExpressionAccess().getLeftParenthesisKeyword_1_1_4_0(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getInfixExpressionAccess().getParamsParameterParserRuleCall_1_1_4_1_0_0(), currentNode); 
	    }
	    lv_params_14=ruleParameter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInfixExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_14, "Parameter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getInfixExpressionAccess().getCommaKeyword_1_1_4_1_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getInfixExpressionAccess().getParamsParameterParserRuleCall_1_1_4_1_1_1_0(), currentNode); 
	    }
	    lv_params_16=ruleParameter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInfixExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_16, "Parameter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)?')' 
    {
        createLeafNode(grammarAccess.getInfixExpressionAccess().getRightParenthesisKeyword_1_1_4_2(), null); 
    }
)?)
    |((
    { 
        temp=factory.create(grammarAccess.getInfixExpressionAccess().getFeatureCallTargetAction_1_2_0().getType().getClassifier());
        try {
        	factory.set(temp, "target", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getInfixExpressionAccess().getFeatureCallTargetAction_1_2_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'.' 
    {
        createLeafNode(grammarAccess.getInfixExpressionAccess().getFullStopKeyword_1_2_1(), null); 
    }
(	
	
	    lv_type_20=	RULE_ID
	{
		createLeafNode(grammarAccess.getInfixExpressionAccess().getTypeIDTerminalRuleCall_1_2_2_0(), "type"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInfixExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_20, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)))*);





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPrimaryExpressionRule(), currentNode); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_0(), currentNode); 
    }
    this_Literal_0=ruleLiteral
    { 
        $current = $this_Literal_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFeatureCallParserRuleCall_1(), currentNode); 
    }
    this_FeatureCall_1=ruleFeatureCall
    { 
        $current = $this_FeatureCall_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getVariableValueParserRuleCall_2(), currentNode); 
    }
    this_VariableValue_2=ruleVariableValue
    { 
        $current = $this_VariableValue_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getPropertyValueParserRuleCall_3(), currentNode); 
    }
    this_PropertyValue_3=rulePropertyValue
    { 
        $current = $this_PropertyValue_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParanthesizedExpressionParserRuleCall_4(), currentNode); 
    }
    this_ParanthesizedExpression_4=ruleParanthesizedExpression
    { 
        $current = $this_ParanthesizedExpression_4.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRulePropertyValue
entryRulePropertyValue returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPropertyValueRule(), currentNode); }
	 iv_rulePropertyValue=rulePropertyValue 
	 { $current=$iv_rulePropertyValue.current; } 
	 EOF 
;

// Rule PropertyValue
rulePropertyValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    lv_name_0=	RULE_PID
	{
		createLeafNode(grammarAccess.getPropertyValueAccess().getNamePIDTerminalRuleCall_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, "PID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
);





// Entry rule entryRuleVariableValue
entryRuleVariableValue returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getVariableValueRule(), currentNode); }
	 iv_ruleVariableValue=ruleVariableValue 
	 { $current=$iv_ruleVariableValue.current; } 
	 EOF 
;

// Rule VariableValue
ruleVariableValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    lv_name_0=	RULE_ID
	{
		createLeafNode(grammarAccess.getVariableValueAccess().getNameIDTerminalRuleCall_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
);





// Entry rule entryRuleFeatureCall
entryRuleFeatureCall returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFeatureCallRule(), currentNode); }
	 iv_ruleFeatureCall=ruleFeatureCall 
	 { $current=$iv_ruleFeatureCall.current; } 
	 EOF 
;

// Rule FeatureCall
ruleFeatureCall returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getFeatureCallAccess().getOperationCallParserRuleCall(), currentNode); 
    }
    this_OperationCall_0=ruleOperationCall
    { 
        $current = $this_OperationCall_0.current; 
        currentNode = currentNode.getParent();
    }
;





// Entry rule entryRuleOperationCall
entryRuleOperationCall returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getOperationCallRule(), currentNode); }
	 iv_ruleOperationCall=ruleOperationCall 
	 { $current=$iv_ruleOperationCall.current; } 
	 EOF 
;

// Rule OperationCall
ruleOperationCall returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_name_0=(	RULE_ID
	{
		createLeafNode(grammarAccess.getOperationCallAccess().getNameIDTerminalRuleCall_0_0_0(), "name"); 
	}

    |	RULE_PID
	{
		createLeafNode(grammarAccess.getOperationCallAccess().getNamePIDTerminalRuleCall_0_0_1(), "name"); 
	}
)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)'(' 
    {
        createLeafNode(grammarAccess.getOperationCallAccess().getLeftParenthesisKeyword_1(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getOperationCallAccess().getParamsParameterParserRuleCall_2_0_0(), currentNode); 
	    }
	    lv_params_2=ruleParameter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_2, "Parameter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getOperationCallAccess().getCommaKeyword_2_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getOperationCallAccess().getParamsParameterParserRuleCall_2_1_1_0(), currentNode); 
	    }
	    lv_params_4=ruleParameter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_4, "Parameter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)?')' 
    {
        createLeafNode(grammarAccess.getOperationCallAccess().getRightParenthesisKeyword_3(), null); 
    }
);





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLiteralRule(), currentNode); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getValueLiteralParserRuleCall_0(), currentNode); 
    }
    this_ValueLiteral_0=ruleValueLiteral
    { 
        $current = $this_ValueLiteral_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getRegexpLiteralParserRuleCall_1(), currentNode); 
    }
    this_RegexpLiteral_1=ruleRegexpLiteral
    { 
        $current = $this_RegexpLiteral_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleValueLiteral
entryRuleValueLiteral returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getValueLiteralRule(), currentNode); }
	 iv_ruleValueLiteral=ruleValueLiteral 
	 { $current=$iv_ruleValueLiteral.current; } 
	 EOF 
;

// Rule ValueLiteral
ruleValueLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getValueLiteralAccess().getBooleanLiteralParserRuleCall_0(), currentNode); 
    }
    this_BooleanLiteral_0=ruleBooleanLiteral
    { 
        $current = $this_BooleanLiteral_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueLiteralAccess().getIntegerLiteralParserRuleCall_1(), currentNode); 
    }
    this_IntegerLiteral_1=ruleIntegerLiteral
    { 
        $current = $this_IntegerLiteral_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueLiteralAccess().getNullLiteralParserRuleCall_2(), currentNode); 
    }
    this_NullLiteral_2=ruleNullLiteral
    { 
        $current = $this_NullLiteral_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueLiteralAccess().getStringLiteralParserRuleCall_3(), currentNode); 
    }
    this_StringLiteral_3=ruleStringLiteral
    { 
        $current = $this_StringLiteral_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueLiteralAccess().getRealLiteralParserRuleCall_4(), currentNode); 
    }
    this_RealLiteral_4=ruleRealLiteral
    { 
        $current = $this_RealLiteral_4.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBooleanLiteralRule(), currentNode); }
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current; } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    lv_val_0=('true' 
    {
        createLeafNode(grammarAccess.getBooleanLiteralAccess().getValTrueKeyword_0_0(), "val"); 
    }


    |'false' 
    {
        createLeafNode(grammarAccess.getBooleanLiteralAccess().getValFalseKeyword_0_1(), "val"); 
    }

)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "val", /* lv_val_0 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
);





// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getIntegerLiteralRule(), currentNode); }
	 iv_ruleIntegerLiteral=ruleIntegerLiteral 
	 { $current=$iv_ruleIntegerLiteral.current; } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_val_0=	RULE_INT
	{
		createLeafNode(grammarAccess.getIntegerLiteralAccess().getValINTTerminalRuleCall_0_0(), "val"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "val", lv_val_0, "INT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)
    |RULE_HEX
    { 
    createLeafNode(grammarAccess.getIntegerLiteralAccess().getHEXTerminalRuleCall_1(), null); 
    }
);





// Entry rule entryRuleNullLiteral
entryRuleNullLiteral returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getNullLiteralRule(), currentNode); }
	 iv_ruleNullLiteral=ruleNullLiteral 
	 { $current=$iv_ruleNullLiteral.current; } 
	 EOF 
;

// Rule NullLiteral
ruleNullLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    lv_val_0='null' 
    {
        createLeafNode(grammarAccess.getNullLiteralAccess().getValNullKeyword_0(), "val"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNullLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "val", /* lv_val_0 */ input.LT(-1), "null", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
);





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getStringLiteralRule(), currentNode); }
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current; } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    lv_val_0=	RULE_STRING
	{
		createLeafNode(grammarAccess.getStringLiteralAccess().getValSTRINGTerminalRuleCall_0(), "val"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "val", lv_val_0, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
);





// Entry rule entryRuleRealLiteral
entryRuleRealLiteral returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRealLiteralRule(), currentNode); }
	 iv_ruleRealLiteral=ruleRealLiteral 
	 { $current=$iv_ruleRealLiteral.current; } 
	 EOF 
;

// Rule RealLiteral
ruleRealLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    lv_val_0=	RULE_REAL
	{
		createLeafNode(grammarAccess.getRealLiteralAccess().getValREALTerminalRuleCall_0(), "val"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRealLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "val", lv_val_0, "REAL", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
);





// Entry rule entryRuleRegexpLiteral
entryRuleRegexpLiteral returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRegexpLiteralRule(), currentNode); }
	 iv_ruleRegexpLiteral=ruleRegexpLiteral 
	 { $current=$iv_ruleRegexpLiteral.current; } 
	 EOF 
;

// Rule RegexpLiteral
ruleRegexpLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    lv_val_0=	RULE_REGEX
	{
		createLeafNode(grammarAccess.getRegexpLiteralAccess().getValREGEXTerminalRuleCall_0(), "val"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRegexpLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "val", lv_val_0, "REGEX", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
);





// Entry rule entryRuleParanthesizedExpression
entryRuleParanthesizedExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getParanthesizedExpressionRule(), currentNode); }
	 iv_ruleParanthesizedExpression=ruleParanthesizedExpression 
	 { $current=$iv_ruleParanthesizedExpression.current; } 
	 EOF 
;

// Rule ParanthesizedExpression
ruleParanthesizedExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('(' 
    {
        createLeafNode(grammarAccess.getParanthesizedExpressionAccess().getLeftParenthesisKeyword_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getParanthesizedExpressionAccess().getExpressionParserRuleCall_1(), currentNode); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        currentNode = currentNode.getParent();
    }
')' 
    {
        createLeafNode(grammarAccess.getParanthesizedExpressionAccess().getRightParenthesisKeyword_2(), null); 
    }
);





// Rule Visibility
ruleVisibility returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'public' 
	{
        $current = grammarAccess.getVisibilityAccess().getPublicEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getVisibilityAccess().getPublicEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'private' 
	{
        $current = grammarAccess.getVisibilityAccess().getPrivateEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getVisibilityAccess().getPrivateEnumLiteralDeclaration_1(), null); 
    }
));





// Rule ExecutionMode
ruleExecutionMode returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'parallel' 
	{
        $current = grammarAccess.getExecutionModeAccess().getParallelEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getExecutionModeAccess().getParallelEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'sequential' 
	{
        $current = grammarAccess.getExecutionModeAccess().getSequentialEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getExecutionModeAccess().getSequentialEnumLiteralDeclaration_1(), null); 
    }
));



RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*;

RULE_PID : '$' RULE_ID ('.' RULE_ID)*;

RULE_REGEX : '~/' ('\\' ('/'|'f'|'n'|'r'|'t'|'v'|'\\'|'.'|'*'|'+'|'?'|'w'|'W'|'s'|'S'|'d'|'D'|'b'|'|'|'{'|'}'|'['|']'|'('|')'|'0'..'7' '0'..'7' '0'..'7'|'x' ('0'..'9'|'a'..'f'|'A'..'F') ('0'..'9'|'a'..'f'|'A'..'F')|'c' 'A'..'Z')|~(('\\'|'/'|' '|'\t'|'\r'|'\n')))* '/' ('g'|'m'|'i')?;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'x'|'0'|'"'|'\''|'\\')|~(('\\'|'"'|'\r'|'\n')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'x'|'0'|'"'|'\''|'\\')|~(('\\'|'\''|'\r'|'\n')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_HEX : '0' ('x'|'X') ('0'..'9'|'a'..'f'|'A'..'F')+;

RULE_INT : ('0'..'9')+;

RULE_REAL : (RULE_INT '.' RULE_INT|RULE_INT '.'|'.' RULE_INT|RULE_INT) (('e'|'E') ('-'|'+') RULE_INT)?;

RULE_ANY_OTHER : .;


