/*
* generated by Xtext
*/
grammar InternalBeeLang;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.eclipse.b3.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.b3.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.b3.services.BeeLangGrammarAccess;

}

@parser::members {
 
 	private BeeLangGrammarAccess grammarAccess;
 	
    public InternalBeeLangParser(TokenStream input, IAstFactory factory, BeeLangGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/b3/parser/antlr/internal/InternalBeeLang.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "BeeModel";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleBeeModel
entryRuleBeeModel returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBeeModelRule(), currentNode); }
	 iv_ruleBeeModel=ruleBeeModel 
	 { $current=$iv_ruleBeeModel.current; } 
	 EOF 
;

// Rule BeeModel
ruleBeeModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBeeModelAccess().getImportsImportParserRuleCall_0_0(), currentNode); 
	    }
	    lv_imports_0=ruleImport 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBeeModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "imports", lv_imports_0, "Import", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBeeModelAccess().getBodyUnitParserRuleCall_1_0(), currentNode); 
	    }
	    lv_body_1=ruleUnit 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBeeModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "body", lv_body_1, "Unit", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getImportRule(), currentNode); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_reexport_0='reexport' 
    {
        createLeafNode(grammarAccess.getImportAccess().getReexportReexportKeyword_0_0(), "reexport"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImportRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "reexport", true, "reexport", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?'import' 
    {
        createLeafNode(grammarAccess.getImportAccess().getImportKeyword_1(), null); 
    }
(	
	
	    lv_importer_2=(	{ 
        currentNode=createCompositeNode(grammarAccess.getImportAccess().getImporterJavaImporterParserRuleCall_2_0_0(), currentNode); 
    }
	ruleJavaImporter	{ 
        currentNode = currentNode.getParent();
    }

    |	{ 
        currentNode=createCompositeNode(grammarAccess.getImportAccess().getImporterNativeImporterParserRuleCall_2_0_1(), currentNode); 
    }
	ruleNativeImporter	{ 
        currentNode = currentNode.getParent();
    }
)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImportRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "importer", lv_importer_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)('as' 
    {
        createLeafNode(grammarAccess.getImportAccess().getAsKeyword_3_0(), null); 
    }
(	
	
	    lv_nameSpace_4=	RULE_ID
	{
		createLeafNode(grammarAccess.getImportAccess().getNameSpaceIDTerminalRuleCall_3_1_0(), "nameSpace"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImportRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "nameSpace", lv_nameSpace_4, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?';' 
    {
        createLeafNode(grammarAccess.getImportAccess().getSemicolonKeyword_4(), null); 
    }
);





// Entry rule entryRuleJavaImporter
entryRuleJavaImporter returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getJavaImporterRule(), currentNode); }
	 iv_ruleJavaImporter=ruleJavaImporter 
	 { $current=$iv_ruleJavaImporter.current; } 
	 EOF 
;

// Rule JavaImporter
ruleJavaImporter returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getJavaImporterAccess().getNameQualifiedNameParserRuleCall_0_0(), currentNode); 
	    }
	    lv_name_0=ruleQualifiedName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJavaImporterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, "QualifiedName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    lv_package_1='.*' 
    {
        createLeafNode(grammarAccess.getJavaImporterAccess().getPackageFullStopAsteriskKeyword_1_0(), "package"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJavaImporterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "package", true, ".*", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?);





// Entry rule entryRuleNativeImporter
entryRuleNativeImporter returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getNativeImporterRule(), currentNode); }
	 iv_ruleNativeImporter=ruleNativeImporter 
	 { $current=$iv_ruleNativeImporter.current; } 
	 EOF 
;

// Rule NativeImporter
ruleNativeImporter returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    lv_uriString_0=	RULE_STRING
	{
		createLeafNode(grammarAccess.getNativeImporterAccess().getUriStringSTRINGTerminalRuleCall_0(), "uriString"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNativeImporterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "uriString", lv_uriString_0, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
);





// Entry rule entryRuleUnit
entryRuleUnit returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getUnitRule(), currentNode); }
	 iv_ruleUnit=ruleUnit 
	 { $current=$iv_ruleUnit.current; } 
	 EOF 
;

// Rule Unit
ruleUnit returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
		myHiddenTokenState.restore();
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getExecutionModeExecutionModeEnumRuleCall_0_0(), currentNode); 
	    }
	    lv_executionMode_0=ruleExecutionMode 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "executionMode", lv_executionMode_0, "ExecutionMode", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?'unit' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getUnitKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getNameUnitNameParserRuleCall_2_0(), currentNode); 
	    }
	    lv_name_2=ruleUnitName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_2, "UnitName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?('version' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getVersionKeyword_3_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getVersionVersionParserRuleCall_3_1_0(), currentNode); 
	    }
	    lv_version_4=ruleVersion 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "version", lv_version_4, "Version", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?('implements' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getImplementsKeyword_4_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getImplementsInterfaceNameParserRuleCall_4_1_0(), currentNode); 
	    }
	    lv_implements_6=ruleInterfaceName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "implements", lv_implements_6, "InterfaceName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getCommaKeyword_4_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getImplementsInterfaceNameParserRuleCall_4_2_1_0(), currentNode); 
	    }
	    lv_implements_8=ruleInterfaceName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "implements", lv_implements_8, "InterfaceName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)?'{' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_5(), null); 
    }
('properties' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getPropertiesKeyword_6_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getCompoundPropertyOperationNamedPropertyStatementsParserRuleCall_6_1_0(), currentNode); 
	    }
	    lv_CompoundPropertyOperation_11=ruleNamedPropertyStatements 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "CompoundPropertyOperation", lv_CompoundPropertyOperation_11, "NamedPropertyStatements", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*(('provides' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getProvidesKeyword_7_0_0(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_7_0_1(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_7_0_2_0_0(), currentNode); 
	    }
	    lv_providedCapabilities_14=ruleProvidedCapability 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "providedCapabilities", lv_providedCapabilities_14, "ProvidedCapability", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getSemicolonKeyword_7_0_2_1(), null); 
    }
)+'}' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_7_0_3(), null); 
    }
)
    |('provides' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getProvidesKeyword_7_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_7_1_1_0(), currentNode); 
	    }
	    lv_providedCapabilities_18=ruleProvidedCapability 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "providedCapabilities", lv_providedCapabilities_18, "ProvidedCapability", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getSemicolonKeyword_7_1_2(), null); 
    }
)
    |('requires' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRequiresKeyword_7_2_0(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_7_2_1(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_2_2_0_0(), currentNode); 
	    }
	    lv_requiredCapabilities_22=ruleRequiredCapability 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "requiredCapabilities", lv_requiredCapabilities_22, "RequiredCapability", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getSemicolonKeyword_7_2_2_1(), null); 
    }
)+'}' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_7_2_3(), null); 
    }
)
    |('requires' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRequiresKeyword_7_3_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_3_1_0(), currentNode); 
	    }
	    lv_requiredCapabilities_26=ruleRequiredCapability 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "requiredCapabilities", lv_requiredCapabilities_26, "RequiredCapability", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getSemicolonKeyword_7_3_2(), null); 
    }
)
    |('meta' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getMetaKeyword_7_4_0(), null); 
    }
'requires' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRequiresKeyword_7_4_1(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_7_4_2(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getMetaRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_4_3_0_0(), currentNode); 
	    }
	    lv_metaRequiredCapabilities_31=ruleRequiredCapability 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "metaRequiredCapabilities", lv_metaRequiredCapabilities_31, "RequiredCapability", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getSemicolonKeyword_7_4_3_1(), null); 
    }
)+'}' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_7_4_4(), null); 
    }
)
    |('meta' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getMetaKeyword_7_5_0(), null); 
    }
'requires' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRequiresKeyword_7_5_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getMetaRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_5_2_0(), currentNode); 
	    }
	    lv_metaRequiredCapabilities_36=ruleRequiredCapability 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "metaRequiredCapabilities", lv_metaRequiredCapabilities_36, "RequiredCapability", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getSemicolonKeyword_7_5_3(), null); 
    }
)
    |('advice' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getAdviceKeyword_7_6_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getAdviceNamedAdviceParserRuleCall_7_6_1_0(), currentNode); 
	    }
	    lv_advice_39=ruleNamedAdvice 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "advice", lv_advice_39, "NamedAdvice", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))
    |('sequential' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getSequentialKeyword_7_7_0(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_7_7_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getSynchronizationsSynchronizationParserRuleCall_7_7_2_0(), currentNode); 
	    }
	    lv_synchronizations_42=ruleSynchronization 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "synchronizations", lv_synchronizations_42, "Synchronization", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)+'}' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_7_7_3(), null); 
    }
)
    |('sequential' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getSequentialKeyword_7_8_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getSynchronizationsSynchronizationParserRuleCall_7_8_1_0(), currentNode); 
	    }
	    lv_synchronizations_45=ruleSynchronization 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "synchronizations", lv_synchronizations_45, "Synchronization", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getBuildMethodsBuildMethodParserRuleCall_7_9_0(), currentNode); 
	    }
	    lv_buildMethods_46=ruleBuildMethod 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "buildMethods", lv_buildMethods_46, "BuildMethod", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |('repositories' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRepositoriesKeyword_7_10_0(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_7_10_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getRepositoryConfigurationsRepositoryConfigurationParserRuleCall_7_10_2_0(), currentNode); 
	    }
	    lv_repositoryConfigurations_49=ruleRepositoryConfiguration 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "repositoryConfigurations", lv_repositoryConfigurations_49, "RepositoryConfiguration", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_7_10_3(), null); 
    }
))*'}' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_8(), null); 
    }
);





// Entry rule entryRuleProvidedCapability
entryRuleProvidedCapability returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getProvidedCapabilityRule(), currentNode); }
	 iv_ruleProvidedCapability=ruleProvidedCapability 
	 { $current=$iv_ruleProvidedCapability.current; } 
	 EOF 
;

// Rule ProvidedCapability
ruleProvidedCapability returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('when' 
    {
        createLeafNode(grammarAccess.getProvidedCapabilityAccess().getWhenKeyword_0_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getProvidedCapabilityAccess().getFilterFilterParserRuleCall_0_1_0(), currentNode); 
	    }
	    lv_filter_1=ruleFilter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProvidedCapabilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "filter", lv_filter_1, "Filter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getProvidedCapabilityAccess().getInterfaceQualifiedNameParserRuleCall_1_0(), currentNode); 
	    }
	    lv_interface_2=ruleQualifiedName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProvidedCapabilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "interface", lv_interface_2, "QualifiedName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'/' 
    {
        createLeafNode(grammarAccess.getProvidedCapabilityAccess().getSolidusKeyword_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getProvidedCapabilityAccess().getNameQualifiedNameParserRuleCall_3_0(), currentNode); 
	    }
	    lv_name_4=ruleQualifiedName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProvidedCapabilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_4, "QualifiedName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('/' 
    {
        createLeafNode(grammarAccess.getProvidedCapabilityAccess().getSolidusKeyword_4_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getProvidedCapabilityAccess().getVersionVersionParserRuleCall_4_1_0(), currentNode); 
	    }
	    lv_version_6=ruleVersion 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProvidedCapabilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "version", lv_version_6, "Version", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?);





// Entry rule entryRuleRequiredCapability
entryRuleRequiredCapability returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRequiredCapabilityRule(), currentNode); }
	 iv_ruleRequiredCapability=ruleRequiredCapability 
	 { $current=$iv_ruleRequiredCapability.current; } 
	 EOF 
;

// Rule RequiredCapability
ruleRequiredCapability returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('when' 
    {
        createLeafNode(grammarAccess.getRequiredCapabilityAccess().getWhenKeyword_0_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRequiredCapabilityAccess().getFilterFilterParserRuleCall_0_1_0(), currentNode); 
	    }
	    lv_filter_1=ruleFilter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRequiredCapabilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "filter", lv_filter_1, "Filter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRequiredCapabilityAccess().getInterfaceQualifiedNameParserRuleCall_1_0(), currentNode); 
	    }
	    lv_interface_2=ruleQualifiedName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRequiredCapabilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "interface", lv_interface_2, "QualifiedName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'/' 
    {
        createLeafNode(grammarAccess.getRequiredCapabilityAccess().getSolidusKeyword_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRequiredCapabilityAccess().getNameQualifiedNameParserRuleCall_3_0(), currentNode); 
	    }
	    lv_name_4=ruleQualifiedName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRequiredCapabilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_4, "QualifiedName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('/' 
    {
        createLeafNode(grammarAccess.getRequiredCapabilityAccess().getSolidusKeyword_4_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRequiredCapabilityAccess().getRangeVersionRangeParserRuleCall_4_1_0(), currentNode); 
	    }
	    lv_range_6=ruleVersionRange 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRequiredCapabilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "range", lv_range_6, "VersionRange", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?);





// Entry rule entryRuleNamedPropertyStatements
entryRuleNamedPropertyStatements returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getNamedPropertyStatementsRule(), currentNode); }
	 iv_ruleNamedPropertyStatements=ruleNamedPropertyStatements 
	 { $current=$iv_ruleNamedPropertyStatements.current; } 
	 EOF 
;

// Rule NamedPropertyStatements
ruleNamedPropertyStatements returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_name_0=	RULE_ID
	{
		createLeafNode(grammarAccess.getNamedPropertyStatementsAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNamedPropertyStatementsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getNamedPropertyStatementsAccess().getBodyCompoundPropertyOperationParserRuleCall_1_0(), currentNode); 
	    }
	    lv_body_1=ruleCompoundPropertyOperation 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNamedPropertyStatementsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "body", lv_body_1, "CompoundPropertyOperation", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleCompoundPropertyOperation
entryRuleCompoundPropertyOperation returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCompoundPropertyOperationRule(), currentNode); }
	 iv_ruleCompoundPropertyOperation=ruleCompoundPropertyOperation 
	 { $current=$iv_ruleCompoundPropertyOperation.current; } 
	 EOF 
;

// Rule CompoundPropertyOperation
ruleCompoundPropertyOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('{' 
    {
        createLeafNode(grammarAccess.getCompoundPropertyOperationAccess().getLeftCurlyBracketKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCompoundPropertyOperationAccess().getOperationsPropertyOperationParserRuleCall_1_0(), currentNode); 
	    }
	    lv_operations_1=rulePropertyOperation 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompoundPropertyOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "operations", lv_operations_1, "PropertyOperation", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getCompoundPropertyOperationAccess().getRightCurlyBracketKeyword_2(), null); 
    }
);





// Entry rule entryRulePropertyOperation
entryRulePropertyOperation returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPropertyOperationRule(), currentNode); }
	 iv_rulePropertyOperation=rulePropertyOperation 
	 { $current=$iv_rulePropertyOperation.current; } 
	 EOF 
;

// Rule PropertyOperation
rulePropertyOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getPropertyOperationAccess().getFilteredPropertyOperationParserRuleCall_0(), currentNode); 
    }
    this_FilteredPropertyOperation_0=ruleFilteredPropertyOperation
    { 
        $current = $this_FilteredPropertyOperation_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPropertyOperationAccess().getSetPropertyOperationParserRuleCall_1(), currentNode); 
    }
    this_SetPropertyOperation_1=ruleSetPropertyOperation
    { 
        $current = $this_SetPropertyOperation_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPropertyOperationAccess().getUnsetPropertyOperationParserRuleCall_2(), currentNode); 
    }
    this_UnsetPropertyOperation_2=ruleUnsetPropertyOperation
    { 
        $current = $this_UnsetPropertyOperation_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPropertyOperationAccess().getCompoundPropertyOperationParserRuleCall_3(), currentNode); 
    }
    this_CompoundPropertyOperation_3=ruleCompoundPropertyOperation
    { 
        $current = $this_CompoundPropertyOperation_3.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleFilteredPropertyOperation
entryRuleFilteredPropertyOperation returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFilteredPropertyOperationRule(), currentNode); }
	 iv_ruleFilteredPropertyOperation=ruleFilteredPropertyOperation 
	 { $current=$iv_ruleFilteredPropertyOperation.current; } 
	 EOF 
;

// Rule FilteredPropertyOperation
ruleFilteredPropertyOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('when' 
    {
        createLeafNode(grammarAccess.getFilteredPropertyOperationAccess().getWhenKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFilteredPropertyOperationAccess().getFilterFilterParserRuleCall_1_0(), currentNode); 
	    }
	    lv_filter_1=ruleFilter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFilteredPropertyOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "filter", lv_filter_1, "Filter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    lv_body_2=(	{ 
        currentNode=createCompositeNode(grammarAccess.getFilteredPropertyOperationAccess().getBodySetPropertyOperationParserRuleCall_2_0_0(), currentNode); 
    }
	ruleSetPropertyOperation	{ 
        currentNode = currentNode.getParent();
    }

    |	{ 
        currentNode=createCompositeNode(grammarAccess.getFilteredPropertyOperationAccess().getBodyUnsetPropertyOperationParserRuleCall_2_0_1(), currentNode); 
    }
	ruleUnsetPropertyOperation	{ 
        currentNode = currentNode.getParent();
    }

    |	{ 
        currentNode=createCompositeNode(grammarAccess.getFilteredPropertyOperationAccess().getBodyCompoundPropertyOperationParserRuleCall_2_0_2(), currentNode); 
    }
	ruleCompoundPropertyOperation	{ 
        currentNode = currentNode.getParent();
    }
)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFilteredPropertyOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "body", lv_body_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleSetPropertyOperation
entryRuleSetPropertyOperation returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSetPropertyOperationRule(), currentNode); }
	 iv_ruleSetPropertyOperation=ruleSetPropertyOperation 
	 { $current=$iv_ruleSetPropertyOperation.current; } 
	 EOF 
;

// Rule SetPropertyOperation
ruleSetPropertyOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_immutable_0='immutable' 
    {
        createLeafNode(grammarAccess.getSetPropertyOperationAccess().getImmutableImmutableKeyword_0_0(), "immutable"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSetPropertyOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "immutable", true, "immutable", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSetPropertyOperationAccess().getKeyPropertyNameParserRuleCall_1_0(), currentNode); 
	    }
	    lv_key_1=rulePropertyName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSetPropertyOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "key", lv_key_1, "PropertyName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSetPropertyOperationAccess().getOpAssignmentOperatorEnumRuleCall_2_0(), currentNode); 
	    }
	    lv_op_2=ruleAssignmentOperator 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSetPropertyOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2, "AssignmentOperator", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSetPropertyOperationAccess().getValueExpressionParserRuleCall_3_0(), currentNode); 
	    }
	    lv_value_3=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSetPropertyOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_3, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getSetPropertyOperationAccess().getSemicolonKeyword_4(), null); 
    }
);





// Entry rule entryRuleUnsetPropertyOperation
entryRuleUnsetPropertyOperation returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getUnsetPropertyOperationRule(), currentNode); }
	 iv_ruleUnsetPropertyOperation=ruleUnsetPropertyOperation 
	 { $current=$iv_ruleUnsetPropertyOperation.current; } 
	 EOF 
;

// Rule UnsetPropertyOperation
ruleUnsetPropertyOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('unset' 
    {
        createLeafNode(grammarAccess.getUnsetPropertyOperationAccess().getUnsetKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnsetPropertyOperationAccess().getKeyPropertyNameParserRuleCall_1_0(), currentNode); 
	    }
	    lv_key_1=rulePropertyName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnsetPropertyOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "key", lv_key_1, "PropertyName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getUnsetPropertyOperationAccess().getSemicolonKeyword_2(), null); 
    }
);





// Entry rule entryRuleSynchronization
entryRuleSynchronization returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSynchronizationRule(), currentNode); }
	 iv_ruleSynchronization=ruleSynchronization 
	 { $current=$iv_ruleSynchronization.current; } 
	 EOF 
;

// Rule Synchronization
ruleSynchronization returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSynchronizationAccess().getPartrefsSynchronizedPartParserRuleCall_0_0(), currentNode); 
	    }
	    lv_partrefs_0=ruleSynchronizedPart 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSynchronizationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "partrefs", lv_partrefs_0, "SynchronizedPart", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getSynchronizationAccess().getCommaKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSynchronizationAccess().getPartrefsSynchronizedPartParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_partrefs_2=ruleSynchronizedPart 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSynchronizationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "partrefs", lv_partrefs_2, "SynchronizedPart", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))+';' 
    {
        createLeafNode(grammarAccess.getSynchronizationAccess().getSemicolonKeyword_2(), null); 
    }
);





// Entry rule entryRuleSynchronizedPart
entryRuleSynchronizedPart returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSynchronizedPartRule(), currentNode); } 
	 iv_ruleSynchronizedPart=ruleSynchronizedPart 
	 { $current=$iv_ruleSynchronizedPart.current.getText(); }  
	 EOF 
;

// Rule SynchronizedPart
ruleSynchronizedPart returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
((
    { 
        currentNode=createCompositeNode(grammarAccess.getSynchronizedPartAccess().getCompoundNameParserRuleCall_0_0(), currentNode); 
    }
    this_CompoundName_0=ruleCompoundName    {
		$current.merge(this_CompoundName_0);
    }

    { 
        currentNode = currentNode.getParent();
    }
(
	kw='#' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSynchronizedPartAccess().getNumberSignKeyword_0_1_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getSynchronizedPartAccess().getPartNameParserRuleCall_0_1_1(), currentNode); 
    }
    this_PartName_2=rulePartName    {
		$current.merge(this_PartName_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
)?)
    |
    { 
        currentNode=createCompositeNode(grammarAccess.getSynchronizedPartAccess().getPartNameParserRuleCall_1(), currentNode); 
    }
    this_PartName_3=rulePartName    {
		$current.merge(this_PartName_3);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRulePathGroup
entryRulePathGroup returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPathGroupRule(), currentNode); }
	 iv_rulePathGroup=rulePathGroup 
	 { $current=$iv_rulePathGroup.current; } 
	 EOF 
;

// Rule PathGroup
rulePathGroup returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPathGroupAccess().getPathsPathVectorElementParserRuleCall_0_0(), currentNode); 
	    }
	    lv_paths_0=rulePathVectorElement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "paths", lv_paths_0, "PathVectorElement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*('annotations' 
    {
        createLeafNode(grammarAccess.getPathGroupAccess().getAnnotationsKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPathGroupAccess().getAnnotationsCompoundPropertyOperationParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_annotations_2=ruleCompoundPropertyOperation 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "annotations", lv_annotations_2, "CompoundPropertyOperation", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?);





// Entry rule entryRulePathVectorElement
entryRulePathVectorElement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPathVectorElementRule(), currentNode); }
	 iv_rulePathVectorElement=rulePathVectorElement 
	 { $current=$iv_rulePathVectorElement.current; } 
	 EOF 
;

// Rule PathVectorElement
rulePathVectorElement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getPathVectorElementAccess().getFilteredPathVectorParserRuleCall_0(), currentNode); 
    }
    this_FilteredPathVector_0=ruleFilteredPathVector
    { 
        $current = $this_FilteredPathVector_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPathVectorElementAccess().getBasePathVectorParserRuleCall_1(), currentNode); 
    }
    this_BasePathVector_1=ruleBasePathVector
    { 
        $current = $this_BasePathVector_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPathVectorElementAccess().getUnbasedPathVectorParserRuleCall_2(), currentNode); 
    }
    this_UnbasedPathVector_2=ruleUnbasedPathVector
    { 
        $current = $this_UnbasedPathVector_2.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleFilteredPathVector
entryRuleFilteredPathVector returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFilteredPathVectorRule(), currentNode); }
	 iv_ruleFilteredPathVector=ruleFilteredPathVector 
	 { $current=$iv_ruleFilteredPathVector.current; } 
	 EOF 
;

// Rule FilteredPathVector
ruleFilteredPathVector returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('when' 
    {
        createLeafNode(grammarAccess.getFilteredPathVectorAccess().getWhenKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFilteredPathVectorAccess().getFilterFilterParserRuleCall_1_0(), currentNode); 
	    }
	    lv_filter_1=ruleFilter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFilteredPathVectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "filter", lv_filter_1, "Filter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    lv_body_2=(	{ 
        currentNode=createCompositeNode(grammarAccess.getFilteredPathVectorAccess().getBodyBasePathVectorParserRuleCall_2_0_0(), currentNode); 
    }
	ruleBasePathVector	{ 
        currentNode = currentNode.getParent();
    }

    |	{ 
        currentNode=createCompositeNode(grammarAccess.getFilteredPathVectorAccess().getBodyUnbasedPathVectorParserRuleCall_2_0_1(), currentNode); 
    }
	ruleUnbasedPathVector	{ 
        currentNode = currentNode.getParent();
    }

    |	{ 
        currentNode=createCompositeNode(grammarAccess.getFilteredPathVectorAccess().getBodyCompoundPathVectorParserRuleCall_2_0_2(), currentNode); 
    }
	ruleCompoundPathVector	{ 
        currentNode = currentNode.getParent();
    }
)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFilteredPathVectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "body", lv_body_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleBasePathVector
entryRuleBasePathVector returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBasePathVectorRule(), currentNode); }
	 iv_ruleBasePathVector=ruleBasePathVector 
	 { $current=$iv_ruleBasePathVector.current; } 
	 EOF 
;

// Rule BasePathVector
ruleBasePathVector returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBasePathVectorAccess().getBasePathPathParserRuleCall_0_0(), currentNode); 
	    }
	    lv_basePath_0=rulePath 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBasePathVectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "basePath", lv_basePath_0, "Path", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'[' 
    {
        createLeafNode(grammarAccess.getBasePathVectorAccess().getLeftSquareBracketKeyword_1(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBasePathVectorAccess().getPathsPathParserRuleCall_2_0_0(), currentNode); 
	    }
	    lv_paths_2=rulePath 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBasePathVectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "paths", lv_paths_2, "Path", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getBasePathVectorAccess().getCommaKeyword_2_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBasePathVectorAccess().getPathsPathParserRuleCall_2_1_1_0(), currentNode); 
	    }
	    lv_paths_4=rulePath 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBasePathVectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "paths", lv_paths_4, "Path", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)?']' 
    {
        createLeafNode(grammarAccess.getBasePathVectorAccess().getRightSquareBracketKeyword_3(), null); 
    }
';' 
    {
        createLeafNode(grammarAccess.getBasePathVectorAccess().getSemicolonKeyword_4(), null); 
    }
);





// Entry rule entryRuleUnbasedPathVector
entryRuleUnbasedPathVector returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getUnbasedPathVectorRule(), currentNode); }
	 iv_ruleUnbasedPathVector=ruleUnbasedPathVector 
	 { $current=$iv_ruleUnbasedPathVector.current; } 
	 EOF 
;

// Rule UnbasedPathVector
ruleUnbasedPathVector returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnbasedPathVectorAccess().getPathsPathParserRuleCall_0_0(), currentNode); 
	    }
	    lv_paths_0=rulePath 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnbasedPathVectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "paths", lv_paths_0, "Path", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getUnbasedPathVectorAccess().getCommaKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnbasedPathVectorAccess().getPathsPathParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_paths_2=rulePath 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnbasedPathVectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "paths", lv_paths_2, "Path", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*';' 
    {
        createLeafNode(grammarAccess.getUnbasedPathVectorAccess().getSemicolonKeyword_2(), null); 
    }
);





// Entry rule entryRuleCompoundPathVector
entryRuleCompoundPathVector returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCompoundPathVectorRule(), currentNode); }
	 iv_ruleCompoundPathVector=ruleCompoundPathVector 
	 { $current=$iv_ruleCompoundPathVector.current; } 
	 EOF 
;

// Rule CompoundPathVector
ruleCompoundPathVector returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('{' 
    {
        createLeafNode(grammarAccess.getCompoundPathVectorAccess().getLeftCurlyBracketKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCompoundPathVectorAccess().getBodyPathVectorElementParserRuleCall_1_0(), currentNode); 
	    }
	    lv_body_1=rulePathVectorElement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompoundPathVectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "body", lv_body_1, "PathVectorElement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getCompoundPathVectorAccess().getRightCurlyBracketKeyword_2(), null); 
    }
);





// Entry rule entryRulePath
entryRulePath returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPathRule(), currentNode); } 
	 iv_rulePath=rulePath 
	 { $current=$iv_rulePath.current.getText(); }  
	 EOF 
;

// Rule Path
rulePath returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
		myHiddenTokenState.restore();
    }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    createLeafNode(grammarAccess.getPathAccess().getSTRINGTerminalRuleCall_0(), null); 
    }

    |((
	kw='/' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPathAccess().getSolidusKeyword_1_0(), null); 
    }
)?
    { 
        currentNode=createCompositeNode(grammarAccess.getPathAccess().getQualifiedNameParserRuleCall_1_1(), currentNode); 
    }
    this_QualifiedName_2=ruleQualifiedName    {
		$current.merge(this_QualifiedName_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
(
	kw='/' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPathAccess().getSolidusKeyword_1_2_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getPathAccess().getQualifiedNameParserRuleCall_1_2_1(), currentNode); 
    }
    this_QualifiedName_4=ruleQualifiedName    {
		$current.merge(this_QualifiedName_4);
    }

    { 
        currentNode = currentNode.getParent();
    }
)*(
	kw='/' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPathAccess().getSolidusKeyword_1_3(), null); 
    }
)?))
    ;





// Entry rule entryRulePrerequisite
entryRulePrerequisite returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPrerequisiteRule(), currentNode); }
	 iv_rulePrerequisite=rulePrerequisite 
	 { $current=$iv_rulePrerequisite.current; } 
	 EOF 
;

// Rule Prerequisite
rulePrerequisite returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((('when' 
    {
        createLeafNode(grammarAccess.getPrerequisiteAccess().getWhenKeyword_0_0_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPrerequisiteAccess().getFilterFilterParserRuleCall_0_0_1_0(), currentNode); 
	    }
	    lv_filter_1=ruleFilter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrerequisiteRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "filter", lv_filter_1, "Filter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?((	
	
	    lv_alias_2=	RULE_ID
	{
		createLeafNode(grammarAccess.getPrerequisiteAccess().getAliasIDTerminalRuleCall_0_1_0_0(), "alias"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrerequisiteRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "alias", lv_alias_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)'=' 
    {
        createLeafNode(grammarAccess.getPrerequisiteAccess().getEqualsSignKeyword_0_1_1(), null); 
    }
)?((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPrerequisiteAccess().getPartReferencePrerequisiteEntryParserRuleCall_0_2_0_0(), currentNode); 
	    }
	    lv_partReference_4=rulePrerequisiteEntry 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrerequisiteRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "partReference", lv_partReference_4, "PrerequisiteEntry", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPrerequisiteAccess().getClosureClosureParserRuleCall_0_2_1_0(), currentNode); 
	    }
	    lv_closure_5=ruleClosure 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrerequisiteRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "closure", lv_closure_5, "Closure", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?))';' 
    {
        createLeafNode(grammarAccess.getPrerequisiteAccess().getSemicolonKeyword_1(), null); 
    }
);





// Entry rule entryRuleClosure
entryRuleClosure returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getClosureRule(), currentNode); }
	 iv_ruleClosure=ruleClosure 
	 { $current=$iv_ruleClosure.current; } 
	 EOF 
;

// Rule Closure
ruleClosure returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('with' 
    {
        createLeafNode(grammarAccess.getClosureAccess().getWithKeyword_0(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getClosureAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
('properties' 
    {
        createLeafNode(grammarAccess.getClosureAccess().getPropertiesKeyword_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClosureAccess().getPropertiesCompoundPropertyOperationParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_properties_3=ruleCompoundPropertyOperation 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClosureRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "properties", lv_properties_3, "CompoundPropertyOperation", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?('advice' 
    {
        createLeafNode(grammarAccess.getClosureAccess().getAdviceKeyword_3_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClosureAccess().getAdviceCompoundAdviceParserRuleCall_3_1_0(), currentNode); 
	    }
	    lv_advice_5=ruleCompoundAdvice 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClosureRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "advice", lv_advice_5, "CompoundAdvice", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?'}' 
    {
        createLeafNode(grammarAccess.getClosureAccess().getRightCurlyBracketKeyword_4(), null); 
    }
);





// Entry rule entryRulePrerequisiteEntry
entryRulePrerequisiteEntry returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPrerequisiteEntryRule(), currentNode); }
	 iv_rulePrerequisiteEntry=rulePrerequisiteEntry 
	 { $current=$iv_rulePrerequisiteEntry.current; } 
	 EOF 
;

// Rule PrerequisiteEntry
rulePrerequisiteEntry returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getPrerequisiteEntryAccess().getPartInSelfParserRuleCall_0(), currentNode); 
    }
    this_PartInSelf_0=rulePartInSelf
    { 
        $current = $this_PartInSelf_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrerequisiteEntryAccess().getCapabilityReferencedPartParserRuleCall_1(), currentNode); 
    }
    this_CapabilityReferencedPart_1=ruleCapabilityReferencedPart
    { 
        $current = $this_CapabilityReferencedPart_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrerequisiteEntryAccess().getCompoundReferencesParserRuleCall_2(), currentNode); 
    }
    this_CompoundReferences_2=ruleCompoundReferences
    { 
        $current = $this_CompoundReferences_2.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRulePartInSelf
entryRulePartInSelf returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPartInSelfRule(), currentNode); }
	 iv_rulePartInSelf=rulePartInSelf 
	 { $current=$iv_rulePartInSelf.current; } 
	 EOF 
;

// Rule PartInSelf
rulePartInSelf returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPartInSelfAccess().getPartNamePartNameParserRuleCall_0(), currentNode); 
	    }
	    lv_partName_0=rulePartName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPartInSelfRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "partName", lv_partName_0, "PartName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
);





// Entry rule entryRuleCapabilityReferencedPart
entryRuleCapabilityReferencedPart returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCapabilityReferencedPartRule(), currentNode); }
	 iv_ruleCapabilityReferencedPart=ruleCapabilityReferencedPart 
	 { $current=$iv_ruleCapabilityReferencedPart.current; } 
	 EOF 
;

// Rule CapabilityReferencedPart
ruleCapabilityReferencedPart returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCapabilityReferencedPartAccess().getInterfaceInterfaceNameParserRuleCall_0_0_0(), currentNode); 
	    }
	    lv_interface_0=ruleInterfaceName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCapabilityReferencedPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "interface", lv_interface_0, "InterfaceName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'/' 
    {
        createLeafNode(grammarAccess.getCapabilityReferencedPartAccess().getSolidusKeyword_0_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCapabilityReferencedPartAccess().getNameUnitNameParserRuleCall_0_2_0(), currentNode); 
	    }
	    lv_name_2=ruleUnitName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCapabilityReferencedPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_2, "UnitName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('/' 
    {
        createLeafNode(grammarAccess.getCapabilityReferencedPartAccess().getSolidusKeyword_0_3_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCapabilityReferencedPartAccess().getRangeVersionRangeParserRuleCall_0_3_1_0(), currentNode); 
	    }
	    lv_range_4=ruleVersionRange 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCapabilityReferencedPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "range", lv_range_4, "VersionRange", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?'#' 
    {
        createLeafNode(grammarAccess.getCapabilityReferencedPartAccess().getNumberSignKeyword_0_4(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCapabilityReferencedPartAccess().getPartNamePartNameParserRuleCall_0_5_0(), currentNode); 
	    }
	    lv_partName_6=rulePartName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCapabilityReferencedPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "partName", lv_partName_6, "PartName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))
    |((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCapabilityReferencedPartAccess().getInterfaceInterfaceNameParserRuleCall_1_0_0(), currentNode); 
	    }
	    lv_interface_7=ruleInterfaceName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCapabilityReferencedPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "interface", lv_interface_7, "InterfaceName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'/' 
    {
        createLeafNode(grammarAccess.getCapabilityReferencedPartAccess().getSolidusKeyword_1_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCapabilityReferencedPartAccess().getNameUnitNameParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_name_9=ruleUnitName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCapabilityReferencedPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_9, "UnitName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('/' 
    {
        createLeafNode(grammarAccess.getCapabilityReferencedPartAccess().getSolidusKeyword_1_3_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCapabilityReferencedPartAccess().getRangeVersionRangeParserRuleCall_1_3_1_0(), currentNode); 
	    }
	    lv_range_11=ruleVersionRange 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCapabilityReferencedPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "range", lv_range_11, "VersionRange", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?));





// Entry rule entryRuleCompoundReferences
entryRuleCompoundReferences returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCompoundReferencesRule(), currentNode); }
	 iv_ruleCompoundReferences=ruleCompoundReferences 
	 { $current=$iv_ruleCompoundReferences.current; } 
	 EOF 
;

// Rule CompoundReferences
ruleCompoundReferences returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('{' 
    {
        createLeafNode(grammarAccess.getCompoundReferencesAccess().getLeftCurlyBracketKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCompoundReferencesAccess().getPrerequisitesPrerequisiteParserRuleCall_1_0(), currentNode); 
	    }
	    lv_prerequisites_1=rulePrerequisite 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompoundReferencesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "prerequisites", lv_prerequisites_1, "Prerequisite", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getCompoundReferencesAccess().getRightCurlyBracketKeyword_2(), null); 
    }
);





// Entry rule entryRuleBuildMethod
entryRuleBuildMethod returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBuildMethodRule(), currentNode); }
	 iv_ruleBuildMethod=ruleBuildMethod 
	 { $current=$iv_ruleBuildMethod.current; } 
	 EOF 
;

// Rule BuildMethod
ruleBuildMethod returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBuildMethodAccess().getVisibilityVisibilityEnumRuleCall_0_0(), currentNode); 
	    }
	    lv_visibility_0=ruleVisibility 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuildMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "visibility", lv_visibility_0, "Visibility", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBuildMethodAccess().getExecutionModeExecutionModeEnumRuleCall_1_0(), currentNode); 
	    }
	    lv_executionMode_1=ruleExecutionMode 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuildMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "executionMode", lv_executionMode_1, "ExecutionMode", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBuildMethodAccess().getNamePartNameParserRuleCall_2_0(), currentNode); 
	    }
	    lv_name_2=rulePartName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuildMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_2, "PartName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('provides' 
    {
        createLeafNode(grammarAccess.getBuildMethodAccess().getProvidesKeyword_3_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBuildMethodAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_3_1_0(), currentNode); 
	    }
	    lv_providedCapabilities_4=ruleProvidedCapability 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuildMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "providedCapabilities", lv_providedCapabilities_4, "ProvidedCapability", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getBuildMethodAccess().getCommaKeyword_3_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBuildMethodAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_3_2_1_0(), currentNode); 
	    }
	    lv_providedCapabilities_6=ruleProvidedCapability 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuildMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "providedCapabilities", lv_providedCapabilities_6, "ProvidedCapability", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBuildMethodAccess().getPreConditionPreConditionParserRuleCall_4_0(), currentNode); 
	    }
	    lv_preCondition_7=rulePreCondition 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuildMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "preCondition", lv_preCondition_7, "PreCondition", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBuildMethodAccess().getPostConditionPostConditionParserRuleCall_5_0(), currentNode); 
	    }
	    lv_postCondition_8=rulePostCondition 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuildMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "postCondition", lv_postCondition_8, "PostCondition", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?'{' 
    {
        createLeafNode(grammarAccess.getBuildMethodAccess().getLeftCurlyBracketKeyword_6(), null); 
    }
('properties' 
    {
        createLeafNode(grammarAccess.getBuildMethodAccess().getPropertiesKeyword_7_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBuildMethodAccess().getPropertiesCompoundPropertyOperationParserRuleCall_7_1_0(), currentNode); 
	    }
	    lv_properties_11=ruleCompoundPropertyOperation 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuildMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "properties", lv_properties_11, "CompoundPropertyOperation", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBuildMethodAccess().getAdviceAdviceParserRuleCall_8_0(), currentNode); 
	    }
	    lv_advice_12=ruleAdvice 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuildMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "advice", lv_advice_12, "Advice", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBuildMethodAccess().getGroupGroupParserRuleCall_9_0(), currentNode); 
	    }
	    lv_group_13=ruleGroup 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuildMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "group", lv_group_13, "Group", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBuildMethodAccess().getLayoutLayoutParserRuleCall_10_0(), currentNode); 
	    }
	    lv_layout_14=ruleLayout 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuildMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "layout", lv_layout_14, "Layout", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBuildMethodAccess().getStatementsStatementsParserRuleCall_11_0(), currentNode); 
	    }
	    lv_statements_15=ruleStatements 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuildMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "statements", lv_statements_15, "Statements", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?'}' 
    {
        createLeafNode(grammarAccess.getBuildMethodAccess().getRightCurlyBracketKeyword_12(), null); 
    }
);





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getParameterRule(), currentNode); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getParameterAccess().getValExpressionParserRuleCall_0(), currentNode); 
	    }
	    lv_val_0=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "val", lv_val_0, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
);





// Entry rule entryRuleGroupKeyword
entryRuleGroupKeyword returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getGroupKeywordRule(), currentNode); } 
	 iv_ruleGroupKeyword=ruleGroupKeyword 
	 { $current=$iv_ruleGroupKeyword.current.getText(); }  
	 EOF 
;

// Rule GroupKeyword
ruleGroupKeyword returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:

	kw='input' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getGroupKeywordAccess().getInputKeyword(), null); 
    }

    ;





// Entry rule entryRuleLayoutKeyword
entryRuleLayoutKeyword returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLayoutKeywordRule(), currentNode); } 
	 iv_ruleLayoutKeyword=ruleLayoutKeyword 
	 { $current=$iv_ruleLayoutKeyword.current.getText(); }  
	 EOF 
;

// Rule LayoutKeyword
ruleLayoutKeyword returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:

	kw='output' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getLayoutKeywordAccess().getOutputKeyword(), null); 
    }

    ;





// Entry rule entryRuleLayout
entryRuleLayout returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLayoutRule(), currentNode); }
	 iv_ruleLayout=ruleLayout 
	 { $current=$iv_ruleLayout.current; } 
	 EOF 
;

// Rule Layout
ruleLayout returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(ruleLayoutKeyword(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getLayoutAccess().getPostConditionPostConditionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_postCondition_1=rulePostCondition 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLayoutRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "postCondition", lv_postCondition_1, "PostCondition", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?'{' 
    {
        createLeafNode(grammarAccess.getLayoutAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getLayoutAccess().getBodyPathGroupParserRuleCall_3_0(), currentNode); 
	    }
	    lv_body_3=rulePathGroup 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLayoutRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "body", lv_body_3, "PathGroup", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?'}' 
    {
        createLeafNode(grammarAccess.getLayoutAccess().getRightCurlyBracketKeyword_4(), null); 
    }
);





// Entry rule entryRuleGroup
entryRuleGroup returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getGroupRule(), currentNode); }
	 iv_ruleGroup=ruleGroup 
	 { $current=$iv_ruleGroup.current; } 
	 EOF 
;

// Rule Group
ruleGroup returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(ruleGroupKeyword(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getGroupAccess().getPreConditionPreConditionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_preCondition_1=rulePreCondition 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "preCondition", lv_preCondition_1, "PreCondition", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getGroupAccess().getPostConditionPostConditionParserRuleCall_2_0(), currentNode); 
	    }
	    lv_postCondition_2=rulePostCondition 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "postCondition", lv_postCondition_2, "PostCondition", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?'{' 
    {
        createLeafNode(grammarAccess.getGroupAccess().getLeftCurlyBracketKeyword_3(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getGroupAccess().getPrerequisitesPrerequisiteParserRuleCall_4_0(), currentNode); 
	    }
	    lv_prerequisites_4=rulePrerequisite 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "prerequisites", lv_prerequisites_4, "Prerequisite", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getGroupAccess().getRightCurlyBracketKeyword_5(), null); 
    }
);





// Entry rule entryRuleRepositoryConfiguration
entryRuleRepositoryConfiguration returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRepositoryConfigurationRule(), currentNode); }
	 iv_ruleRepositoryConfiguration=ruleRepositoryConfiguration 
	 { $current=$iv_ruleRepositoryConfiguration.current; } 
	 EOF 
;

// Rule RepositoryConfiguration
ruleRepositoryConfiguration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRepositoryConfigurationAccess().getLocationURIParserRuleCall_0_0_0(), currentNode); 
	    }
	    lv_location_0=ruleURI 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRepositoryConfigurationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "location", lv_location_0, "URI", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |('resolver' 
    {
        createLeafNode(grammarAccess.getRepositoryConfigurationAccess().getResolverKeyword_0_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRepositoryConfigurationAccess().getResolverClassQualifiedNameParserRuleCall_0_1_1_0(), currentNode); 
	    }
	    lv_resolverClass_2=ruleQualifiedName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRepositoryConfigurationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "resolverClass", lv_resolverClass_2, "QualifiedName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)))(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRepositoryConfigurationAccess().getAdviceCompoundAdviceParserRuleCall_1_0(), currentNode); 
	    }
	    lv_advice_3=ruleCompoundAdvice 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRepositoryConfigurationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "advice", lv_advice_3, "CompoundAdvice", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?';' 
    {
        createLeafNode(grammarAccess.getRepositoryConfigurationAccess().getSemicolonKeyword_2(), null); 
    }
);





// Entry rule entryRuleURI
entryRuleURI returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getURIRule(), currentNode); } 
	 iv_ruleURI=ruleURI 
	 { $current=$iv_ruleURI.current.getText(); }  
	 EOF 
;

// Rule URI
ruleURI returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    createLeafNode(grammarAccess.getURIAccess().getSTRINGTerminalRuleCall(), null); 
    }

    ;





// Entry rule entryRuleNamedAdvice
entryRuleNamedAdvice returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getNamedAdviceRule(), currentNode); }
	 iv_ruleNamedAdvice=ruleNamedAdvice 
	 { $current=$iv_ruleNamedAdvice.current; } 
	 EOF 
;

// Rule NamedAdvice
ruleNamedAdvice returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_name_0=	RULE_ID
	{
		createLeafNode(grammarAccess.getNamedAdviceAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNamedAdviceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getNamedAdviceAccess().getAdviceCompoundAdviceParserRuleCall_1_0(), currentNode); 
	    }
	    lv_advice_1=ruleCompoundAdvice 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNamedAdviceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "advice", lv_advice_1, "CompoundAdvice", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleAdvice
entryRuleAdvice returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAdviceRule(), currentNode); }
	 iv_ruleAdvice=ruleAdvice 
	 { $current=$iv_ruleAdvice.current; } 
	 EOF 
;

// Rule Advice
ruleAdvice returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('advice' 
    {
        createLeafNode(grammarAccess.getAdviceAccess().getAdviceKeyword_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getAdviceAccess().getCompoundAdviceParserRuleCall_1(), currentNode); 
    }
    this_CompoundAdvice_1=ruleCompoundAdvice
    { 
        $current = $this_CompoundAdvice_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleCompoundAdvice
entryRuleCompoundAdvice returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCompoundAdviceRule(), currentNode); }
	 iv_ruleCompoundAdvice=ruleCompoundAdvice 
	 { $current=$iv_ruleCompoundAdvice.current; } 
	 EOF 
;

// Rule CompoundAdvice
ruleCompoundAdvice returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('{' 
    {
        createLeafNode(grammarAccess.getCompoundAdviceAccess().getLeftCurlyBracketKeyword_0(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCompoundAdviceAccess().getAdviceAdviceStatementParserRuleCall_1_0_0(), currentNode); 
	    }
	    lv_advice_1=ruleAdviceStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompoundAdviceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "advice", lv_advice_1, "AdviceStatement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getCompoundAdviceAccess().getSemicolonKeyword_1_1(), null); 
    }
)*'}' 
    {
        createLeafNode(grammarAccess.getCompoundAdviceAccess().getRightCurlyBracketKeyword_2(), null); 
    }
);





// Entry rule entryRuleAdviceStatement
entryRuleAdviceStatement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAdviceStatementRule(), currentNode); }
	 iv_ruleAdviceStatement=ruleAdviceStatement 
	 { $current=$iv_ruleAdviceStatement.current; } 
	 EOF 
;

// Rule AdviceStatement
ruleAdviceStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAdviceStatementAccess().getPathAdvicePathParserRuleCall_0_0(), currentNode); 
	    }
	    lv_path_0=ruleAdvicePath 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdviceStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "path", lv_path_0, "AdvicePath", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAdviceStatementAccess().getOpAssignmentOperatorEnumRuleCall_1_0_0_0(), currentNode); 
	    }
	    lv_op_1=ruleAssignmentOperator 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdviceStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_1, "AssignmentOperator", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAdviceStatementAccess().getValueExpressionParserRuleCall_1_0_1_0(), currentNode); 
	    }
	    lv_value_2=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdviceStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_2, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAdviceStatementAccess().getAdviceCompoundAdviceParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_advice_3=ruleCompoundAdvice 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdviceStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "advice", lv_advice_3, "CompoundAdvice", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)));





// Entry rule entryRuleAdvicePath
entryRuleAdvicePath returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAdvicePathRule(), currentNode); }
	 iv_ruleAdvicePath=ruleAdvicePath 
	 { $current=$iv_ruleAdvicePath.current; } 
	 EOF 
;

// Rule AdvicePath
ruleAdvicePath returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_absolute_0=':' 
    {
        createLeafNode(grammarAccess.getAdvicePathAccess().getAbsoluteColonKeyword_0_0(), "absolute"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdvicePathRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "absolute", true, ":", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAdvicePathAccess().getSelectorsSelectorParserRuleCall_1_0(), currentNode); 
	    }
	    lv_selectors_1=ruleSelector 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdvicePathRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "selectors", lv_selectors_1, "Selector", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(':' 
    {
        createLeafNode(grammarAccess.getAdvicePathAccess().getColonKeyword_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAdvicePathAccess().getSelectorsSelectorParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_selectors_3=ruleSelector 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdvicePathRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "selectors", lv_selectors_3, "Selector", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleSelector
entryRuleSelector returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSelectorRule(), currentNode); }
	 iv_ruleSelector=ruleSelector 
	 { $current=$iv_ruleSelector.current; } 
	 EOF 
;

// Rule Selector
ruleSelector returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getSelectorAccess().getDiscriminatingSelectorParserRuleCall_0(), currentNode); 
    }
    this_DiscriminatingSelector_0=ruleDiscriminatingSelector
    { 
        $current = $this_DiscriminatingSelector_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getSelectorAccess().getMultiNodeSelectorParserRuleCall_1(), currentNode); 
    }
    this_MultiNodeSelector_1=ruleMultiNodeSelector
    { 
        $current = $this_MultiNodeSelector_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getSelectorAccess().getNodeSelectorParserRuleCall_2(), currentNode); 
    }
    this_NodeSelector_2=ruleNodeSelector
    { 
        $current = $this_NodeSelector_2.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleMultiNodeSelector
entryRuleMultiNodeSelector returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getMultiNodeSelectorRule(), currentNode); }
	 iv_ruleMultiNodeSelector=ruleMultiNodeSelector 
	 { $current=$iv_ruleMultiNodeSelector.current; } 
	 EOF 
;

// Rule MultiNodeSelector
ruleMultiNodeSelector returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getMultiNodeSelectorAccess().getNameSelectorParserRuleCall_0(), currentNode); 
    }
    this_NameSelector_0=ruleNameSelector
    { 
        $current = $this_NameSelector_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getMultiNodeSelectorAccess().getThisSelectorParserRuleCall_1(), currentNode); 
    }
    this_ThisSelector_1=ruleThisSelector
    { 
        $current = $this_ThisSelector_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getMultiNodeSelectorAccess().getChildrenSelectorParserRuleCall_2(), currentNode); 
    }
    this_ChildrenSelector_2=ruleChildrenSelector
    { 
        $current = $this_ChildrenSelector_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getMultiNodeSelectorAccess().getAncestorSelectorParserRuleCall_3(), currentNode); 
    }
    this_AncestorSelector_3=ruleAncestorSelector
    { 
        $current = $this_AncestorSelector_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getMultiNodeSelectorAccess().getRegexpSelectorParserRuleCall_4(), currentNode); 
    }
    this_RegexpSelector_4=ruleRegexpSelector
    { 
        $current = $this_RegexpSelector_4.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleDiscriminatingSelector
entryRuleDiscriminatingSelector returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getDiscriminatingSelectorRule(), currentNode); }
	 iv_ruleDiscriminatingSelector=ruleDiscriminatingSelector 
	 { $current=$iv_ruleDiscriminatingSelector.current; } 
	 EOF 
;

// Rule DiscriminatingSelector
ruleDiscriminatingSelector returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getDiscriminatingSelectorAccess().getSelectorMultiNodeSelectorParserRuleCall_0_0(), currentNode); 
	    }
	    lv_selector_0=ruleMultiNodeSelector 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDiscriminatingSelectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "selector", lv_selector_0, "MultiNodeSelector", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'[' 
    {
        createLeafNode(grammarAccess.getDiscriminatingSelectorAccess().getLeftSquareBracketKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getDiscriminatingSelectorAccess().getPredicateExpressionParserRuleCall_2_0(), currentNode); 
	    }
	    lv_predicate_2=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDiscriminatingSelectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "predicate", lv_predicate_2, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)']' 
    {
        createLeafNode(grammarAccess.getDiscriminatingSelectorAccess().getRightSquareBracketKeyword_3(), null); 
    }
);





// Entry rule entryRuleNodeSelector
entryRuleNodeSelector returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getNodeSelectorRule(), currentNode); }
	 iv_ruleNodeSelector=ruleNodeSelector 
	 { $current=$iv_ruleNodeSelector.current; } 
	 EOF 
;

// Rule NodeSelector
ruleNodeSelector returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getNodeSelectorAccess().getParentSelectorParserRuleCall(), currentNode); 
    }
    this_ParentSelector_0=ruleParentSelector
    { 
        $current = $this_ParentSelector_0.current; 
        currentNode = currentNode.getParent();
    }
;





// Entry rule entryRuleNameSelector
entryRuleNameSelector returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getNameSelectorRule(), currentNode); }
	 iv_ruleNameSelector=ruleNameSelector 
	 { $current=$iv_ruleNameSelector.current; } 
	 EOF 
;

// Rule NameSelector
ruleNameSelector returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getNameSelectorAccess().getNameQualifiedNameParserRuleCall_0(), currentNode); 
	    }
	    lv_name_0=ruleQualifiedName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNameSelectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, "QualifiedName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
);





// Entry rule entryRuleThisSelector
entryRuleThisSelector returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getThisSelectorRule(), currentNode); }
	 iv_ruleThisSelector=ruleThisSelector 
	 { $current=$iv_ruleThisSelector.current; } 
	 EOF 
;

// Rule ThisSelector
ruleThisSelector returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getThisSelectorAccess().getThisSelectorAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getThisSelectorAccess().getThisSelectorAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'.' 
    {
        createLeafNode(grammarAccess.getThisSelectorAccess().getFullStopKeyword_1(), null); 
    }
);





// Entry rule entryRuleParentSelector
entryRuleParentSelector returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getParentSelectorRule(), currentNode); }
	 iv_ruleParentSelector=ruleParentSelector 
	 { $current=$iv_ruleParentSelector.current; } 
	 EOF 
;

// Rule ParentSelector
ruleParentSelector returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getParentSelectorAccess().getParentSelectorAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getParentSelectorAccess().getParentSelectorAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'..' 
    {
        createLeafNode(grammarAccess.getParentSelectorAccess().getFullStopFullStopKeyword_1(), null); 
    }
);





// Entry rule entryRuleChildrenSelector
entryRuleChildrenSelector returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getChildrenSelectorRule(), currentNode); }
	 iv_ruleChildrenSelector=ruleChildrenSelector 
	 { $current=$iv_ruleChildrenSelector.current; } 
	 EOF 
;

// Rule ChildrenSelector
ruleChildrenSelector returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getChildrenSelectorAccess().getChildrenSelectorAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getChildrenSelectorAccess().getChildrenSelectorAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'*' 
    {
        createLeafNode(grammarAccess.getChildrenSelectorAccess().getAsteriskKeyword_1(), null); 
    }
);





// Entry rule entryRuleAncestorSelector
entryRuleAncestorSelector returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAncestorSelectorRule(), currentNode); }
	 iv_ruleAncestorSelector=ruleAncestorSelector 
	 { $current=$iv_ruleAncestorSelector.current; } 
	 EOF 
;

// Rule AncestorSelector
ruleAncestorSelector returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getAncestorSelectorAccess().getAncestorSelectorAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAncestorSelectorAccess().getAncestorSelectorAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'**' 
    {
        createLeafNode(grammarAccess.getAncestorSelectorAccess().getAsteriskAsteriskKeyword_1(), null); 
    }
);





// Entry rule entryRuleRegexpSelector
entryRuleRegexpSelector returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRegexpSelectorRule(), currentNode); }
	 iv_ruleRegexpSelector=ruleRegexpSelector 
	 { $current=$iv_ruleRegexpSelector.current; } 
	 EOF 
;

// Rule RegexpSelector
ruleRegexpSelector returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getRegexpSelectorAccess().getRegexpSelectorAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getRegexpSelectorAccess().getRegexpSelectorAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_pattern_1=	RULE_REGEX
	{
		createLeafNode(grammarAccess.getRegexpSelectorAccess().getPatternREGEXTerminalRuleCall_1_0(), "pattern"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRegexpSelectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "pattern", lv_pattern_1, "REGEX", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));







// Entry rule entryRuleFilter
entryRuleFilter returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFilterRule(), currentNode); }
	 iv_ruleFilter=ruleFilter 
	 { $current=$iv_ruleFilter.current; } 
	 EOF 
;

// Rule Filter
ruleFilter returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('(' 
    {
        createLeafNode(grammarAccess.getFilterAccess().getLeftParenthesisKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFilterAccess().getPredicateExpressionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_predicate_1=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFilterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "predicate", lv_predicate_1, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)')' 
    {
        createLeafNode(grammarAccess.getFilterAccess().getRightParenthesisKeyword_2(), null); 
    }
);





// Entry rule entryRulePreCondition
entryRulePreCondition returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPreConditionRule(), currentNode); }
	 iv_rulePreCondition=rulePreCondition 
	 { $current=$iv_rulePreCondition.current; } 
	 EOF 
;

// Rule PreCondition
rulePreCondition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('precondition' 
    {
        createLeafNode(grammarAccess.getPreConditionAccess().getPreconditionKeyword_0(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getPreConditionAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPreConditionAccess().getAssertsAssertionExpressionParserRuleCall_2_0(), currentNode); 
	    }
	    lv_asserts_2=ruleAssertionExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPreConditionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "asserts", lv_asserts_2, "AssertionExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getPreConditionAccess().getRightCurlyBracketKeyword_3(), null); 
    }
);





// Entry rule entryRulePostCondition
entryRulePostCondition returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPostConditionRule(), currentNode); }
	 iv_rulePostCondition=rulePostCondition 
	 { $current=$iv_rulePostCondition.current; } 
	 EOF 
;

// Rule PostCondition
rulePostCondition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('postcondition' 
    {
        createLeafNode(grammarAccess.getPostConditionAccess().getPostconditionKeyword_0(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getPostConditionAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPostConditionAccess().getAssertsAssertionExpressionParserRuleCall_2_0(), currentNode); 
	    }
	    lv_asserts_2=ruleAssertionExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPostConditionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "asserts", lv_asserts_2, "AssertionExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getPostConditionAccess().getRightCurlyBracketKeyword_3(), null); 
    }
);





// Entry rule entryRuleAssertionExpression
entryRuleAssertionExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAssertionExpressionRule(), currentNode); }
	 iv_ruleAssertionExpression=ruleAssertionExpression 
	 { $current=$iv_ruleAssertionExpression.current; } 
	 EOF 
;

// Rule AssertionExpression
ruleAssertionExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('assert' 
    {
        createLeafNode(grammarAccess.getAssertionExpressionAccess().getAssertKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAssertionExpressionAccess().getExprExpressionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_expr_1=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssertionExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expr", lv_expr_1, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getAssertionExpressionAccess().getCommaKeyword_2_0(), null); 
    }
(	
	
	    lv_message_3=	RULE_STRING
	{
		createLeafNode(grammarAccess.getAssertionExpressionAccess().getMessageSTRINGTerminalRuleCall_2_1_0(), "message"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssertionExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "message", lv_message_3, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?';' 
    {
        createLeafNode(grammarAccess.getAssertionExpressionAccess().getSemicolonKeyword_3(), null); 
    }
);





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getStatementRule(), currentNode); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_0(), currentNode); 
    }
    this_IfStatement_0=ruleIfStatement
    { 
        $current = $this_IfStatement_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getSwitchStatementParserRuleCall_1(), currentNode); 
    }
    this_SwitchStatement_1=ruleSwitchStatement
    { 
        $current = $this_SwitchStatement_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_2(), currentNode); 
    }
    this_WhileStatement_2=ruleWhileStatement
    { 
        $current = $this_WhileStatement_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getForStatementParserRuleCall_3(), currentNode); 
    }
    this_ForStatement_3=ruleForStatement
    { 
        $current = $this_ForStatement_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getDoWhileStatementParserRuleCall_4(), currentNode); 
    }
    this_DoWhileStatement_4=ruleDoWhileStatement
    { 
        $current = $this_DoWhileStatement_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getCompoundStatementParserRuleCall_5(), currentNode); 
    }
    this_CompoundStatement_5=ruleCompoundStatement
    { 
        $current = $this_CompoundStatement_5.current; 
        currentNode = currentNode.getParent();
    }

    |((
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getVarExpressionParserRuleCall_6_0(), currentNode); 
    }
    this_VarExpression_6=ruleVarExpression
    { 
        $current = $this_VarExpression_6.current; 
        currentNode = currentNode.getParent();
    }
)?';' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getSemicolonKeyword_6_1(), null); 
    }
)
    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getBreakStatementParserRuleCall_7(), currentNode); 
    }
    this_BreakStatement_8=ruleBreakStatement
    { 
        $current = $this_BreakStatement_8.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getContinueStatementParserRuleCall_8(), currentNode); 
    }
    this_ContinueStatement_9=ruleContinueStatement
    { 
        $current = $this_ContinueStatement_9.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_9(), currentNode); 
    }
    this_ReturnStatement_10=ruleReturnStatement
    { 
        $current = $this_ReturnStatement_10.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getFunctionStatementParserRuleCall_10(), currentNode); 
    }
    this_FunctionStatement_11=ruleFunctionStatement
    { 
        $current = $this_FunctionStatement_11.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getLabelStatementParserRuleCall_11(), currentNode); 
    }
    this_LabelStatement_12=ruleLabelStatement
    { 
        $current = $this_LabelStatement_12.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getThrowStatementParserRuleCall_12(), currentNode); 
    }
    this_ThrowStatement_13=ruleThrowStatement
    { 
        $current = $this_ThrowStatement_13.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getTryCatchStatementParserRuleCall_13(), currentNode); 
    }
    this_TryCatchStatement_14=ruleTryCatchStatement
    { 
        $current = $this_TryCatchStatement_14.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getWithStatementParserRuleCall_14(), currentNode); 
    }
    this_WithStatement_15=ruleWithStatement
    { 
        $current = $this_WithStatement_15.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleBreakStatement
entryRuleBreakStatement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBreakStatementRule(), currentNode); }
	 iv_ruleBreakStatement=ruleBreakStatement 
	 { $current=$iv_ruleBreakStatement.current; } 
	 EOF 
;

// Rule BreakStatement
ruleBreakStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getBreakStatementAccess().getBreakStatementAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBreakStatementAccess().getBreakStatementAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'break' 
    {
        createLeafNode(grammarAccess.getBreakStatementAccess().getBreakKeyword_1(), null); 
    }
(	
	
	    lv_label_2=	RULE_ID
	{
		createLeafNode(grammarAccess.getBreakStatementAccess().getLabelIDTerminalRuleCall_2_0(), "label"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBreakStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "label", lv_label_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?';' 
    {
        createLeafNode(grammarAccess.getBreakStatementAccess().getSemicolonKeyword_3(), null); 
    }
);





// Entry rule entryRuleContinueStatement
entryRuleContinueStatement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getContinueStatementRule(), currentNode); }
	 iv_ruleContinueStatement=ruleContinueStatement 
	 { $current=$iv_ruleContinueStatement.current; } 
	 EOF 
;

// Rule ContinueStatement
ruleContinueStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getContinueStatementAccess().getContinueStatementAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getContinueStatementAccess().getContinueStatementAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'continue' 
    {
        createLeafNode(grammarAccess.getContinueStatementAccess().getContinueKeyword_1(), null); 
    }
(	
	
	    lv_label_2=	RULE_ID
	{
		createLeafNode(grammarAccess.getContinueStatementAccess().getLabelIDTerminalRuleCall_2_0(), "label"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getContinueStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "label", lv_label_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?';' 
    {
        createLeafNode(grammarAccess.getContinueStatementAccess().getSemicolonKeyword_3(), null); 
    }
);





// Entry rule entryRuleCompoundStatement
entryRuleCompoundStatement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCompoundStatementRule(), currentNode); }
	 iv_ruleCompoundStatement=ruleCompoundStatement 
	 { $current=$iv_ruleCompoundStatement.current; } 
	 EOF 
;

// Rule CompoundStatement
ruleCompoundStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('{' 
    {
        createLeafNode(grammarAccess.getCompoundStatementAccess().getLeftCurlyBracketKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCompoundStatementAccess().getStatementsStatementsParserRuleCall_1_0(), currentNode); 
	    }
	    lv_statements_1=ruleStatements 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompoundStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "statements", lv_statements_1, "Statements", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'}' 
    {
        createLeafNode(grammarAccess.getCompoundStatementAccess().getRightCurlyBracketKeyword_2(), null); 
    }
);





// Entry rule entryRuleStatements
entryRuleStatements returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getStatementsRule(), currentNode); }
	 iv_ruleStatements=ruleStatements 
	 { $current=$iv_ruleStatements.current; } 
	 EOF 
;

// Rule Statements
ruleStatements returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getStatementsAccess().getStatementsStatementParserRuleCall_0(), currentNode); 
	    }
	    lv_statements_0=ruleStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "statements", lv_statements_0, "Statement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)+;





// Entry rule entryRuleWhileStatement
entryRuleWhileStatement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getWhileStatementRule(), currentNode); }
	 iv_ruleWhileStatement=ruleWhileStatement 
	 { $current=$iv_ruleWhileStatement.current; } 
	 EOF 
;

// Rule WhileStatement
ruleWhileStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('while' 
    {
        createLeafNode(grammarAccess.getWhileStatementAccess().getWhileKeyword_0(), null); 
    }
'(' 
    {
        createLeafNode(grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getWhileStatementAccess().getConditionExpressionParserRuleCall_2_0(), currentNode); 
	    }
	    lv_condition_2=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhileStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "condition", lv_condition_2, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)')' 
    {
        createLeafNode(grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getWhileStatementAccess().getBodyStatementParserRuleCall_4_0(), currentNode); 
	    }
	    lv_body_4=ruleStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhileStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "body", lv_body_4, "Statement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleSwitchStatement
entryRuleSwitchStatement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSwitchStatementRule(), currentNode); }
	 iv_ruleSwitchStatement=ruleSwitchStatement 
	 { $current=$iv_ruleSwitchStatement.current; } 
	 EOF 
;

// Rule SwitchStatement
ruleSwitchStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('switch' 
    {
        createLeafNode(grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0(), null); 
    }
'(' 
    {
        createLeafNode(grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSwitchStatementAccess().getSwitchExprVarExpressionParserRuleCall_2_0(), currentNode); 
	    }
	    lv_switchExpr_2=ruleVarExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSwitchStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "switchExpr", lv_switchExpr_2, "VarExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)')' 
    {
        createLeafNode(grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSwitchStatementAccess().getCaseCaseParserRuleCall_5_0(), currentNode); 
	    }
	    lv_case_5=ruleCase 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSwitchStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "case", lv_case_5, "Case", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*('default' 
    {
        createLeafNode(grammarAccess.getSwitchStatementAccess().getDefaultKeyword_6_0(), null); 
    }
':' 
    {
        createLeafNode(grammarAccess.getSwitchStatementAccess().getColonKeyword_6_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSwitchStatementAccess().getStatementsStatementsParserRuleCall_6_2_0(), currentNode); 
	    }
	    lv_statements_8=ruleStatements 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSwitchStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "statements", lv_statements_8, "Statements", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?)?'}' 
    {
        createLeafNode(grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7(), null); 
    }
);





// Entry rule entryRuleCase
entryRuleCase returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCaseRule(), currentNode); }
	 iv_ruleCase=ruleCase 
	 { $current=$iv_ruleCase.current; } 
	 EOF 
;

// Rule Case
ruleCase returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('case' 
    {
        createLeafNode(grammarAccess.getCaseAccess().getCaseKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCaseAccess().getConditionValueLiteralParserRuleCall_1_0(), currentNode); 
	    }
	    lv_condition_1=ruleValueLiteral 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "condition", lv_condition_1, "ValueLiteral", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)':' 
    {
        createLeafNode(grammarAccess.getCaseAccess().getColonKeyword_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCaseAccess().getStatementsStatementsParserRuleCall_3_0(), currentNode); 
	    }
	    lv_statements_3=ruleStatements 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "statements", lv_statements_3, "Statements", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?);





// Entry rule entryRuleForStatement
entryRuleForStatement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getForStatementRule(), currentNode); }
	 iv_ruleForStatement=ruleForStatement 
	 { $current=$iv_ruleForStatement.current; } 
	 EOF 
;

// Rule ForStatement
ruleForStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getForStatementAccess().getForStatementAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getForStatementAccess().getForStatementAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'for' 
    {
        createLeafNode(grammarAccess.getForStatementAccess().getForKeyword_1(), null); 
    }
'(' 
    {
        createLeafNode(grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getForStatementAccess().getInitVarExpressionListParserRuleCall_3_0(), currentNode); 
	    }
	    lv_init_3=ruleVarExpressionList 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "init", lv_init_3, "VarExpressionList", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(((	
	
	    lv_regular_4=';' 
    {
        createLeafNode(grammarAccess.getForStatementAccess().getRegularSemicolonKeyword_4_0_0_0(), "regular"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "regular", true, ";", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getForStatementAccess().getCondExpressionParserRuleCall_4_0_1_0(), currentNode); 
	    }
	    lv_cond_5=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "cond", lv_cond_5, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?';' 
    {
        createLeafNode(grammarAccess.getForStatementAccess().getSemicolonKeyword_4_0_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getForStatementAccess().getIterateExpressionListParserRuleCall_4_0_3_0(), currentNode); 
	    }
	    lv_iterate_7=ruleExpressionList 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "iterate", lv_iterate_7, "ExpressionList", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?)
    |('in' 
    {
        createLeafNode(grammarAccess.getForStatementAccess().getInKeyword_4_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getForStatementAccess().getIterateExpressionParserRuleCall_4_1_1_0(), currentNode); 
	    }
	    lv_iterate_9=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "iterate", lv_iterate_9, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)))')' 
    {
        createLeafNode(grammarAccess.getForStatementAccess().getRightParenthesisKeyword_5(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getForStatementAccess().getBodyStatementParserRuleCall_6_0(), currentNode); 
	    }
	    lv_body_11=ruleStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "body", lv_body_11, "Statement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleDoWhileStatement
entryRuleDoWhileStatement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getDoWhileStatementRule(), currentNode); }
	 iv_ruleDoWhileStatement=ruleDoWhileStatement 
	 { $current=$iv_ruleDoWhileStatement.current; } 
	 EOF 
;

// Rule DoWhileStatement
ruleDoWhileStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('do' 
    {
        createLeafNode(grammarAccess.getDoWhileStatementAccess().getDoKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getDoWhileStatementAccess().getStatementStatementParserRuleCall_1_0(), currentNode); 
	    }
	    lv_statement_1=ruleStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDoWhileStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "statement", lv_statement_1, "Statement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'while' 
    {
        createLeafNode(grammarAccess.getDoWhileStatementAccess().getWhileKeyword_2(), null); 
    }
'(' 
    {
        createLeafNode(grammarAccess.getDoWhileStatementAccess().getLeftParenthesisKeyword_3(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getDoWhileStatementAccess().getConditionExpressionParserRuleCall_4_0(), currentNode); 
	    }
	    lv_condition_4=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDoWhileStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "condition", lv_condition_4, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)')' 
    {
        createLeafNode(grammarAccess.getDoWhileStatementAccess().getRightParenthesisKeyword_5(), null); 
    }
';' 
    {
        createLeafNode(grammarAccess.getDoWhileStatementAccess().getSemicolonKeyword_6(), null); 
    }
);





// Entry rule entryRuleReturnStatement
entryRuleReturnStatement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getReturnStatementRule(), currentNode); }
	 iv_ruleReturnStatement=ruleReturnStatement 
	 { $current=$iv_ruleReturnStatement.current; } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('return' 
    {
        createLeafNode(grammarAccess.getReturnStatementAccess().getReturnKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getReturnStatementAccess().getReturnExpressionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_return_1=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReturnStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "return", lv_return_1, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?';' 
    {
        createLeafNode(grammarAccess.getReturnStatementAccess().getSemicolonKeyword_2(), null); 
    }
);





// Entry rule entryRuleFunctionStatement
entryRuleFunctionStatement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFunctionStatementRule(), currentNode); }
	 iv_ruleFunctionStatement=ruleFunctionStatement 
	 { $current=$iv_ruleFunctionStatement.current; } 
	 EOF 
;

// Rule FunctionStatement
ruleFunctionStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('function' 
    {
        createLeafNode(grammarAccess.getFunctionStatementAccess().getFunctionKeyword_0(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getFunctionStatementAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)'(' 
    {
        createLeafNode(grammarAccess.getFunctionStatementAccess().getLeftParenthesisKeyword_2(), null); 
    }
((	
	
	    lv_params_3=	RULE_ID
	{
		createLeafNode(grammarAccess.getFunctionStatementAccess().getParamsIDTerminalRuleCall_3_0_0(), "params"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_3, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getFunctionStatementAccess().getCommaKeyword_3_1_0(), null); 
    }
(	
	
	    lv_params_5=	RULE_ID
	{
		createLeafNode(grammarAccess.getFunctionStatementAccess().getParamsIDTerminalRuleCall_3_1_1_0(), "params"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_5, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))*)')' 
    {
        createLeafNode(grammarAccess.getFunctionStatementAccess().getRightParenthesisKeyword_4(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getFunctionStatementAccess().getLeftCurlyBracketKeyword_5(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFunctionStatementAccess().getStatementsStatementsParserRuleCall_6_0(), currentNode); 
	    }
	    lv_statements_8=ruleStatements 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "statements", lv_statements_8, "Statements", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'}' 
    {
        createLeafNode(grammarAccess.getFunctionStatementAccess().getRightCurlyBracketKeyword_7(), null); 
    }
);





// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getIfStatementRule(), currentNode); }
	 iv_ruleIfStatement=ruleIfStatement 
	 { $current=$iv_ruleIfStatement.current; } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('if' 
    {
        createLeafNode(grammarAccess.getIfStatementAccess().getIfKeyword_0(), null); 
    }
'(' 
    {
        createLeafNode(grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getIfStatementAccess().getCondExpressionParserRuleCall_2_0(), currentNode); 
	    }
	    lv_cond_2=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "cond", lv_cond_2, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)')' 
    {
        createLeafNode(grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getIfStatementAccess().getThenStatementParserRuleCall_4_0(), currentNode); 
	    }
	    lv_then_4=ruleStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "then", lv_then_4, "Statement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('else' 
    {
        createLeafNode(grammarAccess.getIfStatementAccess().getElseKeyword_5_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getIfStatementAccess().getElseStatementParserRuleCall_5_1_0(), currentNode); 
	    }
	    lv_else_6=ruleStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "else", lv_else_6, "Statement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?);





// Entry rule entryRuleLabelStatement
entryRuleLabelStatement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLabelStatementRule(), currentNode); }
	 iv_ruleLabelStatement=ruleLabelStatement 
	 { $current=$iv_ruleLabelStatement.current; } 
	 EOF 
;

// Rule LabelStatement
ruleLabelStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_name_0=	RULE_ID
	{
		createLeafNode(grammarAccess.getLabelStatementAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLabelStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)':' 
    {
        createLeafNode(grammarAccess.getLabelStatementAccess().getColonKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getLabelStatementAccess().getStatementStatementParserRuleCall_2_0(), currentNode); 
	    }
	    lv_statement_2=ruleStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLabelStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "statement", lv_statement_2, "Statement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleThrowStatement
entryRuleThrowStatement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getThrowStatementRule(), currentNode); }
	 iv_ruleThrowStatement=ruleThrowStatement 
	 { $current=$iv_ruleThrowStatement.current; } 
	 EOF 
;

// Rule ThrowStatement
ruleThrowStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('throw' 
    {
        createLeafNode(grammarAccess.getThrowStatementAccess().getThrowKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getThrowStatementAccess().getExprExpressionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_expr_1=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getThrowStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expr", lv_expr_1, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getThrowStatementAccess().getSemicolonKeyword_2(), null); 
    }
);





// Entry rule entryRuleTryCatchStatement
entryRuleTryCatchStatement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTryCatchStatementRule(), currentNode); }
	 iv_ruleTryCatchStatement=ruleTryCatchStatement 
	 { $current=$iv_ruleTryCatchStatement.current; } 
	 EOF 
;

// Rule TryCatchStatement
ruleTryCatchStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('try' 
    {
        createLeafNode(grammarAccess.getTryCatchStatementAccess().getTryKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTryCatchStatementAccess().getTryBlockCompoundStatementParserRuleCall_1_0(), currentNode); 
	    }
	    lv_tryBlock_1=ruleCompoundStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTryCatchStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "tryBlock", lv_tryBlock_1, "CompoundStatement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTryCatchStatementAccess().getCatchBlockCatchBlockParserRuleCall_2_0_0_0(), currentNode); 
	    }
	    lv_catchBlock_2=ruleCatchBlock 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTryCatchStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "catchBlock", lv_catchBlock_2, "CatchBlock", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTryCatchStatementAccess().getFinallyBlockFinallyBlockParserRuleCall_2_0_1_0(), currentNode); 
	    }
	    lv_finallyBlock_3=ruleFinallyBlock 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTryCatchStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "finallyBlock", lv_finallyBlock_3, "FinallyBlock", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTryCatchStatementAccess().getFinallyFinallyBlockParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_finally_4=ruleFinallyBlock 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTryCatchStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "finally", lv_finally_4, "FinallyBlock", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)));





// Entry rule entryRuleCatchBlock
entryRuleCatchBlock returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCatchBlockRule(), currentNode); }
	 iv_ruleCatchBlock=ruleCatchBlock 
	 { $current=$iv_ruleCatchBlock.current; } 
	 EOF 
;

// Rule CatchBlock
ruleCatchBlock returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('catch' 
    {
        createLeafNode(grammarAccess.getCatchBlockAccess().getCatchKeyword_0(), null); 
    }
'(' 
    {
        createLeafNode(grammarAccess.getCatchBlockAccess().getLeftParenthesisKeyword_1(), null); 
    }
(	
	
	    lv_variable_2=	RULE_ID
	{
		createLeafNode(grammarAccess.getCatchBlockAccess().getVariableIDTerminalRuleCall_2_0(), "variable"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCatchBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "variable", lv_variable_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)')' 
    {
        createLeafNode(grammarAccess.getCatchBlockAccess().getRightParenthesisKeyword_3(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCatchBlockAccess().getCatchBlockCompoundStatementParserRuleCall_4_0(), currentNode); 
	    }
	    lv_catchBlock_4=ruleCompoundStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCatchBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "catchBlock", lv_catchBlock_4, "CompoundStatement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleFinallyBlock
entryRuleFinallyBlock returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFinallyBlockRule(), currentNode); }
	 iv_ruleFinallyBlock=ruleFinallyBlock 
	 { $current=$iv_ruleFinallyBlock.current; } 
	 EOF 
;

// Rule FinallyBlock
ruleFinallyBlock returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('finally' 
    {
        createLeafNode(grammarAccess.getFinallyBlockAccess().getFinallyKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFinallyBlockAccess().getFinallyBlockCompoundStatementParserRuleCall_1_0(), currentNode); 
	    }
	    lv_finallyBlock_1=ruleCompoundStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFinallyBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "finallyBlock", lv_finallyBlock_1, "CompoundStatement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleWithStatement
entryRuleWithStatement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getWithStatementRule(), currentNode); }
	 iv_ruleWithStatement=ruleWithStatement 
	 { $current=$iv_ruleWithStatement.current; } 
	 EOF 
;

// Rule WithStatement
ruleWithStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('with' 
    {
        createLeafNode(grammarAccess.getWithStatementAccess().getWithKeyword_0(), null); 
    }
'(' 
    {
        createLeafNode(grammarAccess.getWithStatementAccess().getLeftParenthesisKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getWithStatementAccess().getExprExpressionParserRuleCall_2_0(), currentNode); 
	    }
	    lv_expr_2=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWithStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expr", lv_expr_2, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)')' 
    {
        createLeafNode(grammarAccess.getWithStatementAccess().getRightParenthesisKeyword_3(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getWithStatementAccess().getStatementStatementParserRuleCall_4_0(), currentNode); 
	    }
	    lv_statement_4=ruleStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWithStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "statement", lv_statement_4, "Statement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleVarExpressionList
entryRuleVarExpressionList returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getVarExpressionListRule(), currentNode); }
	 iv_ruleVarExpressionList=ruleVarExpressionList 
	 { $current=$iv_ruleVarExpressionList.current; } 
	 EOF 
;

// Rule VarExpressionList
ruleVarExpressionList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getVarExpressionListAccess().getExprVarExpressionParserRuleCall_0_0(), currentNode); 
	    }
	    lv_expr_0=ruleVarExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVarExpressionListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "expr", lv_expr_0, "VarExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getVarExpressionListAccess().getCommaKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getVarExpressionListAccess().getExprVarExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_expr_2=ruleVarExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVarExpressionListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "expr", lv_expr_2, "VarExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleExpressionList
entryRuleExpressionList returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getExpressionListRule(), currentNode); }
	 iv_ruleExpressionList=ruleExpressionList 
	 { $current=$iv_ruleExpressionList.current; } 
	 EOF 
;

// Rule ExpressionList
ruleExpressionList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getExpressionListAccess().getExprExpressionParserRuleCall_0_0(), currentNode); 
	    }
	    lv_expr_0=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "expr", lv_expr_0, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getExpressionListAccess().getCommaKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getExpressionListAccess().getExprExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_expr_2=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "expr", lv_expr_2, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleVarExpression
entryRuleVarExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getVarExpressionRule(), currentNode); }
	 iv_ruleVarExpression=ruleVarExpression 
	 { $current=$iv_ruleVarExpression.current; } 
	 EOF 
;

// Rule VarExpression
ruleVarExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getVarExpressionAccess().getExpressionParserRuleCall_0(), currentNode); 
    }
    this_Expression_0=ruleExpression
    { 
        $current = $this_Expression_0.current; 
        currentNode = currentNode.getParent();
    }

    |((
    { 
        temp=factory.create(grammarAccess.getVarExpressionAccess().getVarExpressionAction_1_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getVarExpressionAccess().getVarExpressionAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'var' 
    {
        createLeafNode(grammarAccess.getVarExpressionAccess().getVarKeyword_1_1(), null); 
    }
(	
	
	    lv_name_3=	RULE_ID
	{
		createLeafNode(grammarAccess.getVarExpressionAccess().getNameIDTerminalRuleCall_1_2_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVarExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_3, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)('=' 
    {
        createLeafNode(grammarAccess.getVarExpressionAccess().getEqualsSignKeyword_1_3_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getVarExpressionAccess().getValueExpressionParserRuleCall_1_3_1_0(), currentNode); 
	    }
	    lv_value_5=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVarExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_5, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?));





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall(), currentNode); 
    }
    this_AssignmentExpression_0=ruleAssignmentExpression
    { 
        $current = $this_AssignmentExpression_0.current; 
        currentNode = currentNode.getParent();
    }
;





// Entry rule entryRuleAssignmentExpression
entryRuleAssignmentExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAssignmentExpressionRule(), currentNode); }
	 iv_ruleAssignmentExpression=ruleAssignmentExpression 
	 { $current=$iv_ruleAssignmentExpression.current; } 
	 EOF 
;

// Rule AssignmentExpression
ruleAssignmentExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAssignmentExpressionAccess().getIfExpressionParserRuleCall_0(), currentNode); 
    }
    this_IfExpression_0=ruleIfExpression
    { 
        $current = $this_IfExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getAssignmentExpressionAccess().getAssignmentOperationLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAssignmentExpressionAccess().getAssignmentOperationLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAssignmentExpressionAccess().getOpAssignmentOperatorEnumRuleCall_1_1_0(), currentNode); 
	    }
	    lv_op_2=ruleAssignmentOperator 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2, "AssignmentOperator", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAssignmentExpressionAccess().getRightAssignmentExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_right_3=ruleAssignmentExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "right", lv_right_3, "AssignmentExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?);





// Entry rule entryRuleChainedExpression
entryRuleChainedExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getChainedExpressionRule(), currentNode); }
	 iv_ruleChainedExpression=ruleChainedExpression 
	 { $current=$iv_ruleChainedExpression.current; } 
	 EOF 
;

// Rule ChainedExpression
ruleChainedExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getChainedExpressionAccess().getIfExpressionParserRuleCall(), currentNode); 
    }
    this_IfExpression_0=ruleIfExpression
    { 
        $current = $this_IfExpression_0.current; 
        currentNode = currentNode.getParent();
    }
;





// Entry rule entryRuleIfExpression
entryRuleIfExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getIfExpressionRule(), currentNode); }
	 iv_ruleIfExpression=ruleIfExpression 
	 { $current=$iv_ruleIfExpression.current; } 
	 EOF 
;

// Rule IfExpression
ruleIfExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getIfExpressionAccess().getOrExpressionParserRuleCall_0(), currentNode); 
    }
    this_OrExpression_0=ruleOrExpression
    { 
        $current = $this_OrExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getIfExpressionAccess().getIfExpressionConditionAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "condition", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getIfExpressionAccess().getIfExpressionConditionAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'?' 
    {
        createLeafNode(grammarAccess.getIfExpressionAccess().getQuestionMarkKeyword_1_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getIfExpressionAccess().getThenPartChainedExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_thenPart_3=ruleChainedExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "thenPart", lv_thenPart_3, "ChainedExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)':' 
    {
        createLeafNode(grammarAccess.getIfExpressionAccess().getColonKeyword_1_3(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getIfExpressionAccess().getElsePartChainedExpressionParserRuleCall_1_4_0(), currentNode); 
	    }
	    lv_elsePart_5=ruleChainedExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "elsePart", lv_elsePart_5, "ChainedExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?);





// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getOrExpressionRule(), currentNode); }
	 iv_ruleOrExpression=ruleOrExpression 
	 { $current=$iv_ruleOrExpression.current; } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0(), currentNode); 
    }
    this_AndExpression_0=ruleAndExpression
    { 
        $current = $this_AndExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getOrExpressionAccess().getBooleanOperationLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getOrExpressionAccess().getBooleanOperationLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_operator_2='||' 
    {
        createLeafNode(grammarAccess.getOrExpressionAccess().getOperatorVerticalLineVerticalLineKeyword_1_1_0(), "operator"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "operator", /* lv_operator_2 */ input.LT(-1), "||", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_right_3=ruleAndExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "right", lv_right_3, "AndExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAndExpressionRule(), currentNode); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAndExpressionAccess().getBitwiseExpressionParserRuleCall_0(), currentNode); 
    }
    this_BitwiseExpression_0=ruleBitwiseExpression
    { 
        $current = $this_BitwiseExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getAndExpressionAccess().getBooleanOperationLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAndExpressionAccess().getBooleanOperationLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_operator_2='&&' 
    {
        createLeafNode(grammarAccess.getAndExpressionAccess().getOperatorAmpersandAmpersandKeyword_1_1_0(), "operator"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "operator", /* lv_operator_2 */ input.LT(-1), "&&", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAndExpressionAccess().getRightBitwiseExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_right_3=ruleBitwiseExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "right", lv_right_3, "BitwiseExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleBitwiseExpression
entryRuleBitwiseExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBitwiseExpressionRule(), currentNode); }
	 iv_ruleBitwiseExpression=ruleBitwiseExpression 
	 { $current=$iv_ruleBitwiseExpression.current; } 
	 EOF 
;

// Rule BitwiseExpression
ruleBitwiseExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getBitwiseExpressionAccess().getRelationalExpressionParserRuleCall_0(), currentNode); 
    }
    this_RelationalExpression_0=ruleRelationalExpression
    { 
        $current = $this_RelationalExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getBitwiseExpressionAccess().getOperationCallParamsAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "params", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBitwiseExpressionAccess().getOperationCallParamsAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_name_2=('&' 
    {
        createLeafNode(grammarAccess.getBitwiseExpressionAccess().getNameAmpersandKeyword_1_1_0_0(), "name"); 
    }


    |'^' 
    {
        createLeafNode(grammarAccess.getBitwiseExpressionAccess().getNameCircumflexAccentKeyword_1_1_0_1(), "name"); 
    }


    |'|' 
    {
        createLeafNode(grammarAccess.getBitwiseExpressionAccess().getNameVerticalLineKeyword_1_1_0_2(), "name"); 
    }

)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBitwiseExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", /* lv_name_2 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBitwiseExpressionAccess().getParamsRelationalExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_params_3=ruleRelationalExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBitwiseExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_3, "RelationalExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRelationalExpressionRule(), currentNode); }
	 iv_ruleRelationalExpression=ruleRelationalExpression 
	 { $current=$iv_ruleRelationalExpression.current; } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0(), currentNode); 
    }
    this_ShiftExpression_0=ruleShiftExpression
    { 
        $current = $this_ShiftExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getRelationalExpressionAccess().getRelationalOperationLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getRelationalExpressionAccess().getRelationalOperationLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getOperatorRelationalOperatorEnumRuleCall_1_1_0(), currentNode); 
	    }
	    lv_operator_2=ruleRelationalOperator 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operator", lv_operator_2, "RelationalOperator", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getRightShiftExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_right_3=ruleShiftExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "right", lv_right_3, "ShiftExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleShiftExpression
entryRuleShiftExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getShiftExpressionRule(), currentNode); }
	 iv_ruleShiftExpression=ruleShiftExpression 
	 { $current=$iv_ruleShiftExpression.current; } 
	 EOF 
;

// Rule ShiftExpression
ruleShiftExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0(), currentNode); 
    }
    this_AdditiveExpression_0=ruleAdditiveExpression
    { 
        $current = $this_AdditiveExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getShiftExpressionAccess().getOperationCallParamsAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "params", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getShiftExpressionAccess().getOperationCallParamsAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_name_2=('<<' 
    {
        createLeafNode(grammarAccess.getShiftExpressionAccess().getNameLessThanSignLessThanSignKeyword_1_1_0_0(), "name"); 
    }


    |'>>' 
    {
        createLeafNode(grammarAccess.getShiftExpressionAccess().getNameGreaterThanSignGreaterThanSignKeyword_1_1_0_1(), "name"); 
    }


    |'>>>' 
    {
        createLeafNode(grammarAccess.getShiftExpressionAccess().getNameGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_1_0_2(), "name"); 
    }

)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getShiftExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", /* lv_name_2 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getShiftExpressionAccess().getParamsAdditiveExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_params_3=ruleAdditiveExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getShiftExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_3, "AdditiveExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAdditiveExpressionRule(), currentNode); }
	 iv_ruleAdditiveExpression=ruleAdditiveExpression 
	 { $current=$iv_ruleAdditiveExpression.current; } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0(), currentNode); 
    }
    this_MultiplicativeExpression_0=ruleMultiplicativeExpression
    { 
        $current = $this_MultiplicativeExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getAdditiveExpressionAccess().getOperationCallParamsAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "params", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOperationCallParamsAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_name_2=('+' 
    {
        createLeafNode(grammarAccess.getAdditiveExpressionAccess().getNamePlusSignKeyword_1_1_0_0(), "name"); 
    }


    |'-' 
    {
        createLeafNode(grammarAccess.getAdditiveExpressionAccess().getNameHyphenMinusKeyword_1_1_0_1(), "name"); 
    }

)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", /* lv_name_2 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getParamsMultiplicativeExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_params_3=ruleMultiplicativeExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_3, "MultiplicativeExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getMultiplicativeExpressionRule(), currentNode); }
	 iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression 
	 { $current=$iv_ruleMultiplicativeExpression.current; } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getSetExpressionParserRuleCall_0(), currentNode); 
    }
    this_SetExpression_0=ruleSetExpression
    { 
        $current = $this_SetExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getMultiplicativeExpressionAccess().getOperationCallParamsAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "params", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOperationCallParamsAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_name_2=('*' 
    {
        createLeafNode(grammarAccess.getMultiplicativeExpressionAccess().getNameAsteriskKeyword_1_1_0_0(), "name"); 
    }


    |'/' 
    {
        createLeafNode(grammarAccess.getMultiplicativeExpressionAccess().getNameSolidusKeyword_1_1_0_1(), "name"); 
    }


    |'%' 
    {
        createLeafNode(grammarAccess.getMultiplicativeExpressionAccess().getNamePercentSignKeyword_1_1_0_2(), "name"); 
    }

)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", /* lv_name_2 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getParamsSetExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_params_3=ruleSetExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_3, "SetExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleSetExpression
entryRuleSetExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSetExpressionRule(), currentNode); }
	 iv_ruleSetExpression=ruleSetExpression 
	 { $current=$iv_ruleSetExpression.current; } 
	 EOF 
;

// Rule SetExpression
ruleSetExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getSetExpressionAccess().getUnaryOrInfixExpressionParserRuleCall_0(), currentNode); 
    }
    this_UnaryOrInfixExpression_0=ruleUnaryOrInfixExpression
    { 
        $current = $this_UnaryOrInfixExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getSetExpressionAccess().getSetOperationCallParamsAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "params", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSetExpressionAccess().getSetOperationCallParamsAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSetExpressionAccess().getOpSetOperatorEnumRuleCall_1_1_0(), currentNode); 
	    }
	    lv_op_2=ruleSetOperator 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSetExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2, "SetOperator", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSetExpressionAccess().getParamsUnaryOrInfixExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_params_3=ruleUnaryOrInfixExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSetExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_3, "UnaryOrInfixExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleUnaryOrInfixExpression
entryRuleUnaryOrInfixExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getUnaryOrInfixExpressionRule(), currentNode); }
	 iv_ruleUnaryOrInfixExpression=ruleUnaryOrInfixExpression 
	 { $current=$iv_ruleUnaryOrInfixExpression.current; } 
	 EOF 
;

// Rule UnaryOrInfixExpression
ruleUnaryOrInfixExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getUnaryOrInfixExpressionAccess().getUnaryExpressionParserRuleCall_0(), currentNode); 
    }
    this_UnaryExpression_0=ruleUnaryExpression
    { 
        $current = $this_UnaryExpression_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getUnaryOrInfixExpressionAccess().getPostopExpressionParserRuleCall_1(), currentNode); 
    }
    this_PostopExpression_1=rulePostopExpression
    { 
        $current = $this_PostopExpression_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getUnaryExpressionRule(), currentNode); }
	 iv_ruleUnaryExpression=ruleUnaryExpression 
	 { $current=$iv_ruleUnaryExpression.current; } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getUnaryExpressionAccess().getUnaryOperationAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getUnaryExpressionAccess().getUnaryOperationAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_name_1=('!' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getNameExclamationMarkKeyword_1_0_0(), "name"); 
    }


    |'-' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getNameHyphenMinusKeyword_1_0_1(), "name"); 
    }


    |'++' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getNamePlusSignPlusSignKeyword_1_0_2(), "name"); 
    }


    |'--' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getNameHyphenMinusHyphenMinusKeyword_1_0_3(), "name"); 
    }


    |'typeof' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getNameTypeofKeyword_1_0_4(), "name"); 
    }


    |'delete' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getNameDeleteKeyword_1_0_5(), "name"); 
    }


    |'~' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getNameTildeKeyword_1_0_6(), "name"); 
    }

)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", /* lv_name_1 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getParamsPostopExpressionParserRuleCall_2_0(), currentNode); 
	    }
	    lv_params_2=rulePostopExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_2, "PostopExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRulePostopExpression
entryRulePostopExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPostopExpressionRule(), currentNode); }
	 iv_rulePostopExpression=rulePostopExpression 
	 { $current=$iv_rulePostopExpression.current; } 
	 EOF 
;

// Rule PostopExpression
rulePostopExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getPostopExpressionAccess().getInfixExpressionParserRuleCall_0(), currentNode); 
    }
    this_InfixExpression_0=ruleInfixExpression
    { 
        $current = $this_InfixExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getPostopExpressionAccess().getOperationCallPostTargetAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "postTarget", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPostopExpressionAccess().getOperationCallPostTargetAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_name_2=('--' 
    {
        createLeafNode(grammarAccess.getPostopExpressionAccess().getNameHyphenMinusHyphenMinusKeyword_1_1_0_0(), "name"); 
    }


    |'++' 
    {
        createLeafNode(grammarAccess.getPostopExpressionAccess().getNamePlusSignPlusSignKeyword_1_1_0_1(), "name"); 
    }

)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPostopExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", /* lv_name_2 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?);





// Entry rule entryRuleInfixExpression
entryRuleInfixExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getInfixExpressionRule(), currentNode); }
	 iv_ruleInfixExpression=ruleInfixExpression 
	 { $current=$iv_ruleInfixExpression.current; } 
	 EOF 
;

// Rule InfixExpression
ruleInfixExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getInfixExpressionAccess().getCallExpressionParserRuleCall_0(), currentNode); 
    }
    this_CallExpression_0=ruleCallExpression
    { 
        $current = $this_CallExpression_0.current; 
        currentNode = currentNode.getParent();
    }
(((
    { 
        temp=factory.create(grammarAccess.getInfixExpressionAccess().getOperationCallTargetAction_1_0_0().getType().getClassifier());
        try {
        	factory.set(temp, "target", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getInfixExpressionAccess().getOperationCallTargetAction_1_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'.' 
    {
        createLeafNode(grammarAccess.getInfixExpressionAccess().getFullStopKeyword_1_0_1(), null); 
    }
(	
	
	    lv_name_3=	RULE_ID
	{
		createLeafNode(grammarAccess.getInfixExpressionAccess().getNameIDTerminalRuleCall_1_0_2_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInfixExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_3, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)'(' 
    {
        createLeafNode(grammarAccess.getInfixExpressionAccess().getLeftParenthesisKeyword_1_0_3(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getInfixExpressionAccess().getParamsParameterParserRuleCall_1_0_4_0_0(), currentNode); 
	    }
	    lv_params_5=ruleParameter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInfixExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_5, "Parameter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getInfixExpressionAccess().getCommaKeyword_1_0_4_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getInfixExpressionAccess().getParamsParameterParserRuleCall_1_0_4_1_1_0(), currentNode); 
	    }
	    lv_params_7=ruleParameter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInfixExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_7, "Parameter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)?')' 
    {
        createLeafNode(grammarAccess.getInfixExpressionAccess().getRightParenthesisKeyword_1_0_5(), null); 
    }
)
    |((
    { 
        temp=factory.create(grammarAccess.getInfixExpressionAccess().getAtCallTargetAction_1_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "target", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getInfixExpressionAccess().getAtCallTargetAction_1_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'[' 
    {
        createLeafNode(grammarAccess.getInfixExpressionAccess().getLeftSquareBracketKeyword_1_1_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getInfixExpressionAccess().getIndexExpressionParserRuleCall_1_1_2_0(), currentNode); 
	    }
	    lv_index_11=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInfixExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "index", lv_index_11, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)']' 
    {
        createLeafNode(grammarAccess.getInfixExpressionAccess().getRightSquareBracketKeyword_1_1_3(), null); 
    }
('(' 
    {
        createLeafNode(grammarAccess.getInfixExpressionAccess().getLeftParenthesisKeyword_1_1_4_0(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getInfixExpressionAccess().getParamsParameterParserRuleCall_1_1_4_1_0_0(), currentNode); 
	    }
	    lv_params_14=ruleParameter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInfixExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_14, "Parameter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getInfixExpressionAccess().getCommaKeyword_1_1_4_1_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getInfixExpressionAccess().getParamsParameterParserRuleCall_1_1_4_1_1_1_0(), currentNode); 
	    }
	    lv_params_16=ruleParameter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInfixExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_16, "Parameter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)?')' 
    {
        createLeafNode(grammarAccess.getInfixExpressionAccess().getRightParenthesisKeyword_1_1_4_2(), null); 
    }
)?)
    |((
    { 
        temp=factory.create(grammarAccess.getInfixExpressionAccess().getFeatureCallTargetAction_1_2_0().getType().getClassifier());
        try {
        	factory.set(temp, "target", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getInfixExpressionAccess().getFeatureCallTargetAction_1_2_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'.' 
    {
        createLeafNode(grammarAccess.getInfixExpressionAccess().getFullStopKeyword_1_2_1(), null); 
    }
(	
	
	    lv_type_20=	RULE_ID
	{
		createLeafNode(grammarAccess.getInfixExpressionAccess().getTypeIDTerminalRuleCall_1_2_2_0(), "type"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInfixExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_20, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)))*);





// Entry rule entryRuleCallExpression
entryRuleCallExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCallExpressionRule(), currentNode); }
	 iv_ruleCallExpression=ruleCallExpression 
	 { $current=$iv_ruleCallExpression.current; } 
	 EOF 
;

// Rule CallExpression
ruleCallExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getCallExpressionAccess().getPrimaryExpressionParserRuleCall_0(), currentNode); 
    }
    this_PrimaryExpression_0=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getCallExpressionAccess().getOperationCallTargetAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "target", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getCallExpressionAccess().getOperationCallTargetAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'(' 
    {
        createLeafNode(grammarAccess.getCallExpressionAccess().getLeftParenthesisKeyword_1_1(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCallExpressionAccess().getParamsParameterParserRuleCall_1_2_0_0(), currentNode); 
	    }
	    lv_params_3=ruleParameter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCallExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_3, "Parameter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getCallExpressionAccess().getCommaKeyword_1_2_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCallExpressionAccess().getParamsParameterParserRuleCall_1_2_1_1_0(), currentNode); 
	    }
	    lv_params_5=ruleParameter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCallExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_5, "Parameter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)?')' 
    {
        createLeafNode(grammarAccess.getCallExpressionAccess().getRightParenthesisKeyword_1_3(), null); 
    }
)*);





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPrimaryExpressionRule(), currentNode); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_0(), currentNode); 
    }
    this_Literal_0=ruleLiteral
    { 
        $current = $this_Literal_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getConstructorCallExpressionParserRuleCall_1(), currentNode); 
    }
    this_ConstructorCallExpression_1=ruleConstructorCallExpression
    { 
        $current = $this_ConstructorCallExpression_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getVariableValueParserRuleCall_2(), currentNode); 
    }
    this_VariableValue_2=ruleVariableValue
    { 
        $current = $this_VariableValue_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getPropertyValueParserRuleCall_3(), currentNode); 
    }
    this_PropertyValue_3=rulePropertyValue
    { 
        $current = $this_PropertyValue_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getKeywordVariablesParserRuleCall_4(), currentNode); 
    }
    this_KeywordVariables_4=ruleKeywordVariables
    { 
        $current = $this_KeywordVariables_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParanthesizedExpressionParserRuleCall_5(), currentNode); 
    }
    this_ParanthesizedExpression_5=ruleParanthesizedExpression
    { 
        $current = $this_ParanthesizedExpression_5.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRulePropertyValue
entryRulePropertyValue returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPropertyValueRule(), currentNode); }
	 iv_rulePropertyValue=rulePropertyValue 
	 { $current=$iv_rulePropertyValue.current; } 
	 EOF 
;

// Rule PropertyValue
rulePropertyValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getPropertyValueAccess().getPropertyValueAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPropertyValueAccess().getPropertyValueAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_name_1=	RULE_PID
	{
		createLeafNode(grammarAccess.getPropertyValueAccess().getNamePIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "PID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleVariableValue
entryRuleVariableValue returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getVariableValueRule(), currentNode); }
	 iv_ruleVariableValue=ruleVariableValue 
	 { $current=$iv_ruleVariableValue.current; } 
	 EOF 
;

// Rule VariableValue
ruleVariableValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getVariableValueAccess().getVariableValueAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getVariableValueAccess().getVariableValueAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getVariableValueAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleKeywordVariables
entryRuleKeywordVariables returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getKeywordVariablesRule(), currentNode); }
	 iv_ruleKeywordVariables=ruleKeywordVariables 
	 { $current=$iv_ruleKeywordVariables.current; } 
	 EOF 
;

// Rule KeywordVariables
ruleKeywordVariables returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getKeywordVariablesAccess().getKeywordVariableAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getKeywordVariablesAccess().getKeywordVariableAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_name_1=(	{ 
        currentNode=createCompositeNode(grammarAccess.getKeywordVariablesAccess().getNameGroupKeywordParserRuleCall_1_0_0(), currentNode); 
    }
	ruleGroupKeyword	{ 
        currentNode = currentNode.getParent();
    }

    |	{ 
        currentNode=createCompositeNode(grammarAccess.getKeywordVariablesAccess().getNameLayoutKeywordParserRuleCall_1_0_1(), currentNode); 
    }
	ruleLayoutKeyword	{ 
        currentNode = currentNode.getParent();
    }

    |'properties' 
    {
        createLeafNode(grammarAccess.getKeywordVariablesAccess().getNamePropertiesKeyword_1_0_2(), "name"); 
    }

)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getKeywordVariablesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", /* lv_name_1 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleConstructorCallExpression
entryRuleConstructorCallExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getConstructorCallExpressionRule(), currentNode); }
	 iv_ruleConstructorCallExpression=ruleConstructorCallExpression 
	 { $current=$iv_ruleConstructorCallExpression.current; } 
	 EOF 
;

// Rule ConstructorCallExpression
ruleConstructorCallExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getConstructorCallExpressionAccess().getCreatorCallAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getConstructorCallExpressionAccess().getCreatorCallAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_name_1='new' 
    {
        createLeafNode(grammarAccess.getConstructorCallExpressionAccess().getNameNewKeyword_1_0(), "name"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructorCallExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", /* lv_name_1 */ input.LT(-1), "new", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getConstructorCallExpressionAccess().getTargetQualifiedNameParserRuleCall_2_0(), currentNode); 
	    }
	    lv_target_2=ruleQualifiedName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructorCallExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "target", lv_target_2, "QualifiedName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'(' 
    {
        createLeafNode(grammarAccess.getConstructorCallExpressionAccess().getLeftParenthesisKeyword_3(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getConstructorCallExpressionAccess().getParamsParameterParserRuleCall_4_0_0(), currentNode); 
	    }
	    lv_params_4=ruleParameter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructorCallExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_4, "Parameter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getConstructorCallExpressionAccess().getCommaKeyword_4_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getConstructorCallExpressionAccess().getParamsParameterParserRuleCall_4_1_1_0(), currentNode); 
	    }
	    lv_params_6=ruleParameter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructorCallExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_6, "Parameter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)?')' 
    {
        createLeafNode(grammarAccess.getConstructorCallExpressionAccess().getRightParenthesisKeyword_5(), null); 
    }
);





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLiteralRule(), currentNode); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getValueLiteralParserRuleCall_0(), currentNode); 
    }
    this_ValueLiteral_0=ruleValueLiteral
    { 
        $current = $this_ValueLiteral_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getRegexpLiteralParserRuleCall_1(), currentNode); 
    }
    this_RegexpLiteral_1=ruleRegexpLiteral
    { 
        $current = $this_RegexpLiteral_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getLiteralArrayParserRuleCall_2(), currentNode); 
    }
    this_LiteralArray_2=ruleLiteralArray
    { 
        $current = $this_LiteralArray_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getLiteralObjectParserRuleCall_3(), currentNode); 
    }
    this_LiteralObject_3=ruleLiteralObject
    { 
        $current = $this_LiteralObject_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getLiteralFunctionParserRuleCall_4(), currentNode); 
    }
    this_LiteralFunction_4=ruleLiteralFunction
    { 
        $current = $this_LiteralFunction_4.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleLiteralArray
entryRuleLiteralArray returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLiteralArrayRule(), currentNode); }
	 iv_ruleLiteralArray=ruleLiteralArray 
	 { $current=$iv_ruleLiteralArray.current; } 
	 EOF 
;

// Rule LiteralArray
ruleLiteralArray returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getLiteralArrayAccess().getLiteralArrayAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLiteralArrayAccess().getLiteralArrayAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'[' 
    {
        createLeafNode(grammarAccess.getLiteralArrayAccess().getLeftSquareBracketKeyword_1(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getLiteralArrayAccess().getElementExpressionParserRuleCall_2_0_0(), currentNode); 
	    }
	    lv_element_2=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralArrayRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "element", lv_element_2, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getLiteralArrayAccess().getCommaKeyword_2_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getLiteralArrayAccess().getElementExpressionParserRuleCall_2_1_1_0(), currentNode); 
	    }
	    lv_element_4=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralArrayRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "element", lv_element_4, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)?']' 
    {
        createLeafNode(grammarAccess.getLiteralArrayAccess().getRightSquareBracketKeyword_3(), null); 
    }
);





// Entry rule entryRuleLiteralObject
entryRuleLiteralObject returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLiteralObjectRule(), currentNode); }
	 iv_ruleLiteralObject=ruleLiteralObject 
	 { $current=$iv_ruleLiteralObject.current; } 
	 EOF 
;

// Rule LiteralObject
ruleLiteralObject returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getLiteralObjectAccess().getLiteralObjectAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLiteralObjectAccess().getLiteralObjectAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'{' 
    {
        createLeafNode(grammarAccess.getLiteralObjectAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getLiteralObjectAccess().getFeaturesFeatureParserRuleCall_2_0_0(), currentNode); 
	    }
	    lv_features_2=ruleFeature 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralObjectRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "features", lv_features_2, "Feature", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getLiteralObjectAccess().getCommaKeyword_2_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getLiteralObjectAccess().getFeaturesFeatureParserRuleCall_2_1_1_0(), currentNode); 
	    }
	    lv_features_4=ruleFeature 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralObjectRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "features", lv_features_4, "Feature", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)?'}' 
    {
        createLeafNode(grammarAccess.getLiteralObjectAccess().getRightCurlyBracketKeyword_3(), null); 
    }
);





// Entry rule entryRuleLiteralFunction
entryRuleLiteralFunction returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLiteralFunctionRule(), currentNode); }
	 iv_ruleLiteralFunction=ruleLiteralFunction 
	 { $current=$iv_ruleLiteralFunction.current; } 
	 EOF 
;

// Rule LiteralFunction
ruleLiteralFunction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getLiteralFunctionAccess().getLiteralFunctionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLiteralFunctionAccess().getLiteralFunctionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)('function' 
    {
        createLeafNode(grammarAccess.getLiteralFunctionAccess().getFunctionKeyword_1_0(), null); 
    }

    |'fun' 
    {
        createLeafNode(grammarAccess.getLiteralFunctionAccess().getFunKeyword_1_1(), null); 
    }
)'(' 
    {
        createLeafNode(grammarAccess.getLiteralFunctionAccess().getLeftParenthesisKeyword_2(), null); 
    }
((	
	
	    lv_parameters_4=	RULE_ID
	{
		createLeafNode(grammarAccess.getLiteralFunctionAccess().getParametersIDTerminalRuleCall_3_0_0(), "parameters"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "parameters", lv_parameters_4, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getLiteralFunctionAccess().getCommaKeyword_3_1_0(), null); 
    }
(	
	
	    lv_parameters_6=	RULE_ID
	{
		createLeafNode(grammarAccess.getLiteralFunctionAccess().getParametersIDTerminalRuleCall_3_1_1_0(), "parameters"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "parameters", lv_parameters_6, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))*)')' 
    {
        createLeafNode(grammarAccess.getLiteralFunctionAccess().getRightParenthesisKeyword_4(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getLiteralFunctionAccess().getLeftCurlyBracketKeyword_5(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getLiteralFunctionAccess().getStatementsStatementsParserRuleCall_6_0(), currentNode); 
	    }
	    lv_statements_9=ruleStatements 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "statements", lv_statements_9, "Statements", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'}' 
    {
        createLeafNode(grammarAccess.getLiteralFunctionAccess().getRightCurlyBracketKeyword_7(), null); 
    }
);





// Entry rule entryRuleFeature
entryRuleFeature returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFeatureRule(), currentNode); }
	 iv_ruleFeature=ruleFeature 
	 { $current=$iv_ruleFeature.current; } 
	 EOF 
;

// Rule Feature
ruleFeature returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getFeatureAccess().getFeatureAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getFeatureAccess().getFeatureAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_name_1=(	RULE_ID
	{
		createLeafNode(grammarAccess.getFeatureAccess().getNameIDTerminalRuleCall_1_0_0(), "name"); 
	}

    |	RULE_PID
	{
		createLeafNode(grammarAccess.getFeatureAccess().getNamePIDTerminalRuleCall_1_0_1(), "name"); 
	}

    |	RULE_STRING
	{
		createLeafNode(grammarAccess.getFeatureAccess().getNameSTRINGTerminalRuleCall_1_0_2(), "name"); 
	}
)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFeatureRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)':' 
    {
        createLeafNode(grammarAccess.getFeatureAccess().getColonKeyword_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFeatureAccess().getValueExpressionParserRuleCall_3_0(), currentNode); 
	    }
	    lv_value_3=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFeatureRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_3, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleValueLiteral
entryRuleValueLiteral returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getValueLiteralRule(), currentNode); }
	 iv_ruleValueLiteral=ruleValueLiteral 
	 { $current=$iv_ruleValueLiteral.current; } 
	 EOF 
;

// Rule ValueLiteral
ruleValueLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getValueLiteralAccess().getBooleanLiteralParserRuleCall_0(), currentNode); 
    }
    this_BooleanLiteral_0=ruleBooleanLiteral
    { 
        $current = $this_BooleanLiteral_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueLiteralAccess().getIntegerLiteralParserRuleCall_1(), currentNode); 
    }
    this_IntegerLiteral_1=ruleIntegerLiteral
    { 
        $current = $this_IntegerLiteral_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueLiteralAccess().getNullLiteralParserRuleCall_2(), currentNode); 
    }
    this_NullLiteral_2=ruleNullLiteral
    { 
        $current = $this_NullLiteral_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueLiteralAccess().getUndefinedLiteralParserRuleCall_3(), currentNode); 
    }
    this_UndefinedLiteral_3=ruleUndefinedLiteral
    { 
        $current = $this_UndefinedLiteral_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueLiteralAccess().getStringLiteralParserRuleCall_4(), currentNode); 
    }
    this_StringLiteral_4=ruleStringLiteral
    { 
        $current = $this_StringLiteral_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueLiteralAccess().getRealLiteralParserRuleCall_5(), currentNode); 
    }
    this_RealLiteral_5=ruleRealLiteral
    { 
        $current = $this_RealLiteral_5.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueLiteralAccess().getQueryLiteralParserRuleCall_6(), currentNode); 
    }
    this_QueryLiteral_6=ruleQueryLiteral
    { 
        $current = $this_QueryLiteral_6.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBooleanLiteralRule(), currentNode); }
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current; } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_val_1=('true' 
    {
        createLeafNode(grammarAccess.getBooleanLiteralAccess().getValTrueKeyword_1_0_0(), "val"); 
    }


    |'false' 
    {
        createLeafNode(grammarAccess.getBooleanLiteralAccess().getValFalseKeyword_1_0_1(), "val"); 
    }

)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "val", /* lv_val_1 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getIntegerLiteralRule(), currentNode); }
	 iv_ruleIntegerLiteral=ruleIntegerLiteral 
	 { $current=$iv_ruleIntegerLiteral.current; } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
    { 
        temp=factory.create(grammarAccess.getIntegerLiteralAccess().getIntegerLiteralAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getIntegerLiteralAccess().getIntegerLiteralAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_ival_1=	RULE_INT
	{
		createLeafNode(grammarAccess.getIntegerLiteralAccess().getIvalINTTerminalRuleCall_0_1_0(), "ival"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "ival", lv_ival_1, "INT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))
    |(	
	
	    lv_sval_2=	RULE_HEX
	{
		createLeafNode(grammarAccess.getIntegerLiteralAccess().getSvalHEXTerminalRuleCall_1_0(), "sval"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "sval", lv_sval_2, "HEX", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleNullLiteral
entryRuleNullLiteral returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getNullLiteralRule(), currentNode); }
	 iv_ruleNullLiteral=ruleNullLiteral 
	 { $current=$iv_ruleNullLiteral.current; } 
	 EOF 
;

// Rule NullLiteral
ruleNullLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getNullLiteralAccess().getNullLiteralAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getNullLiteralAccess().getNullLiteralAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_val_1='null' 
    {
        createLeafNode(grammarAccess.getNullLiteralAccess().getValNullKeyword_1_0(), "val"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNullLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "val", /* lv_val_1 */ input.LT(-1), "null", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleUndefinedLiteral
entryRuleUndefinedLiteral returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getUndefinedLiteralRule(), currentNode); }
	 iv_ruleUndefinedLiteral=ruleUndefinedLiteral 
	 { $current=$iv_ruleUndefinedLiteral.current; } 
	 EOF 
;

// Rule UndefinedLiteral
ruleUndefinedLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getUndefinedLiteralAccess().getUndefinedLiteralAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getUndefinedLiteralAccess().getUndefinedLiteralAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_val_1='undefined' 
    {
        createLeafNode(grammarAccess.getUndefinedLiteralAccess().getValUndefinedKeyword_1_0(), "val"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUndefinedLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "val", /* lv_val_1 */ input.LT(-1), "undefined", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getStringLiteralRule(), currentNode); }
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current; } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getStringLiteralAccess().getStringLiteralAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getStringLiteralAccess().getStringLiteralAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_val_1=	RULE_STRING
	{
		createLeafNode(grammarAccess.getStringLiteralAccess().getValSTRINGTerminalRuleCall_1_0(), "val"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "val", lv_val_1, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleRealLiteral
entryRuleRealLiteral returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRealLiteralRule(), currentNode); }
	 iv_ruleRealLiteral=ruleRealLiteral 
	 { $current=$iv_ruleRealLiteral.current; } 
	 EOF 
;

// Rule RealLiteral
ruleRealLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getRealLiteralAccess().getRealLiteralAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getRealLiteralAccess().getRealLiteralAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRealLiteralAccess().getValRealValueParserRuleCall_1_0(), currentNode); 
	    }
	    lv_val_1=ruleRealValue 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRealLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "val", lv_val_1, "RealValue", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleRealValue
entryRuleRealValue returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRealValueRule(), currentNode); } 
	 iv_ruleRealValue=ruleRealValue 
	 { $current=$iv_ruleRealValue.current.getText(); }  
	 EOF 
;

// Rule RealValue
ruleRealValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
    this_REAL_0=RULE_REAL    {
		$current.merge(this_REAL_0);
    }

    { 
    createLeafNode(grammarAccess.getRealValueAccess().getREALTerminalRuleCall(), null); 
    }

    ;





// Entry rule entryRuleRegexpLiteral
entryRuleRegexpLiteral returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRegexpLiteralRule(), currentNode); }
	 iv_ruleRegexpLiteral=ruleRegexpLiteral 
	 { $current=$iv_ruleRegexpLiteral.current; } 
	 EOF 
;

// Rule RegexpLiteral
ruleRegexpLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getRegexpLiteralAccess().getRegexpLiteralAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getRegexpLiteralAccess().getRegexpLiteralAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_val_1=	RULE_REGEX
	{
		createLeafNode(grammarAccess.getRegexpLiteralAccess().getValREGEXTerminalRuleCall_1_0(), "val"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRegexpLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "val", lv_val_1, "REGEX", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleQueryLiteral
entryRuleQueryLiteral returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getQueryLiteralRule(), currentNode); }
	 iv_ruleQueryLiteral=ruleQueryLiteral 
	 { $current=$iv_ruleQueryLiteral.current; } 
	 EOF 
;

// Rule QueryLiteral
ruleQueryLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getQueryLiteralAccess().getQueryLiteralAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getQueryLiteralAccess().getQueryLiteralAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'query' 
    {
        createLeafNode(grammarAccess.getQueryLiteralAccess().getQueryKeyword_1(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getQueryLiteralAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getQueryLiteralAccess().getValAdvicePathParserRuleCall_3_0(), currentNode); 
	    }
	    lv_val_3=ruleAdvicePath 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQueryLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "val", lv_val_3, "AdvicePath", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'}' 
    {
        createLeafNode(grammarAccess.getQueryLiteralAccess().getRightCurlyBracketKeyword_4(), null); 
    }
);





// Entry rule entryRuleParanthesizedExpression
entryRuleParanthesizedExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getParanthesizedExpressionRule(), currentNode); }
	 iv_ruleParanthesizedExpression=ruleParanthesizedExpression 
	 { $current=$iv_ruleParanthesizedExpression.current; } 
	 EOF 
;

// Rule ParanthesizedExpression
ruleParanthesizedExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('(' 
    {
        createLeafNode(grammarAccess.getParanthesizedExpressionAccess().getLeftParenthesisKeyword_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getParanthesizedExpressionAccess().getExpressionParserRuleCall_1(), currentNode); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        currentNode = currentNode.getParent();
    }
')' 
    {
        createLeafNode(grammarAccess.getParanthesizedExpressionAccess().getRightParenthesisKeyword_2(), null); 
    }
);





// Entry rule entryRuleVersion
entryRuleVersion returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getVersionRule(), currentNode); }
	 iv_ruleVersion=ruleVersion 
	 { $current=$iv_ruleVersion.current; } 
	 EOF 
;

// Rule Version
ruleVersion returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_original_0=	RULE_STRING
	{
		createLeafNode(grammarAccess.getVersionAccess().getOriginalSTRINGTerminalRuleCall_0_0(), "original"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVersionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "original", lv_original_0, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getVersionAccess().getOriginalAlfanumSymParserRuleCall_1_0(), currentNode); 
	    }
	    lv_original_1=ruleAlfanumSym 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVersionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "original", lv_original_1, "AlfanumSym", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleVersionRange
entryRuleVersionRange returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getVersionRangeRule(), currentNode); }
	 iv_ruleVersionRange=ruleVersionRange 
	 { $current=$iv_ruleVersionRange.current; } 
	 EOF 
;

// Rule VersionRange
ruleVersionRange returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((	
	
	    lv_minLimit_0=('[' 
    {
        createLeafNode(grammarAccess.getVersionRangeAccess().getMinLimitLeftSquareBracketKeyword_0_0_0_0(), "minLimit"); 
    }


    |'(' 
    {
        createLeafNode(grammarAccess.getVersionRangeAccess().getMinLimitLeftParenthesisKeyword_0_0_0_1(), "minLimit"); 
    }

)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVersionRangeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "minLimit", /* lv_minLimit_0 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getVersionRangeAccess().getMinVersionParserRuleCall_0_1_0(), currentNode); 
	    }
	    lv_min_1=ruleVersion 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVersionRangeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "min", lv_min_1, "Version", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getVersionRangeAccess().getCommaKeyword_0_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getVersionRangeAccess().getMaxVersionParserRuleCall_0_2_1_0(), currentNode); 
	    }
	    lv_max_3=ruleVersion 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVersionRangeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "max", lv_max_3, "Version", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?(	
	
	    lv_maxLimit_4=(']' 
    {
        createLeafNode(grammarAccess.getVersionRangeAccess().getMaxLimitRightSquareBracketKeyword_0_3_0_0(), "maxLimit"); 
    }


    |')' 
    {
        createLeafNode(grammarAccess.getVersionRangeAccess().getMaxLimitRightParenthesisKeyword_0_3_0_1(), "maxLimit"); 
    }

)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVersionRangeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "maxLimit", /* lv_maxLimit_4 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getVersionRangeAccess().getMinVersionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_min_5=ruleVersion 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVersionRangeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "min", lv_min_5, "Version", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getQualifiedNameRule(), currentNode); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
		myHiddenTokenState.restore();
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0(), null); 
    }
(    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    createLeafNode(grammarAccess.getQualifiedNameAccess().getINTTerminalRuleCall_1_0(), null); 
    }

    |    this_HEX_2=RULE_HEX    {
		$current.merge(this_HEX_2);
    }

    { 
    createLeafNode(grammarAccess.getQualifiedNameAccess().getHEXTerminalRuleCall_1_1(), null); 
    }

    |    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    createLeafNode(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_2(), null); 
    }
)*(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_2_0(), null); 
    }
    this_ID_5=RULE_ID    {
		$current.merge(this_ID_5);
    }

    { 
    createLeafNode(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_2_1(), null); 
    }
(    this_INT_6=RULE_INT    {
		$current.merge(this_INT_6);
    }

    { 
    createLeafNode(grammarAccess.getQualifiedNameAccess().getINTTerminalRuleCall_2_2_0(), null); 
    }

    |    this_HEX_7=RULE_HEX    {
		$current.merge(this_HEX_7);
    }

    { 
    createLeafNode(grammarAccess.getQualifiedNameAccess().getHEXTerminalRuleCall_2_2_1(), null); 
    }

    |    this_ID_8=RULE_ID    {
		$current.merge(this_ID_8);
    }

    { 
    createLeafNode(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_2_2_2(), null); 
    }
)*)*
    { 
        currentNode=createCompositeNode(grammarAccess.getQualifiedNameAccess().getHIDDENBUGParserRuleCall_3(), currentNode); 
    }
    this_HIDDENBUG_9=ruleHIDDENBUG    {
		$current.merge(this_HIDDENBUG_9);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleHIDDENBUG
entryRuleHIDDENBUG returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getHIDDENBUGRule(), currentNode); } 
	 iv_ruleHIDDENBUG=ruleHIDDENBUG 
	 { $current=$iv_ruleHIDDENBUG.current.getText(); }  
	 EOF 
;

// Rule HIDDENBUG
ruleHIDDENBUG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT", "RULE_ML_COMMENT");
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
		myHiddenTokenState.restore();
    }:
(
	kw='~~~~~' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getHIDDENBUGAccess().getTildeTildeTildeTildeTildeKeyword(), null); 
    }
)?
    ;







// Entry rule entryRulePropertyName
entryRulePropertyName returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPropertyNameRule(), currentNode); } 
	 iv_rulePropertyName=rulePropertyName 
	 { $current=$iv_rulePropertyName.current.getText(); }  
	 EOF 
;

// Rule PropertyName
rulePropertyName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
    this_PID_0=RULE_PID    {
		$current.merge(this_PID_0);
    }

    { 
    createLeafNode(grammarAccess.getPropertyNameAccess().getPIDTerminalRuleCall(), null); 
    }

    ;





// Entry rule entryRuleEscapedQualifiedName
entryRuleEscapedQualifiedName returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getEscapedQualifiedNameRule(), currentNode); } 
	 iv_ruleEscapedQualifiedName=ruleEscapedQualifiedName 
	 { $current=$iv_ruleEscapedQualifiedName.current.getText(); }  
	 EOF 
;

// Rule EscapedQualifiedName
ruleEscapedQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    createLeafNode(grammarAccess.getEscapedQualifiedNameAccess().getSTRINGTerminalRuleCall_0(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getEscapedQualifiedNameAccess().getQualifiedNameParserRuleCall_1(), currentNode); 
    }
    this_QualifiedName_1=ruleQualifiedName    {
		$current.merge(this_QualifiedName_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleInterfaceName
entryRuleInterfaceName returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getInterfaceNameRule(), currentNode); } 
	 iv_ruleInterfaceName=ruleInterfaceName 
	 { $current=$iv_ruleInterfaceName.current.getText(); }  
	 EOF 
;

// Rule InterfaceName
ruleInterfaceName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getInterfaceNameAccess().getQualifiedNameParserRuleCall(), currentNode); 
    }
    this_QualifiedName_0=ruleQualifiedName    {
		$current.merge(this_QualifiedName_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    ;





// Entry rule entryRuleCompoundName
entryRuleCompoundName returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCompoundNameRule(), currentNode); } 
	 iv_ruleCompoundName=ruleCompoundName 
	 { $current=$iv_ruleCompoundName.current.getText(); }  
	 EOF 
;

// Rule CompoundName
ruleCompoundName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getCompoundNameAccess().getEscapedQualifiedNameParserRuleCall_0(), currentNode); 
    }
    this_EscapedQualifiedName_0=ruleEscapedQualifiedName    {
		$current.merge(this_EscapedQualifiedName_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

	kw='/' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getCompoundNameAccess().getSolidusKeyword_1(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getCompoundNameAccess().getEscapedQualifiedNameParserRuleCall_2(), currentNode); 
    }
    this_EscapedQualifiedName_2=ruleEscapedQualifiedName    {
		$current.merge(this_EscapedQualifiedName_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleUnitName
entryRuleUnitName returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getUnitNameRule(), currentNode); } 
	 iv_ruleUnitName=ruleUnitName 
	 { $current=$iv_ruleUnitName.current.getText(); }  
	 EOF 
;

// Rule UnitName
ruleUnitName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getUnitNameAccess().getEscapedQualifiedNameParserRuleCall(), currentNode); 
    }
    this_EscapedQualifiedName_0=ruleEscapedQualifiedName    {
		$current.merge(this_EscapedQualifiedName_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    ;





// Entry rule entryRulePartName
entryRulePartName returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPartNameRule(), currentNode); } 
	 iv_rulePartName=rulePartName 
	 { $current=$iv_rulePartName.current.getText(); }  
	 EOF 
;

// Rule PartName
rulePartName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getPartNameAccess().getEscapedQualifiedNameParserRuleCall(), currentNode); 
    }
    this_EscapedQualifiedName_0=ruleEscapedQualifiedName    {
		$current.merge(this_EscapedQualifiedName_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    ;





// Entry rule entryRuleSeparator
entryRuleSeparator returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSeparatorRule(), currentNode); } 
	 iv_ruleSeparator=ruleSeparator 
	 { $current=$iv_ruleSeparator.current.getText(); }  
	 EOF 
;

// Rule Separator
ruleSeparator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getFullStopKeyword_0(), null); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getHyphenMinusKeyword_1(), null); 
    }

    |
	kw='!' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getExclamationMarkKeyword_2(), null); 
    }

    |
	kw='@' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getCommercialAtKeyword_3(), null); 
    }

    |
	kw='$' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getDollarSignKeyword_4(), null); 
    }

    |
	kw='%' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getPercentSignKeyword_5(), null); 
    }

    |
	kw='&' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getAmpersandKeyword_6(), null); 
    }

    |
	kw='+' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getPlusSignKeyword_7(), null); 
    }

    |
	kw='=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getEqualsSignKeyword_8(), null); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getAsteriskKeyword_9(), null); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getLessThanSignKeyword_10(), null); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getGreaterThanSignKeyword_11(), null); 
    }

    |
	kw=':' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getColonKeyword_12(), null); 
    }

    |
	kw='?' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getQuestionMarkKeyword_13(), null); 
    }
)
    ;





// Entry rule entryRuleAlfanumSym
entryRuleAlfanumSym returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAlfanumSymRule(), currentNode); } 
	 iv_ruleAlfanumSym=ruleAlfanumSym 
	 { $current=$iv_ruleAlfanumSym.current.getText(); }  
	 EOF 
;

// Rule AlfanumSym
ruleAlfanumSym returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
((    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getAlfanumSymAccess().getIDTerminalRuleCall_0_0(), null); 
    }

    |    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    createLeafNode(grammarAccess.getAlfanumSymAccess().getINTTerminalRuleCall_0_1(), null); 
    }

    |    this_HEX_2=RULE_HEX    {
		$current.merge(this_HEX_2);
    }

    { 
    createLeafNode(grammarAccess.getAlfanumSymAccess().getHEXTerminalRuleCall_0_2(), null); 
    }

    |    this_REAL_3=RULE_REAL    {
		$current.merge(this_REAL_3);
    }

    { 
    createLeafNode(grammarAccess.getAlfanumSymAccess().getREALTerminalRuleCall_0_3(), null); 
    }
)(
    { 
        currentNode=createCompositeNode(grammarAccess.getAlfanumSymAccess().getSeparatorParserRuleCall_1_0(), currentNode); 
    }
    this_Separator_4=ruleSeparator    {
		$current.merge(this_Separator_4);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |    this_ID_5=RULE_ID    {
		$current.merge(this_ID_5);
    }

    { 
    createLeafNode(grammarAccess.getAlfanumSymAccess().getIDTerminalRuleCall_1_1(), null); 
    }

    |    this_INT_6=RULE_INT    {
		$current.merge(this_INT_6);
    }

    { 
    createLeafNode(grammarAccess.getAlfanumSymAccess().getINTTerminalRuleCall_1_2(), null); 
    }

    |    this_HEX_7=RULE_HEX    {
		$current.merge(this_HEX_7);
    }

    { 
    createLeafNode(grammarAccess.getAlfanumSymAccess().getHEXTerminalRuleCall_1_3(), null); 
    }

    |    this_REAL_8=RULE_REAL    {
		$current.merge(this_REAL_8);
    }

    { 
    createLeafNode(grammarAccess.getAlfanumSymAccess().getREALTerminalRuleCall_1_4(), null); 
    }
)*)
    ;





// Rule AssignmentOperator
ruleAssignmentOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getSETEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getSETEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'+=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getSET_PLUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getSET_PLUSEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'-=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getSET_MINUSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getSET_MINUSEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'*=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getSET_MULEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getSET_MULEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'/=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getSET_DIVEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getSET_DIVEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'%=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getSET_MODEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getSET_MODEnumLiteralDeclaration_5(), null); 
    }
)
    |(	'&=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getSET_ANDEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getSET_ANDEnumLiteralDeclaration_6(), null); 
    }
)
    |(	'^=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getSET_XOREnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getSET_XOREnumLiteralDeclaration_7(), null); 
    }
)
    |(	'|=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getSET_OREnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getSET_OREnumLiteralDeclaration_8(), null); 
    }
)
    |(	'<<=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getSET_LSHIFTEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getSET_LSHIFTEnumLiteralDeclaration_9(), null); 
    }
)
    |(	'>>=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getSET_RSHIFTEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getSET_RSHIFTEnumLiteralDeclaration_10(), null); 
    }
)
    |(	'>>>=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getSET_RSHIFT_0EnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getSET_RSHIFT_0EnumLiteralDeclaration_11(), null); 
    }
));



// Rule RelationalOperator
ruleRelationalOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'~=' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getEQ_MATCHESEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getEQ_MATCHESEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'==' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getEQEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getEQEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'===' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getEQ_IDENTITYEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getEQ_IDENTITYEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'!=' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getEQ_NOTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getEQ_NOTEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'!==' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getEQ_NOT_IDENTITYEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getEQ_NOT_IDENTITYEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'>=' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getEQ_GTEQEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getEQ_GTEQEnumLiteralDeclaration_5(), null); 
    }
)
    |(	'<=' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getEQ_LEEQEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getEQ_LEEQEnumLiteralDeclaration_6(), null); 
    }
)
    |(	'>' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getEQ_GTEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getEQ_GTEnumLiteralDeclaration_7(), null); 
    }
)
    |(	'<' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getEQ_LTEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getEQ_LTEnumLiteralDeclaration_8(), null); 
    }
)
    |(	'instanceof' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getEQ_INSTANCEOFEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getEQ_INSTANCEOFEnumLiteralDeclaration_9(), null); 
    }
));



// Rule SetOperator
ruleSetOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'select' 
	{
        $current = grammarAccess.getSetOperatorAccess().getSelectEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getSetOperatorAccess().getSelectEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'collect' 
	{
        $current = grammarAccess.getSetOperatorAccess().getCollectEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getSetOperatorAccess().getCollectEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'reject' 
	{
        $current = grammarAccess.getSetOperatorAccess().getRejectEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getSetOperatorAccess().getRejectEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'exists' 
	{
        $current = grammarAccess.getSetOperatorAccess().getExistsEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getSetOperatorAccess().getExistsEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'notexists' 
	{
        $current = grammarAccess.getSetOperatorAccess().getNotexistsEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getSetOperatorAccess().getNotexistsEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'foreach' 
	{
        $current = grammarAccess.getSetOperatorAccess().getForeachEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getSetOperatorAccess().getForeachEnumLiteralDeclaration_5(), null); 
    }
));



// Rule Visibility
ruleVisibility returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'public' 
	{
        $current = grammarAccess.getVisibilityAccess().getPublicEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getVisibilityAccess().getPublicEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'private' 
	{
        $current = grammarAccess.getVisibilityAccess().getPrivateEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getVisibilityAccess().getPrivateEnumLiteralDeclaration_1(), null); 
    }
));



// Rule ExecutionMode
ruleExecutionMode returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'parallel' 
	{
        $current = grammarAccess.getExecutionModeAccess().getParallelEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getExecutionModeAccess().getParallelEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'sequential' 
	{
        $current = grammarAccess.getExecutionModeAccess().getSequentialEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getExecutionModeAccess().getSequentialEnumLiteralDeclaration_1(), null); 
    }
));



RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*;

RULE_PID : '$' RULE_ID ('.' RULE_ID)*;

RULE_REGEX : '~/' ('\\' ('/'|'f'|'n'|'r'|'t'|'v'|'\\'|'.'|'*'|'+'|'?'|'w'|'W'|'s'|'S'|'d'|'D'|'b'|'|'|'{'|'}'|'['|']'|'('|')'|'0'..'7' '0'..'7' '0'..'7'|'x' ('0'..'9'|'a'..'f'|'A'..'F') ('0'..'9'|'a'..'f'|'A'..'F')|'c' 'A'..'Z')|~(('\\'|'/'|' '|'\t'|'\r'|'\n')))* '/' ('g'|'m'|'i')?;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'x'|'0'|'"'|'\''|'\\')|~(('\\'|'"'|'\r'|'\n')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'x'|'0'|'"'|'\''|'\\')|~(('\\'|'\''|'\r'|'\n')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_HEX : '0' ('x'|'X') ('0'..'9'|'a'..'f'|'A'..'F')+;

RULE_INT : ('0'..'9')+;

RULE_REAL : (RULE_INT '.' RULE_INT|RULE_INT '.'|'.' RULE_INT|RULE_INT) (('e'|'E') ('-'|'+') RULE_INT)?;

RULE_ANY_OTHER : .;


