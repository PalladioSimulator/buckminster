/*
* generated by Xtext
*/

package org.eclipse.b3.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class BeeLangGrammarAccess implements IGrammarAccess {
	
	
	public class BeeModelElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BeeModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyUnitParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//BeeModel:
		//  imports+=Import* body=Unit;
		public ParserRule getRule() { return rule; }

		//imports+=Import* body=Unit
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//body=Unit
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }

		//Unit
		public RuleCall getBodyUnitParserRuleCall_1_0() { return cBodyUnitParserRuleCall_1_0; }
	}

	public class ImportElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReexportAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cReexportReexportKeyword_0_0 = (Keyword)cReexportAssignment_0.eContents().get(0);
		private final Keyword cImportKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cImporterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cImporterAlternatives_2_0 = (Alternatives)cImporterAssignment_2.eContents().get(0);
		private final RuleCall cImporterJavaImporterParserRuleCall_2_0_0 = (RuleCall)cImporterAlternatives_2_0.eContents().get(0);
		private final RuleCall cImporterNativeImporterParserRuleCall_2_0_1 = (RuleCall)cImporterAlternatives_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNameSpaceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameSpaceIDTerminalRuleCall_3_1_0 = (RuleCall)cNameSpaceAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Import:
		//  reexport?="reexport"? "import" importer=( JavaImporter | NativeImporter ) ("as"
		//  nameSpace=ID)? ";";
		public ParserRule getRule() { return rule; }

		//reexport?="reexport"? "import" importer=( JavaImporter | NativeImporter ) ("as"
		//nameSpace=ID)? ";"
		public Group getGroup() { return cGroup; }

		//reexport?="reexport"?
		public Assignment getReexportAssignment_0() { return cReexportAssignment_0; }

		//"reexport"
		public Keyword getReexportReexportKeyword_0_0() { return cReexportReexportKeyword_0_0; }

		//"import"
		public Keyword getImportKeyword_1() { return cImportKeyword_1; }

		//importer=( JavaImporter | NativeImporter )
		public Assignment getImporterAssignment_2() { return cImporterAssignment_2; }

		//JavaImporter|NativeImporter
		public Alternatives getImporterAlternatives_2_0() { return cImporterAlternatives_2_0; }

		//JavaImporter
		public RuleCall getImporterJavaImporterParserRuleCall_2_0_0() { return cImporterJavaImporterParserRuleCall_2_0_0; }

		//NativeImporter
		public RuleCall getImporterNativeImporterParserRuleCall_2_0_1() { return cImporterNativeImporterParserRuleCall_2_0_1; }

		//("as" nameSpace=ID)?
		public Group getGroup_3() { return cGroup_3; }

		//"as"
		public Keyword getAsKeyword_3_0() { return cAsKeyword_3_0; }

		//nameSpace=ID
		public Assignment getNameSpaceAssignment_3_1() { return cNameSpaceAssignment_3_1; }

		//ID
		public RuleCall getNameSpaceIDTerminalRuleCall_3_1_0() { return cNameSpaceIDTerminalRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class JavaImporterElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JavaImporter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cPackageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cPackageFullStopAsteriskKeyword_1_0 = (Keyword)cPackageAssignment_1.eContents().get(0);
		
		//JavaImporter:
		//  name=QualifiedName package?=".*"?;
		public ParserRule getRule() { return rule; }

		//name=QualifiedName package?=".*"?
		public Group getGroup() { return cGroup; }

		//name=QualifiedName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_0() { return cNameQualifiedNameParserRuleCall_0_0; }

		//package?=".*"?
		public Assignment getPackageAssignment_1() { return cPackageAssignment_1; }

		//".*"
		public Keyword getPackageFullStopAsteriskKeyword_1_0() { return cPackageFullStopAsteriskKeyword_1_0; }
	}

	public class NativeImporterElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NativeImporter");
		private final Assignment cUriStringAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cUriStringSTRINGTerminalRuleCall_0 = (RuleCall)cUriStringAssignment.eContents().get(0);
		
		//NativeImporter:
		//  uriString=STRING; 
		//          
		//		
		/// * UNIT - the body (compare to java class)
		// * /
		public ParserRule getRule() { return rule; }

		//uriString=STRING
		public Assignment getUriStringAssignment() { return cUriStringAssignment; }

		//STRING
		public RuleCall getUriStringSTRINGTerminalRuleCall_0() { return cUriStringSTRINGTerminalRuleCall_0; }
	}

	public class UnitElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Unit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExecutionModeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExecutionModeExecutionModeEnumRuleCall_0_0 = (RuleCall)cExecutionModeAssignment_0.eContents().get(0);
		private final Keyword cUnitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameUnitNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cVersionKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVersionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVersionVersionParserRuleCall_3_1_0 = (RuleCall)cVersionAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cImplementsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cImplementsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cImplementsInterfaceNameParserRuleCall_4_1_0 = (RuleCall)cImplementsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cImplementsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cImplementsInterfaceNameParserRuleCall_4_2_1_0 = (RuleCall)cImplementsAssignment_4_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cPropertiesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cCompoundPropertyOperationAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cCompoundPropertyOperationNamedPropertyStatementsParserRuleCall_6_1_0 = (RuleCall)cCompoundPropertyOperationAssignment_6_1.eContents().get(0);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cAlternatives_7.eContents().get(0);
		private final Keyword cProvidesKeyword_7_0_0 = (Keyword)cGroup_7_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_0_1 = (Keyword)cGroup_7_0.eContents().get(1);
		private final Group cGroup_7_0_2 = (Group)cGroup_7_0.eContents().get(2);
		private final Assignment cProvidedCapabilitiesAssignment_7_0_2_0 = (Assignment)cGroup_7_0_2.eContents().get(0);
		private final RuleCall cProvidedCapabilitiesProvidedCapabilityParserRuleCall_7_0_2_0_0 = (RuleCall)cProvidedCapabilitiesAssignment_7_0_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_0_2_1 = (Keyword)cGroup_7_0_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7_0_3 = (Keyword)cGroup_7_0.eContents().get(3);
		private final Group cGroup_7_1 = (Group)cAlternatives_7.eContents().get(1);
		private final Keyword cProvidesKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cProvidedCapabilitiesAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cProvidedCapabilitiesProvidedCapabilityParserRuleCall_7_1_1_0 = (RuleCall)cProvidedCapabilitiesAssignment_7_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_1_2 = (Keyword)cGroup_7_1.eContents().get(2);
		private final Group cGroup_7_2 = (Group)cAlternatives_7.eContents().get(2);
		private final Keyword cRequiresKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_2_1 = (Keyword)cGroup_7_2.eContents().get(1);
		private final Group cGroup_7_2_2 = (Group)cGroup_7_2.eContents().get(2);
		private final Assignment cRequiredCapabilitiesAssignment_7_2_2_0 = (Assignment)cGroup_7_2_2.eContents().get(0);
		private final RuleCall cRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_2_2_0_0 = (RuleCall)cRequiredCapabilitiesAssignment_7_2_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_2_2_1 = (Keyword)cGroup_7_2_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7_2_3 = (Keyword)cGroup_7_2.eContents().get(3);
		private final Group cGroup_7_3 = (Group)cAlternatives_7.eContents().get(3);
		private final Keyword cRequiresKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cRequiredCapabilitiesAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final RuleCall cRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_3_1_0 = (RuleCall)cRequiredCapabilitiesAssignment_7_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_3_2 = (Keyword)cGroup_7_3.eContents().get(2);
		private final Group cGroup_7_4 = (Group)cAlternatives_7.eContents().get(4);
		private final Keyword cMetaKeyword_7_4_0 = (Keyword)cGroup_7_4.eContents().get(0);
		private final Keyword cRequiresKeyword_7_4_1 = (Keyword)cGroup_7_4.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_7_4_2 = (Keyword)cGroup_7_4.eContents().get(2);
		private final Group cGroup_7_4_3 = (Group)cGroup_7_4.eContents().get(3);
		private final Assignment cMetaRequiredCapabilitiesAssignment_7_4_3_0 = (Assignment)cGroup_7_4_3.eContents().get(0);
		private final RuleCall cMetaRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_4_3_0_0 = (RuleCall)cMetaRequiredCapabilitiesAssignment_7_4_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_4_3_1 = (Keyword)cGroup_7_4_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7_4_4 = (Keyword)cGroup_7_4.eContents().get(4);
		private final Group cGroup_7_5 = (Group)cAlternatives_7.eContents().get(5);
		private final Keyword cMetaKeyword_7_5_0 = (Keyword)cGroup_7_5.eContents().get(0);
		private final Keyword cRequiresKeyword_7_5_1 = (Keyword)cGroup_7_5.eContents().get(1);
		private final Assignment cMetaRequiredCapabilitiesAssignment_7_5_2 = (Assignment)cGroup_7_5.eContents().get(2);
		private final RuleCall cMetaRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_5_2_0 = (RuleCall)cMetaRequiredCapabilitiesAssignment_7_5_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_5_3 = (Keyword)cGroup_7_5.eContents().get(3);
		private final Group cGroup_7_6 = (Group)cAlternatives_7.eContents().get(6);
		private final Keyword cAdviceKeyword_7_6_0 = (Keyword)cGroup_7_6.eContents().get(0);
		private final Assignment cAdviceAssignment_7_6_1 = (Assignment)cGroup_7_6.eContents().get(1);
		private final RuleCall cAdviceNamedAdviceParserRuleCall_7_6_1_0 = (RuleCall)cAdviceAssignment_7_6_1.eContents().get(0);
		private final Group cGroup_7_7 = (Group)cAlternatives_7.eContents().get(7);
		private final Keyword cSequentialKeyword_7_7_0 = (Keyword)cGroup_7_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_7_1 = (Keyword)cGroup_7_7.eContents().get(1);
		private final Assignment cSynchronizationsAssignment_7_7_2 = (Assignment)cGroup_7_7.eContents().get(2);
		private final RuleCall cSynchronizationsSynchronizationParserRuleCall_7_7_2_0 = (RuleCall)cSynchronizationsAssignment_7_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_7_3 = (Keyword)cGroup_7_7.eContents().get(3);
		private final Group cGroup_7_8 = (Group)cAlternatives_7.eContents().get(8);
		private final Keyword cSequentialKeyword_7_8_0 = (Keyword)cGroup_7_8.eContents().get(0);
		private final Assignment cSynchronizationsAssignment_7_8_1 = (Assignment)cGroup_7_8.eContents().get(1);
		private final RuleCall cSynchronizationsSynchronizationParserRuleCall_7_8_1_0 = (RuleCall)cSynchronizationsAssignment_7_8_1.eContents().get(0);
		private final Assignment cBuildMethodsAssignment_7_9 = (Assignment)cAlternatives_7.eContents().get(9);
		private final RuleCall cBuildMethodsBuildMethodParserRuleCall_7_9_0 = (RuleCall)cBuildMethodsAssignment_7_9.eContents().get(0);
		private final Group cGroup_7_10 = (Group)cAlternatives_7.eContents().get(10);
		private final Keyword cRepositoriesKeyword_7_10_0 = (Keyword)cGroup_7_10.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_10_1 = (Keyword)cGroup_7_10.eContents().get(1);
		private final Assignment cRepositoryConfigurationsAssignment_7_10_2 = (Assignment)cGroup_7_10.eContents().get(2);
		private final RuleCall cRepositoryConfigurationsRepositoryConfigurationParserRuleCall_7_10_2_0 = (RuleCall)cRepositoryConfigurationsAssignment_7_10_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_10_3 = (Keyword)cGroup_7_10.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Unit returns BuildUnit hidden ( WS , ML_COMMENT , SL_COMMENT ):
		//  executionMode=ExecutionMode? "unit" name=UnitName? ("version" version=Version)? (
		//  "implements" implements+=InterfaceName ("," implements+=InterfaceName)*)? "{" (
		//  "properties" CompoundPropertyOperation+=NamedPropertyStatements)* ("provides" "{" (
		//  providedCapabilities+=ProvidedCapability ";")+ "}"|"provides" providedCapabilities
		//  +=ProvidedCapability ";"|"requires" "{" (requiredCapabilities+=RequiredCapability
		//  ";")+ "}"|"requires" requiredCapabilities+=RequiredCapability ";"|"meta" "requires"
		//  "{" (metaRequiredCapabilities+=RequiredCapability ";")+ "}"|"meta" "requires"
		//  metaRequiredCapabilities+=RequiredCapability ";"|"advice" advice+=NamedAdvice|
		//  "sequential" "{" synchronizations+=Synchronization+ "}"|"sequential"
		//  synchronizations+=Synchronization|buildMethods+=BuildMethod|"repositories" "{"
		//  repositoryConfigurations+=RepositoryConfiguration* "}")* "}"; 
		//		
		/// * UNIT - the body (compare to java class)
		// * /	
		//            
		//	    
		//	          
		//		           
		//	
		//			 //-- PROPERTIES
		//			 // goes first, because they may be used in the other clauses.
		//			 //
		//			          
		//		
		//		 	 //-- PROVIDES
		//			               
		//			          
		//			//-- REQUIRES & META REQUIRES
		//			               
		//			          
		//			                  
		//			            
		//			//--ADVICE
		//			       
		//			//--SYNCHRONIZE
		//			                  
		//			           
		//			//--BUILD METHODS
		//			         			
		//			//-- REPOSITORIES
		public ParserRule getRule() { return rule; }

		//executionMode=ExecutionMode? "unit" name=UnitName? ("version" version=Version)? (
		//"implements" implements+=InterfaceName ("," implements+=InterfaceName)*)? "{" (
		//"properties" CompoundPropertyOperation+=NamedPropertyStatements)* ("provides" "{" (
		//providedCapabilities+=ProvidedCapability ";")+ "}"|"provides" providedCapabilities
		//+=ProvidedCapability ";"|"requires" "{" (requiredCapabilities+=RequiredCapability
		//";")+ "}"|"requires" requiredCapabilities+=RequiredCapability ";"|"meta" "requires"
		//"{" (metaRequiredCapabilities+=RequiredCapability ";")+ "}"|"meta" "requires"
		//metaRequiredCapabilities+=RequiredCapability ";"|"advice" advice+=NamedAdvice|
		//"sequential" "{" synchronizations+=Synchronization+ "}"|"sequential"
		//synchronizations+=Synchronization|buildMethods+=BuildMethod|"repositories" "{"
		//repositoryConfigurations+=RepositoryConfiguration* "}")* "}" 
		//	    
		//	          
		//		           
		//	
		//			 //-- PROPERTIES
		//			 // goes first, because they may be used in the other clauses.
		//			 //
		//			          
		//		
		//		 	 //-- PROVIDES
		//			               
		//			          
		//			//-- REQUIRES & META REQUIRES
		//			               
		//			          
		//			                  
		//			            
		//			//--ADVICE
		//			       
		//			//--SYNCHRONIZE
		//			                  
		//			           
		//			//--BUILD METHODS
		//			         			
		//			//-- REPOSITORIES
		public Group getGroup() { return cGroup; }

		//executionMode=ExecutionMode?
		public Assignment getExecutionModeAssignment_0() { return cExecutionModeAssignment_0; }

		//ExecutionMode
		public RuleCall getExecutionModeExecutionModeEnumRuleCall_0_0() { return cExecutionModeExecutionModeEnumRuleCall_0_0; }

		//"unit"
		public Keyword getUnitKeyword_1() { return cUnitKeyword_1; }

		//name=UnitName?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//UnitName
		public RuleCall getNameUnitNameParserRuleCall_2_0() { return cNameUnitNameParserRuleCall_2_0; }

		//("version" version=Version)?
		public Group getGroup_3() { return cGroup_3; }

		//"version"
		public Keyword getVersionKeyword_3_0() { return cVersionKeyword_3_0; }

		//version=Version
		public Assignment getVersionAssignment_3_1() { return cVersionAssignment_3_1; }

		//Version
		public RuleCall getVersionVersionParserRuleCall_3_1_0() { return cVersionVersionParserRuleCall_3_1_0; }

		//("implements" implements+=InterfaceName ("," implements+=InterfaceName)*)?
		public Group getGroup_4() { return cGroup_4; }

		//"implements"
		public Keyword getImplementsKeyword_4_0() { return cImplementsKeyword_4_0; }

		//implements+=InterfaceName
		public Assignment getImplementsAssignment_4_1() { return cImplementsAssignment_4_1; }

		//InterfaceName
		public RuleCall getImplementsInterfaceNameParserRuleCall_4_1_0() { return cImplementsInterfaceNameParserRuleCall_4_1_0; }

		//("," implements+=InterfaceName)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//implements+=InterfaceName
		public Assignment getImplementsAssignment_4_2_1() { return cImplementsAssignment_4_2_1; }

		//InterfaceName
		public RuleCall getImplementsInterfaceNameParserRuleCall_4_2_1_0() { return cImplementsInterfaceNameParserRuleCall_4_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//("properties" CompoundPropertyOperation+=NamedPropertyStatements)*
		public Group getGroup_6() { return cGroup_6; }

		//"properties"
		public Keyword getPropertiesKeyword_6_0() { return cPropertiesKeyword_6_0; }

		//CompoundPropertyOperation+=NamedPropertyStatements
		public Assignment getCompoundPropertyOperationAssignment_6_1() { return cCompoundPropertyOperationAssignment_6_1; }

		//NamedPropertyStatements
		public RuleCall getCompoundPropertyOperationNamedPropertyStatementsParserRuleCall_6_1_0() { return cCompoundPropertyOperationNamedPropertyStatementsParserRuleCall_6_1_0; }

		//("provides" "{" (providedCapabilities+=ProvidedCapability ";")+ "}"|"provides"
		//providedCapabilities+=ProvidedCapability ";"|"requires" "{" (requiredCapabilities+=
		//RequiredCapability ";")+ "}"|"requires" requiredCapabilities+=RequiredCapability ";"
		//|"meta" "requires" "{" (metaRequiredCapabilities+=RequiredCapability ";")+ "}"|"meta"
		//"requires" metaRequiredCapabilities+=RequiredCapability ";"|"advice" advice+=
		//NamedAdvice|"sequential" "{" synchronizations+=Synchronization+ "}"|"sequential"
		//synchronizations+=Synchronization|buildMethods+=BuildMethod|"repositories" "{"
		//repositoryConfigurations+=RepositoryConfiguration* "}")* 
		//		 	 //-- PROVIDES
		//			               
		//			          
		//			//-- REQUIRES & META REQUIRES
		//			               
		//			          
		//			                  
		//			            
		//			//--ADVICE
		//			       
		//			//--SYNCHRONIZE
		//			                  
		//			           
		//			//--BUILD METHODS
		//			         			
		//			//-- REPOSITORIES
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//"provides" "{" (providedCapabilities+=ProvidedCapability ";")+ "}"
		public Group getGroup_7_0() { return cGroup_7_0; }

		//"provides"
		public Keyword getProvidesKeyword_7_0_0() { return cProvidesKeyword_7_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_0_1() { return cLeftCurlyBracketKeyword_7_0_1; }

		//(providedCapabilities+=ProvidedCapability ";")+
		public Group getGroup_7_0_2() { return cGroup_7_0_2; }

		//providedCapabilities+=ProvidedCapability
		public Assignment getProvidedCapabilitiesAssignment_7_0_2_0() { return cProvidedCapabilitiesAssignment_7_0_2_0; }

		//ProvidedCapability
		public RuleCall getProvidedCapabilitiesProvidedCapabilityParserRuleCall_7_0_2_0_0() { return cProvidedCapabilitiesProvidedCapabilityParserRuleCall_7_0_2_0_0; }

		//";"
		public Keyword getSemicolonKeyword_7_0_2_1() { return cSemicolonKeyword_7_0_2_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_0_3() { return cRightCurlyBracketKeyword_7_0_3; }

		//"provides" providedCapabilities+=ProvidedCapability ";"
		public Group getGroup_7_1() { return cGroup_7_1; }

		//"provides"
		public Keyword getProvidesKeyword_7_1_0() { return cProvidesKeyword_7_1_0; }

		//providedCapabilities+=ProvidedCapability
		public Assignment getProvidedCapabilitiesAssignment_7_1_1() { return cProvidedCapabilitiesAssignment_7_1_1; }

		//ProvidedCapability
		public RuleCall getProvidedCapabilitiesProvidedCapabilityParserRuleCall_7_1_1_0() { return cProvidedCapabilitiesProvidedCapabilityParserRuleCall_7_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_7_1_2() { return cSemicolonKeyword_7_1_2; }

		//"requires" "{" (requiredCapabilities+=RequiredCapability ";")+ "}"
		public Group getGroup_7_2() { return cGroup_7_2; }

		//"requires"
		public Keyword getRequiresKeyword_7_2_0() { return cRequiresKeyword_7_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_2_1() { return cLeftCurlyBracketKeyword_7_2_1; }

		//(requiredCapabilities+=RequiredCapability ";")+
		public Group getGroup_7_2_2() { return cGroup_7_2_2; }

		//requiredCapabilities+=RequiredCapability
		public Assignment getRequiredCapabilitiesAssignment_7_2_2_0() { return cRequiredCapabilitiesAssignment_7_2_2_0; }

		//RequiredCapability
		public RuleCall getRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_2_2_0_0() { return cRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_2_2_0_0; }

		//";"
		public Keyword getSemicolonKeyword_7_2_2_1() { return cSemicolonKeyword_7_2_2_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_2_3() { return cRightCurlyBracketKeyword_7_2_3; }

		//"requires" requiredCapabilities+=RequiredCapability ";"
		public Group getGroup_7_3() { return cGroup_7_3; }

		//"requires"
		public Keyword getRequiresKeyword_7_3_0() { return cRequiresKeyword_7_3_0; }

		//requiredCapabilities+=RequiredCapability
		public Assignment getRequiredCapabilitiesAssignment_7_3_1() { return cRequiredCapabilitiesAssignment_7_3_1; }

		//RequiredCapability
		public RuleCall getRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_3_1_0() { return cRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_7_3_2() { return cSemicolonKeyword_7_3_2; }

		//"meta" "requires" "{" (metaRequiredCapabilities+=RequiredCapability ";")+ "}"
		public Group getGroup_7_4() { return cGroup_7_4; }

		//"meta"
		public Keyword getMetaKeyword_7_4_0() { return cMetaKeyword_7_4_0; }

		//"requires"
		public Keyword getRequiresKeyword_7_4_1() { return cRequiresKeyword_7_4_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_4_2() { return cLeftCurlyBracketKeyword_7_4_2; }

		//(metaRequiredCapabilities+=RequiredCapability ";")+
		public Group getGroup_7_4_3() { return cGroup_7_4_3; }

		//metaRequiredCapabilities+=RequiredCapability
		public Assignment getMetaRequiredCapabilitiesAssignment_7_4_3_0() { return cMetaRequiredCapabilitiesAssignment_7_4_3_0; }

		//RequiredCapability
		public RuleCall getMetaRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_4_3_0_0() { return cMetaRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_4_3_0_0; }

		//";"
		public Keyword getSemicolonKeyword_7_4_3_1() { return cSemicolonKeyword_7_4_3_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_4_4() { return cRightCurlyBracketKeyword_7_4_4; }

		//"meta" "requires" metaRequiredCapabilities+=RequiredCapability ";"
		public Group getGroup_7_5() { return cGroup_7_5; }

		//"meta"
		public Keyword getMetaKeyword_7_5_0() { return cMetaKeyword_7_5_0; }

		//"requires"
		public Keyword getRequiresKeyword_7_5_1() { return cRequiresKeyword_7_5_1; }

		//metaRequiredCapabilities+=RequiredCapability
		public Assignment getMetaRequiredCapabilitiesAssignment_7_5_2() { return cMetaRequiredCapabilitiesAssignment_7_5_2; }

		//RequiredCapability
		public RuleCall getMetaRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_5_2_0() { return cMetaRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_5_2_0; }

		//";"
		public Keyword getSemicolonKeyword_7_5_3() { return cSemicolonKeyword_7_5_3; }

		//"advice" advice+=NamedAdvice
		public Group getGroup_7_6() { return cGroup_7_6; }

		//"advice"
		public Keyword getAdviceKeyword_7_6_0() { return cAdviceKeyword_7_6_0; }

		//advice+=NamedAdvice
		public Assignment getAdviceAssignment_7_6_1() { return cAdviceAssignment_7_6_1; }

		//NamedAdvice
		public RuleCall getAdviceNamedAdviceParserRuleCall_7_6_1_0() { return cAdviceNamedAdviceParserRuleCall_7_6_1_0; }

		//"sequential" "{" synchronizations+=Synchronization+ "}"
		public Group getGroup_7_7() { return cGroup_7_7; }

		//"sequential"
		public Keyword getSequentialKeyword_7_7_0() { return cSequentialKeyword_7_7_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_7_1() { return cLeftCurlyBracketKeyword_7_7_1; }

		//synchronizations+=Synchronization+
		public Assignment getSynchronizationsAssignment_7_7_2() { return cSynchronizationsAssignment_7_7_2; }

		//Synchronization
		public RuleCall getSynchronizationsSynchronizationParserRuleCall_7_7_2_0() { return cSynchronizationsSynchronizationParserRuleCall_7_7_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_7_3() { return cRightCurlyBracketKeyword_7_7_3; }

		//"sequential" synchronizations+=Synchronization
		public Group getGroup_7_8() { return cGroup_7_8; }

		//"sequential"
		public Keyword getSequentialKeyword_7_8_0() { return cSequentialKeyword_7_8_0; }

		//synchronizations+=Synchronization
		public Assignment getSynchronizationsAssignment_7_8_1() { return cSynchronizationsAssignment_7_8_1; }

		//Synchronization
		public RuleCall getSynchronizationsSynchronizationParserRuleCall_7_8_1_0() { return cSynchronizationsSynchronizationParserRuleCall_7_8_1_0; }

		//buildMethods+=BuildMethod
		public Assignment getBuildMethodsAssignment_7_9() { return cBuildMethodsAssignment_7_9; }

		//BuildMethod
		public RuleCall getBuildMethodsBuildMethodParserRuleCall_7_9_0() { return cBuildMethodsBuildMethodParserRuleCall_7_9_0; }

		//"repositories" "{" repositoryConfigurations+=RepositoryConfiguration* "}"
		public Group getGroup_7_10() { return cGroup_7_10; }

		//"repositories"
		public Keyword getRepositoriesKeyword_7_10_0() { return cRepositoriesKeyword_7_10_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_10_1() { return cLeftCurlyBracketKeyword_7_10_1; }

		//repositoryConfigurations+=RepositoryConfiguration*
		public Assignment getRepositoryConfigurationsAssignment_7_10_2() { return cRepositoryConfigurationsAssignment_7_10_2; }

		//RepositoryConfiguration
		public RuleCall getRepositoryConfigurationsRepositoryConfigurationParserRuleCall_7_10_2_0() { return cRepositoryConfigurationsRepositoryConfigurationParserRuleCall_7_10_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_10_3() { return cRightCurlyBracketKeyword_7_10_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class ProvidedCapabilityElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProvidedCapability");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cWhenKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cFilterAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFilterFilterParserRuleCall_0_1_0 = (RuleCall)cFilterAssignment_0_1.eContents().get(0);
		private final Assignment cInterfaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInterfaceQualifiedNameParserRuleCall_1_0 = (RuleCall)cInterfaceAssignment_1.eContents().get(0);
		private final Keyword cSolidusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameQualifiedNameParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSolidusKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cVersionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cVersionVersionParserRuleCall_4_1_0 = (RuleCall)cVersionAssignment_4_1.eContents().get(0);
		
		//ProvidedCapability:
		//  ("when" filter=Filter)? interface=QualifiedName "/" name=QualifiedName ("/" version=
		//  Version)?;
		public ParserRule getRule() { return rule; }

		//("when" filter=Filter)? interface=QualifiedName "/" name=QualifiedName ("/" version=
		//Version)?
		public Group getGroup() { return cGroup; }

		//("when" filter=Filter)?
		public Group getGroup_0() { return cGroup_0; }

		//"when"
		public Keyword getWhenKeyword_0_0() { return cWhenKeyword_0_0; }

		//filter=Filter
		public Assignment getFilterAssignment_0_1() { return cFilterAssignment_0_1; }

		//Filter
		public RuleCall getFilterFilterParserRuleCall_0_1_0() { return cFilterFilterParserRuleCall_0_1_0; }

		//interface=QualifiedName
		public Assignment getInterfaceAssignment_1() { return cInterfaceAssignment_1; }

		//QualifiedName
		public RuleCall getInterfaceQualifiedNameParserRuleCall_1_0() { return cInterfaceQualifiedNameParserRuleCall_1_0; }

		//"/"
		public Keyword getSolidusKeyword_2() { return cSolidusKeyword_2; }

		//name=QualifiedName
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_3_0() { return cNameQualifiedNameParserRuleCall_3_0; }

		//("/" version=Version)?
		public Group getGroup_4() { return cGroup_4; }

		//"/"
		public Keyword getSolidusKeyword_4_0() { return cSolidusKeyword_4_0; }

		//version=Version
		public Assignment getVersionAssignment_4_1() { return cVersionAssignment_4_1; }

		//Version
		public RuleCall getVersionVersionParserRuleCall_4_1_0() { return cVersionVersionParserRuleCall_4_1_0; }
	}

	public class RequiredCapabilityElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequiredCapability");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cWhenKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cFilterAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFilterFilterParserRuleCall_0_1_0 = (RuleCall)cFilterAssignment_0_1.eContents().get(0);
		private final Assignment cInterfaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInterfaceQualifiedNameParserRuleCall_1_0 = (RuleCall)cInterfaceAssignment_1.eContents().get(0);
		private final Keyword cSolidusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameQualifiedNameParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSolidusKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRangeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRangeVersionRangeParserRuleCall_4_1_0 = (RuleCall)cRangeAssignment_4_1.eContents().get(0);
		
		//RequiredCapability:
		//  ("when" filter=Filter)? interface=QualifiedName "/" name=QualifiedName ("/" range=
		//  VersionRange)?; 
		//                   
		//
		//// An optionally named sequence of property statements
		public ParserRule getRule() { return rule; }

		//("when" filter=Filter)? interface=QualifiedName "/" name=QualifiedName ("/" range=
		//VersionRange)?
		public Group getGroup() { return cGroup; }

		//("when" filter=Filter)?
		public Group getGroup_0() { return cGroup_0; }

		//"when"
		public Keyword getWhenKeyword_0_0() { return cWhenKeyword_0_0; }

		//filter=Filter
		public Assignment getFilterAssignment_0_1() { return cFilterAssignment_0_1; }

		//Filter
		public RuleCall getFilterFilterParserRuleCall_0_1_0() { return cFilterFilterParserRuleCall_0_1_0; }

		//interface=QualifiedName
		public Assignment getInterfaceAssignment_1() { return cInterfaceAssignment_1; }

		//QualifiedName
		public RuleCall getInterfaceQualifiedNameParserRuleCall_1_0() { return cInterfaceQualifiedNameParserRuleCall_1_0; }

		//"/"
		public Keyword getSolidusKeyword_2() { return cSolidusKeyword_2; }

		//name=QualifiedName
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_3_0() { return cNameQualifiedNameParserRuleCall_3_0; }

		//("/" range=VersionRange)?
		public Group getGroup_4() { return cGroup_4; }

		//"/"
		public Keyword getSolidusKeyword_4_0() { return cSolidusKeyword_4_0; }

		//range=VersionRange
		public Assignment getRangeAssignment_4_1() { return cRangeAssignment_4_1; }

		//VersionRange
		public RuleCall getRangeVersionRangeParserRuleCall_4_1_0() { return cRangeVersionRangeParserRuleCall_4_1_0; }
	}

	public class NamedPropertyStatementsElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedPropertyStatements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyCompoundPropertyOperationParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//NamedPropertyStatements returns NamedProperties:
		//  name=ID? body=CompoundPropertyOperation; 
		//
		//// An optionally named sequence of property statements
		//    
		//	             
		//	
		//
		//// Sequence of possibly filtered property statements
		public ParserRule getRule() { return rule; }

		//name=ID? body=CompoundPropertyOperation
		public Group getGroup() { return cGroup; }

		//name=ID?
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//body=CompoundPropertyOperation
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }

		//CompoundPropertyOperation
		public RuleCall getBodyCompoundPropertyOperationParserRuleCall_1_0() { return cBodyCompoundPropertyOperationParserRuleCall_1_0; }
	}

	public class CompoundPropertyOperationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompoundPropertyOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperationsPropertyOperationParserRuleCall_1_0 = (RuleCall)cOperationsAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CompoundPropertyOperation:
		//  "{" operations+=PropertyOperation* "}"; 
		//
		//// Sequence of possibly filtered property statements	
		//    
		//	           
		//	
		//
		//// For model generation, to get supertype correct
		public ParserRule getRule() { return rule; }

		//"{" operations+=PropertyOperation* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//operations+=PropertyOperation*
		public Assignment getOperationsAssignment_1() { return cOperationsAssignment_1; }

		//PropertyOperation
		public RuleCall getOperationsPropertyOperationParserRuleCall_1_0() { return cOperationsPropertyOperationParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class PropertyOperationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFilteredPropertyOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSetPropertyOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnsetPropertyOperationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCompoundPropertyOperationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PropertyOperation:
		//  FilteredPropertyOperation|SetPropertyOperation|UnsetPropertyOperation|
		//  CompoundPropertyOperation; 
		//
		//// For model generation, to get supertype correct
		public ParserRule getRule() { return rule; }

		//FilteredPropertyOperation|SetPropertyOperation|UnsetPropertyOperation|
		//CompoundPropertyOperation 
		//
		//// For model generation, to get supertype correct
		public Alternatives getAlternatives() { return cAlternatives; }

		//FilteredPropertyOperation
		public RuleCall getFilteredPropertyOperationParserRuleCall_0() { return cFilteredPropertyOperationParserRuleCall_0; }

		//SetPropertyOperation
		public RuleCall getSetPropertyOperationParserRuleCall_1() { return cSetPropertyOperationParserRuleCall_1; }

		//UnsetPropertyOperation
		public RuleCall getUnsetPropertyOperationParserRuleCall_2() { return cUnsetPropertyOperationParserRuleCall_2; }

		//CompoundPropertyOperation
		public RuleCall getCompoundPropertyOperationParserRuleCall_3() { return cCompoundPropertyOperationParserRuleCall_3; }
	}

	public class FilteredPropertyOperationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FilteredPropertyOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFilterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFilterFilterParserRuleCall_1_0 = (RuleCall)cFilterAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cBodyAlternatives_2_0 = (Alternatives)cBodyAssignment_2.eContents().get(0);
		private final RuleCall cBodySetPropertyOperationParserRuleCall_2_0_0 = (RuleCall)cBodyAlternatives_2_0.eContents().get(0);
		private final RuleCall cBodyUnsetPropertyOperationParserRuleCall_2_0_1 = (RuleCall)cBodyAlternatives_2_0.eContents().get(1);
		private final RuleCall cBodyCompoundPropertyOperationParserRuleCall_2_0_2 = (RuleCall)cBodyAlternatives_2_0.eContents().get(2);
		
		//FilteredPropertyOperation:
		//  "when" filter=Filter body=( SetPropertyOperation | UnsetPropertyOperation |
		//  CompoundPropertyOperation );
		public ParserRule getRule() { return rule; }

		//"when" filter=Filter body=( SetPropertyOperation | UnsetPropertyOperation |
		//CompoundPropertyOperation )
		public Group getGroup() { return cGroup; }

		//"when"
		public Keyword getWhenKeyword_0() { return cWhenKeyword_0; }

		//filter=Filter
		public Assignment getFilterAssignment_1() { return cFilterAssignment_1; }

		//Filter
		public RuleCall getFilterFilterParserRuleCall_1_0() { return cFilterFilterParserRuleCall_1_0; }

		//body=( SetPropertyOperation | UnsetPropertyOperation | CompoundPropertyOperation )
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//SetPropertyOperation|UnsetPropertyOperation|CompoundPropertyOperation
		public Alternatives getBodyAlternatives_2_0() { return cBodyAlternatives_2_0; }

		//SetPropertyOperation
		public RuleCall getBodySetPropertyOperationParserRuleCall_2_0_0() { return cBodySetPropertyOperationParserRuleCall_2_0_0; }

		//UnsetPropertyOperation
		public RuleCall getBodyUnsetPropertyOperationParserRuleCall_2_0_1() { return cBodyUnsetPropertyOperationParserRuleCall_2_0_1; }

		//CompoundPropertyOperation
		public RuleCall getBodyCompoundPropertyOperationParserRuleCall_2_0_2() { return cBodyCompoundPropertyOperationParserRuleCall_2_0_2; }
	}

	public class SetPropertyOperationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetPropertyOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImmutableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cImmutableImmutableKeyword_0_0 = (Keyword)cImmutableAssignment_0.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyPropertyNameParserRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpAssignmentOperatorEnumRuleCall_2_0 = (RuleCall)cOpAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SetPropertyOperation:
		//  immutable?="immutable"? key=PropertyName op=AssignmentOperator value=Expression ";";
		public ParserRule getRule() { return rule; }

		//immutable?="immutable"? key=PropertyName op=AssignmentOperator value=Expression ";"
		public Group getGroup() { return cGroup; }

		//immutable?="immutable"?
		public Assignment getImmutableAssignment_0() { return cImmutableAssignment_0; }

		//"immutable"
		public Keyword getImmutableImmutableKeyword_0_0() { return cImmutableImmutableKeyword_0_0; }

		//key=PropertyName
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }

		//PropertyName
		public RuleCall getKeyPropertyNameParserRuleCall_1_0() { return cKeyPropertyNameParserRuleCall_1_0; }

		//op=AssignmentOperator
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }

		//AssignmentOperator
		public RuleCall getOpAssignmentOperatorEnumRuleCall_2_0() { return cOpAssignmentOperatorEnumRuleCall_2_0; }

		//value=Expression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_3_0() { return cValueExpressionParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class UnsetPropertyOperationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnsetPropertyOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnsetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyPropertyNameParserRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//UnsetPropertyOperation:
		//  "unset" key=PropertyName ";";
		public ParserRule getRule() { return rule; }

		//"unset" key=PropertyName ";"
		public Group getGroup() { return cGroup; }

		//"unset"
		public Keyword getUnsetKeyword_0() { return cUnsetKeyword_0; }

		//key=PropertyName
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }

		//PropertyName
		public RuleCall getKeyPropertyNameParserRuleCall_1_0() { return cKeyPropertyNameParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class SynchronizationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Synchronization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPartrefsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPartrefsSynchronizedPartParserRuleCall_0_0 = (RuleCall)cPartrefsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPartrefsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPartrefsSynchronizedPartParserRuleCall_1_1_0 = (RuleCall)cPartrefsAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Synchronization:
		//  partrefs+=SynchronizedPart ("," partrefs+=SynchronizedPart)+ ";"; 
		//
		// 
		//	                // at least 2
		public ParserRule getRule() { return rule; }

		//partrefs+=SynchronizedPart ("," partrefs+=SynchronizedPart)+ ";"                 // at least 2
		public Group getGroup() { return cGroup; }

		//partrefs+=SynchronizedPart
		public Assignment getPartrefsAssignment_0() { return cPartrefsAssignment_0; }

		//SynchronizedPart
		public RuleCall getPartrefsSynchronizedPartParserRuleCall_0_0() { return cPartrefsSynchronizedPartParserRuleCall_0_0; }

		//("," partrefs+=SynchronizedPart)+
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//partrefs+=SynchronizedPart
		public Assignment getPartrefsAssignment_1_1() { return cPartrefsAssignment_1_1; }

		//SynchronizedPart
		public RuleCall getPartrefsSynchronizedPartParserRuleCall_1_1_0() { return cPartrefsSynchronizedPartParserRuleCall_1_1_0; }

		//";"     // at least 2
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class SynchronizedPartElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SynchronizedPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cCompoundNameParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cNumberSignKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final RuleCall cPartNameParserRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final RuleCall cPartNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SynchronizedPart returns ecore::EString:
		//  CompoundName ("#" PartName)?|PartName; 
		//	
		//
		//	      
		//	  
		//	
		//	
		/// * PATH GROUP * /
		public ParserRule getRule() { return rule; }

		//CompoundName ("#" PartName)?|PartName 
		//	
		//
		//	      
		//	  
		//	
		//	
		/// * PATH GROUP * /
		public Alternatives getAlternatives() { return cAlternatives; }

		//CompoundName ("#" PartName)?
		public Group getGroup_0() { return cGroup_0; }

		//CompoundName
		public RuleCall getCompoundNameParserRuleCall_0_0() { return cCompoundNameParserRuleCall_0_0; }

		//("#" PartName)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"#"
		public Keyword getNumberSignKeyword_0_1_0() { return cNumberSignKeyword_0_1_0; }

		//PartName
		public RuleCall getPartNameParserRuleCall_0_1_1() { return cPartNameParserRuleCall_0_1_1; }

		//PartName
		public RuleCall getPartNameParserRuleCall_1() { return cPartNameParserRuleCall_1; }
	}

	public class PathGroupElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PathGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPathsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPathsPathVectorElementParserRuleCall_0_0 = (RuleCall)cPathsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAnnotationsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAnnotationsCompoundPropertyOperationParserRuleCall_1_1_0 = (RuleCall)cAnnotationsAssignment_1_1.eContents().get(0);
		
		//PathGroup:
		//  paths+=PathVectorElement* ("annotations" annotations=CompoundPropertyOperation)?; 
		//	
		/// * PATH GROUP * /
		public ParserRule getRule() { return rule; }

		//paths+=PathVectorElement* ("annotations" annotations=CompoundPropertyOperation)?
		public Group getGroup() { return cGroup; }

		//paths+=PathVectorElement*
		public Assignment getPathsAssignment_0() { return cPathsAssignment_0; }

		//PathVectorElement
		public RuleCall getPathsPathVectorElementParserRuleCall_0_0() { return cPathsPathVectorElementParserRuleCall_0_0; }

		//("annotations" annotations=CompoundPropertyOperation)?
		public Group getGroup_1() { return cGroup_1; }

		//"annotations"
		public Keyword getAnnotationsKeyword_1_0() { return cAnnotationsKeyword_1_0; }

		//annotations=CompoundPropertyOperation
		public Assignment getAnnotationsAssignment_1_1() { return cAnnotationsAssignment_1_1; }

		//CompoundPropertyOperation
		public RuleCall getAnnotationsCompoundPropertyOperationParserRuleCall_1_1_0() { return cAnnotationsCompoundPropertyOperationParserRuleCall_1_1_0; }
	}

	public class PathVectorElementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PathVectorElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFilteredPathVectorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBasePathVectorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnbasedPathVectorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//PathVectorElement:
		//  FilteredPathVector|BasePathVector|UnbasedPathVector;
		public ParserRule getRule() { return rule; }

		//FilteredPathVector|BasePathVector|UnbasedPathVector
		public Alternatives getAlternatives() { return cAlternatives; }

		//FilteredPathVector
		public RuleCall getFilteredPathVectorParserRuleCall_0() { return cFilteredPathVectorParserRuleCall_0; }

		//BasePathVector
		public RuleCall getBasePathVectorParserRuleCall_1() { return cBasePathVectorParserRuleCall_1; }

		//UnbasedPathVector
		public RuleCall getUnbasedPathVectorParserRuleCall_2() { return cUnbasedPathVectorParserRuleCall_2; }
	}

	public class FilteredPathVectorElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FilteredPathVector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFilterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFilterFilterParserRuleCall_1_0 = (RuleCall)cFilterAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cBodyAlternatives_2_0 = (Alternatives)cBodyAssignment_2.eContents().get(0);
		private final RuleCall cBodyBasePathVectorParserRuleCall_2_0_0 = (RuleCall)cBodyAlternatives_2_0.eContents().get(0);
		private final RuleCall cBodyUnbasedPathVectorParserRuleCall_2_0_1 = (RuleCall)cBodyAlternatives_2_0.eContents().get(1);
		private final RuleCall cBodyCompoundPathVectorParserRuleCall_2_0_2 = (RuleCall)cBodyAlternatives_2_0.eContents().get(2);
		
		//FilteredPathVector:
		//  "when" filter=Filter body=( BasePathVector | UnbasedPathVector | CompoundPathVector );
		public ParserRule getRule() { return rule; }

		//"when" filter=Filter body=( BasePathVector | UnbasedPathVector | CompoundPathVector )
		public Group getGroup() { return cGroup; }

		//"when"
		public Keyword getWhenKeyword_0() { return cWhenKeyword_0; }

		//filter=Filter
		public Assignment getFilterAssignment_1() { return cFilterAssignment_1; }

		//Filter
		public RuleCall getFilterFilterParserRuleCall_1_0() { return cFilterFilterParserRuleCall_1_0; }

		//body=( BasePathVector | UnbasedPathVector | CompoundPathVector )
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//BasePathVector|UnbasedPathVector|CompoundPathVector
		public Alternatives getBodyAlternatives_2_0() { return cBodyAlternatives_2_0; }

		//BasePathVector
		public RuleCall getBodyBasePathVectorParserRuleCall_2_0_0() { return cBodyBasePathVectorParserRuleCall_2_0_0; }

		//UnbasedPathVector
		public RuleCall getBodyUnbasedPathVectorParserRuleCall_2_0_1() { return cBodyUnbasedPathVectorParserRuleCall_2_0_1; }

		//CompoundPathVector
		public RuleCall getBodyCompoundPathVectorParserRuleCall_2_0_2() { return cBodyCompoundPathVectorParserRuleCall_2_0_2; }
	}

	public class BasePathVectorElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasePathVector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBasePathAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBasePathPathParserRuleCall_0_0 = (RuleCall)cBasePathAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cPathsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cPathsPathParserRuleCall_2_0_0 = (RuleCall)cPathsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cPathsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cPathsPathParserRuleCall_2_1_1_0 = (RuleCall)cPathsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BasePathVector returns PathVector:
		//  basePath=Path "[" (paths+=Path ("," paths+=Path)*)? "]" ";";
		public ParserRule getRule() { return rule; }

		//basePath=Path "[" (paths+=Path ("," paths+=Path)*)? "]" ";"
		public Group getGroup() { return cGroup; }

		//basePath=Path
		public Assignment getBasePathAssignment_0() { return cBasePathAssignment_0; }

		//Path
		public RuleCall getBasePathPathParserRuleCall_0_0() { return cBasePathPathParserRuleCall_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//(paths+=Path ("," paths+=Path)*)?
		public Group getGroup_2() { return cGroup_2; }

		//paths+=Path
		public Assignment getPathsAssignment_2_0() { return cPathsAssignment_2_0; }

		//Path
		public RuleCall getPathsPathParserRuleCall_2_0_0() { return cPathsPathParserRuleCall_2_0_0; }

		//("," paths+=Path)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//paths+=Path
		public Assignment getPathsAssignment_2_1_1() { return cPathsAssignment_2_1_1; }

		//Path
		public RuleCall getPathsPathParserRuleCall_2_1_1_0() { return cPathsPathParserRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class UnbasedPathVectorElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnbasedPathVector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPathsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPathsPathParserRuleCall_0_0 = (RuleCall)cPathsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPathsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPathsPathParserRuleCall_1_1_0 = (RuleCall)cPathsAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//UnbasedPathVector returns PathVector:
		//  paths+=Path ("," paths+=Path)* ";";
		public ParserRule getRule() { return rule; }

		//paths+=Path ("," paths+=Path)* ";"
		public Group getGroup() { return cGroup; }

		//paths+=Path
		public Assignment getPathsAssignment_0() { return cPathsAssignment_0; }

		//Path
		public RuleCall getPathsPathParserRuleCall_0_0() { return cPathsPathParserRuleCall_0_0; }

		//("," paths+=Path)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//paths+=Path
		public Assignment getPathsAssignment_1_1() { return cPathsAssignment_1_1; }

		//Path
		public RuleCall getPathsPathParserRuleCall_1_1_0() { return cPathsPathParserRuleCall_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class CompoundPathVectorElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompoundPathVector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyPathVectorElementParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CompoundPathVector:
		//  "{" body+=PathVectorElement* "}"; 
		//	
		//            
		//
		/// *
		// * A path can be written without quotes if it consists of safe chars 
		// * TODO: repace use of ID with better definition.
		// * TODO: Validation of path syntax (MS, n*x) ?
		// * /
		public ParserRule getRule() { return rule; }

		//"{" body+=PathVectorElement* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//body+=PathVectorElement*
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }

		//PathVectorElement
		public RuleCall getBodyPathVectorElementParserRuleCall_1_0() { return cBodyPathVectorElementParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class PathElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Path");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cQualifiedNameParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cSolidusKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final RuleCall cQualifiedNameParserRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		private final Keyword cSolidusKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Path returns ecore::EString hidden ( ):
		//  STRING|"/"? QualifiedName ("/" QualifiedName)* "/"?; 
		//
		/// *
		// * A path can be written without quotes if it consists of safe chars 
		// * TODO: repace use of ID with better definition.
		// * TODO: Validation of path syntax (MS, n*x) ?
		// * /
		//  
		//	  
		//	            // HIDDENBUG
		public ParserRule getRule() { return rule; }

		//STRING|"/"? QualifiedName ("/" QualifiedName)* "/"? 
		//
		/// *
		// * A path can be written without quotes if it consists of safe chars 
		// * TODO: repace use of ID with better definition.
		// * TODO: Validation of path syntax (MS, n*x) ?
		// * /
		//  
		//	  
		//	            // HIDDENBUG
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//"/"? QualifiedName ("/" QualifiedName)* "/"?   
		//	            // HIDDENBUG
		public Group getGroup_1() { return cGroup_1; }

		//"/"?
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_1_1() { return cQualifiedNameParserRuleCall_1_1; }

		//("/" QualifiedName)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"/"
		public Keyword getSolidusKeyword_1_2_0() { return cSolidusKeyword_1_2_0; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_1_2_1() { return cQualifiedNameParserRuleCall_1_2_1; }

		//"/"?
		public Keyword getSolidusKeyword_1_3() { return cSolidusKeyword_1_3; }
	}

	public class PrerequisiteElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Prerequisite");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Keyword cWhenKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Assignment cFilterAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cFilterFilterParserRuleCall_0_0_1_0 = (RuleCall)cFilterAssignment_0_0_1.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cAliasAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cAliasIDTerminalRuleCall_0_1_0_0 = (RuleCall)cAliasAssignment_0_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Assignment cPartReferenceAssignment_0_2_0 = (Assignment)cGroup_0_2.eContents().get(0);
		private final RuleCall cPartReferencePrerequisiteEntryParserRuleCall_0_2_0_0 = (RuleCall)cPartReferenceAssignment_0_2_0.eContents().get(0);
		private final Assignment cClosureAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cClosureClosureParserRuleCall_0_2_1_0 = (RuleCall)cClosureAssignment_0_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Prerequisite:
		//  (("when" filter=Filter)? (alias=ID "=")? (partReference=PrerequisiteEntry closure=
		//  Closure?)) ";";
		public ParserRule getRule() { return rule; }

		//(("when" filter=Filter)? (alias=ID "=")? (partReference=PrerequisiteEntry closure=
		//Closure?)) ";"
		public Group getGroup() { return cGroup; }

		//("when" filter=Filter)? (alias=ID "=")? (partReference=PrerequisiteEntry closure=
		//Closure?)
		public Group getGroup_0() { return cGroup_0; }

		//("when" filter=Filter)?
		public Group getGroup_0_0() { return cGroup_0_0; }

		//"when"
		public Keyword getWhenKeyword_0_0_0() { return cWhenKeyword_0_0_0; }

		//filter=Filter
		public Assignment getFilterAssignment_0_0_1() { return cFilterAssignment_0_0_1; }

		//Filter
		public RuleCall getFilterFilterParserRuleCall_0_0_1_0() { return cFilterFilterParserRuleCall_0_0_1_0; }

		//(alias=ID "=")?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//alias=ID
		public Assignment getAliasAssignment_0_1_0() { return cAliasAssignment_0_1_0; }

		//ID
		public RuleCall getAliasIDTerminalRuleCall_0_1_0_0() { return cAliasIDTerminalRuleCall_0_1_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1_1() { return cEqualsSignKeyword_0_1_1; }

		//partReference=PrerequisiteEntry closure=Closure?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//partReference=PrerequisiteEntry
		public Assignment getPartReferenceAssignment_0_2_0() { return cPartReferenceAssignment_0_2_0; }

		//PrerequisiteEntry
		public RuleCall getPartReferencePrerequisiteEntryParserRuleCall_0_2_0_0() { return cPartReferencePrerequisiteEntryParserRuleCall_0_2_0_0; }

		//closure=Closure?
		public Assignment getClosureAssignment_0_2_1() { return cClosureAssignment_0_2_1; }

		//Closure
		public RuleCall getClosureClosureParserRuleCall_0_2_1_0() { return cClosureClosureParserRuleCall_0_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class ClosureElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Closure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cPropertiesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPropertiesCompoundPropertyOperationParserRuleCall_2_1_0 = (RuleCall)cPropertiesAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAdviceKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAdviceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAdviceCompoundAdviceParserRuleCall_3_1_0 = (RuleCall)cAdviceAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Closure:
		//  "with" "{" ("properties" properties=CompoundPropertyOperation)? ("advice" advice=
		//  CompoundAdvice)? "}";
		public ParserRule getRule() { return rule; }

		//"with" "{" ("properties" properties=CompoundPropertyOperation)? ("advice" advice=
		//CompoundAdvice)? "}"
		public Group getGroup() { return cGroup; }

		//"with"
		public Keyword getWithKeyword_0() { return cWithKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//("properties" properties=CompoundPropertyOperation)?
		public Group getGroup_2() { return cGroup_2; }

		//"properties"
		public Keyword getPropertiesKeyword_2_0() { return cPropertiesKeyword_2_0; }

		//properties=CompoundPropertyOperation
		public Assignment getPropertiesAssignment_2_1() { return cPropertiesAssignment_2_1; }

		//CompoundPropertyOperation
		public RuleCall getPropertiesCompoundPropertyOperationParserRuleCall_2_1_0() { return cPropertiesCompoundPropertyOperationParserRuleCall_2_1_0; }

		//("advice" advice=CompoundAdvice)?
		public Group getGroup_3() { return cGroup_3; }

		//"advice"
		public Keyword getAdviceKeyword_3_0() { return cAdviceKeyword_3_0; }

		//advice=CompoundAdvice
		public Assignment getAdviceAssignment_3_1() { return cAdviceAssignment_3_1; }

		//CompoundAdvice
		public RuleCall getAdviceCompoundAdviceParserRuleCall_3_1_0() { return cAdviceCompoundAdviceParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class PrerequisiteEntryElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrerequisiteEntry");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPartInSelfParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCapabilityReferencedPartParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCompoundReferencesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//PrerequisiteEntry:
		//  PartInSelf|CapabilityReferencedPart|CompoundReferences;
		public ParserRule getRule() { return rule; }

		//PartInSelf|CapabilityReferencedPart|CompoundReferences
		public Alternatives getAlternatives() { return cAlternatives; }

		//PartInSelf
		public RuleCall getPartInSelfParserRuleCall_0() { return cPartInSelfParserRuleCall_0; }

		//CapabilityReferencedPart
		public RuleCall getCapabilityReferencedPartParserRuleCall_1() { return cCapabilityReferencedPartParserRuleCall_1; }

		//CompoundReferences
		public RuleCall getCompoundReferencesParserRuleCall_2() { return cCompoundReferencesParserRuleCall_2; }
	}

	public class PartInSelfElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PartInSelf");
		private final Assignment cPartNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPartNamePartNameParserRuleCall_0 = (RuleCall)cPartNameAssignment.eContents().get(0);
		
		//PartInSelf:
		//  partName=PartName; 
		//	
		//	      // i.e. self#partName
		public ParserRule getRule() { return rule; }

		//partName=PartName      // i.e. self#partName
		public Assignment getPartNameAssignment() { return cPartNameAssignment; }

		//PartName    // i.e. self#partName
		public RuleCall getPartNamePartNameParserRuleCall_0() { return cPartNamePartNameParserRuleCall_0; }
	}

	public class CapabilityReferencedPartElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CapabilityReferencedPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cInterfaceAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cInterfaceInterfaceNameParserRuleCall_0_0_0 = (RuleCall)cInterfaceAssignment_0_0.eContents().get(0);
		private final Keyword cSolidusKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameUnitNameParserRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cSolidusKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cRangeAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cRangeVersionRangeParserRuleCall_0_3_1_0 = (RuleCall)cRangeAssignment_0_3_1.eContents().get(0);
		private final Keyword cNumberSignKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cPartNameAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cPartNamePartNameParserRuleCall_0_5_0 = (RuleCall)cPartNameAssignment_0_5.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cInterfaceAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cInterfaceInterfaceNameParserRuleCall_1_0_0 = (RuleCall)cInterfaceAssignment_1_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameUnitNameParserRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cSolidusKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cRangeAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cRangeVersionRangeParserRuleCall_1_3_1_0 = (RuleCall)cRangeAssignment_1_3_1.eContents().get(0);
		
		//CapabilityReferencedPart:
		//  interface=InterfaceName "/" name=UnitName ("/" range=VersionRange)? "#" partName=
		//  PartName|interface=InterfaceName "/" name=UnitName ("/" range=VersionRange)?;
		public ParserRule getRule() { return rule; }

		//interface=InterfaceName "/" name=UnitName ("/" range=VersionRange)? "#" partName=
		//PartName|interface=InterfaceName "/" name=UnitName ("/" range=VersionRange)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//interface=InterfaceName "/" name=UnitName ("/" range=VersionRange)? "#" partName=
		//PartName
		public Group getGroup_0() { return cGroup_0; }

		//interface=InterfaceName
		public Assignment getInterfaceAssignment_0_0() { return cInterfaceAssignment_0_0; }

		//InterfaceName
		public RuleCall getInterfaceInterfaceNameParserRuleCall_0_0_0() { return cInterfaceInterfaceNameParserRuleCall_0_0_0; }

		//"/"
		public Keyword getSolidusKeyword_0_1() { return cSolidusKeyword_0_1; }

		//name=UnitName
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }

		//UnitName
		public RuleCall getNameUnitNameParserRuleCall_0_2_0() { return cNameUnitNameParserRuleCall_0_2_0; }

		//("/" range=VersionRange)?
		public Group getGroup_0_3() { return cGroup_0_3; }

		//"/"
		public Keyword getSolidusKeyword_0_3_0() { return cSolidusKeyword_0_3_0; }

		//range=VersionRange
		public Assignment getRangeAssignment_0_3_1() { return cRangeAssignment_0_3_1; }

		//VersionRange
		public RuleCall getRangeVersionRangeParserRuleCall_0_3_1_0() { return cRangeVersionRangeParserRuleCall_0_3_1_0; }

		//"#"
		public Keyword getNumberSignKeyword_0_4() { return cNumberSignKeyword_0_4; }

		//partName=PartName
		public Assignment getPartNameAssignment_0_5() { return cPartNameAssignment_0_5; }

		//PartName
		public RuleCall getPartNamePartNameParserRuleCall_0_5_0() { return cPartNamePartNameParserRuleCall_0_5_0; }

		//interface=InterfaceName "/" name=UnitName ("/" range=VersionRange)?
		public Group getGroup_1() { return cGroup_1; }

		//interface=InterfaceName
		public Assignment getInterfaceAssignment_1_0() { return cInterfaceAssignment_1_0; }

		//InterfaceName
		public RuleCall getInterfaceInterfaceNameParserRuleCall_1_0_0() { return cInterfaceInterfaceNameParserRuleCall_1_0_0; }

		//"/"
		public Keyword getSolidusKeyword_1_1() { return cSolidusKeyword_1_1; }

		//name=UnitName
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }

		//UnitName
		public RuleCall getNameUnitNameParserRuleCall_1_2_0() { return cNameUnitNameParserRuleCall_1_2_0; }

		//("/" range=VersionRange)?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"/"
		public Keyword getSolidusKeyword_1_3_0() { return cSolidusKeyword_1_3_0; }

		//range=VersionRange
		public Assignment getRangeAssignment_1_3_1() { return cRangeAssignment_1_3_1; }

		//VersionRange
		public RuleCall getRangeVersionRangeParserRuleCall_1_3_1_0() { return cRangeVersionRangeParserRuleCall_1_3_1_0; }
	}

	public class CompoundReferencesElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompoundReferences");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPrerequisitesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrerequisitesPrerequisiteParserRuleCall_1_0 = (RuleCall)cPrerequisitesAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CompoundReferences:
		//  "{" prerequisites+=Prerequisite* "}";
		public ParserRule getRule() { return rule; }

		//"{" prerequisites+=Prerequisite* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//prerequisites+=Prerequisite*
		public Assignment getPrerequisitesAssignment_1() { return cPrerequisitesAssignment_1; }

		//Prerequisite
		public RuleCall getPrerequisitesPrerequisiteParserRuleCall_1_0() { return cPrerequisitesPrerequisiteParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class BuildMethodElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuildMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cExecutionModeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExecutionModeExecutionModeEnumRuleCall_1_0 = (RuleCall)cExecutionModeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNamePartNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cProvidesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cProvidedCapabilitiesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cProvidedCapabilitiesProvidedCapabilityParserRuleCall_3_1_0 = (RuleCall)cProvidedCapabilitiesAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cProvidedCapabilitiesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cProvidedCapabilitiesProvidedCapabilityParserRuleCall_3_2_1_0 = (RuleCall)cProvidedCapabilitiesAssignment_3_2_1.eContents().get(0);
		private final Assignment cPreConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPreConditionPreConditionParserRuleCall_4_0 = (RuleCall)cPreConditionAssignment_4.eContents().get(0);
		private final Assignment cPostConditionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPostConditionPostConditionParserRuleCall_5_0 = (RuleCall)cPostConditionAssignment_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cPropertiesKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cPropertiesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cPropertiesCompoundPropertyOperationParserRuleCall_7_1_0 = (RuleCall)cPropertiesAssignment_7_1.eContents().get(0);
		private final Assignment cAdviceAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cAdviceAdviceParserRuleCall_8_0 = (RuleCall)cAdviceAssignment_8.eContents().get(0);
		private final Assignment cGroupAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cGroupGroupParserRuleCall_9_0 = (RuleCall)cGroupAssignment_9.eContents().get(0);
		private final Assignment cLayoutAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cLayoutLayoutParserRuleCall_10_0 = (RuleCall)cLayoutAssignment_10.eContents().get(0);
		private final Assignment cStatementsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cStatementsStatementsParserRuleCall_11_0 = (RuleCall)cStatementsAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//BuildMethod:
		//  visibility=Visibility? executionMode=ExecutionMode? name=PartName ("provides"
		//  providedCapabilities+=ProvidedCapability ("," providedCapabilities+=
		//  ProvidedCapability)*)? preCondition=PreCondition? postCondition=PostCondition? "{" (
		//  "properties" properties=CompoundPropertyOperation)? advice=Advice? group=Group?
		//  layout=Layout? statements=Statements? "}";
		public ParserRule getRule() { return rule; }

		//visibility=Visibility? executionMode=ExecutionMode? name=PartName ("provides"
		//providedCapabilities+=ProvidedCapability ("," providedCapabilities+=
		//ProvidedCapability)*)? preCondition=PreCondition? postCondition=PostCondition? "{" (
		//"properties" properties=CompoundPropertyOperation)? advice=Advice? group=Group?
		//layout=Layout? statements=Statements? "}"
		public Group getGroup() { return cGroup; }

		//visibility=Visibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }

		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0; }

		//executionMode=ExecutionMode?
		public Assignment getExecutionModeAssignment_1() { return cExecutionModeAssignment_1; }

		//ExecutionMode
		public RuleCall getExecutionModeExecutionModeEnumRuleCall_1_0() { return cExecutionModeExecutionModeEnumRuleCall_1_0; }

		//name=PartName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//PartName
		public RuleCall getNamePartNameParserRuleCall_2_0() { return cNamePartNameParserRuleCall_2_0; }

		//("provides" providedCapabilities+=ProvidedCapability ("," providedCapabilities+=
		//ProvidedCapability)*)?
		public Group getGroup_3() { return cGroup_3; }

		//"provides"
		public Keyword getProvidesKeyword_3_0() { return cProvidesKeyword_3_0; }

		//providedCapabilities+=ProvidedCapability
		public Assignment getProvidedCapabilitiesAssignment_3_1() { return cProvidedCapabilitiesAssignment_3_1; }

		//ProvidedCapability
		public RuleCall getProvidedCapabilitiesProvidedCapabilityParserRuleCall_3_1_0() { return cProvidedCapabilitiesProvidedCapabilityParserRuleCall_3_1_0; }

		//("," providedCapabilities+=ProvidedCapability)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//providedCapabilities+=ProvidedCapability
		public Assignment getProvidedCapabilitiesAssignment_3_2_1() { return cProvidedCapabilitiesAssignment_3_2_1; }

		//ProvidedCapability
		public RuleCall getProvidedCapabilitiesProvidedCapabilityParserRuleCall_3_2_1_0() { return cProvidedCapabilitiesProvidedCapabilityParserRuleCall_3_2_1_0; }

		//preCondition=PreCondition?
		public Assignment getPreConditionAssignment_4() { return cPreConditionAssignment_4; }

		//PreCondition
		public RuleCall getPreConditionPreConditionParserRuleCall_4_0() { return cPreConditionPreConditionParserRuleCall_4_0; }

		//postCondition=PostCondition?
		public Assignment getPostConditionAssignment_5() { return cPostConditionAssignment_5; }

		//PostCondition
		public RuleCall getPostConditionPostConditionParserRuleCall_5_0() { return cPostConditionPostConditionParserRuleCall_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//("properties" properties=CompoundPropertyOperation)?
		public Group getGroup_7() { return cGroup_7; }

		//"properties"
		public Keyword getPropertiesKeyword_7_0() { return cPropertiesKeyword_7_0; }

		//properties=CompoundPropertyOperation
		public Assignment getPropertiesAssignment_7_1() { return cPropertiesAssignment_7_1; }

		//CompoundPropertyOperation
		public RuleCall getPropertiesCompoundPropertyOperationParserRuleCall_7_1_0() { return cPropertiesCompoundPropertyOperationParserRuleCall_7_1_0; }

		//advice=Advice?
		public Assignment getAdviceAssignment_8() { return cAdviceAssignment_8; }

		//Advice
		public RuleCall getAdviceAdviceParserRuleCall_8_0() { return cAdviceAdviceParserRuleCall_8_0; }

		//group=Group?
		public Assignment getGroupAssignment_9() { return cGroupAssignment_9; }

		//Group
		public RuleCall getGroupGroupParserRuleCall_9_0() { return cGroupGroupParserRuleCall_9_0; }

		//layout=Layout?
		public Assignment getLayoutAssignment_10() { return cLayoutAssignment_10; }

		//Layout
		public RuleCall getLayoutLayoutParserRuleCall_10_0() { return cLayoutLayoutParserRuleCall_10_0; }

		//statements=Statements?
		public Assignment getStatementsAssignment_11() { return cStatementsAssignment_11; }

		//Statements
		public RuleCall getStatementsStatementsParserRuleCall_11_0() { return cStatementsStatementsParserRuleCall_11_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}

	public class ParameterElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValExpressionParserRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//Parameter:
		//  val=Expression;
		public ParserRule getRule() { return rule; }

		//val=Expression
		public Assignment getValAssignment() { return cValAssignment; }

		//Expression
		public RuleCall getValExpressionParserRuleCall_0() { return cValExpressionParserRuleCall_0; }
	}

	public class GroupKeywordElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GroupKeyword");
		private final Keyword cInputKeyword = (Keyword)rule.eContents().get(1);
		
		//GroupKeyword returns ecore::EString:
		//  "input"; 
		//
		//        // used to be 'group'
		public ParserRule getRule() { return rule; }

		//"input"
		public Keyword getInputKeyword() { return cInputKeyword; }
	}

	public class LayoutKeywordElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LayoutKeyword");
		private final Keyword cOutputKeyword = (Keyword)rule.eContents().get(1);
		
		//LayoutKeyword returns ecore::EString:
		//  "output";   // used to be 'group'
		//      // used to be 'layout'
		public ParserRule getRule() { return rule; }

		//"output"
		public Keyword getOutputKeyword() { return cOutputKeyword; }
	}

	public class LayoutElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Layout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLayoutKeywordParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cPostConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPostConditionPostConditionParserRuleCall_1_0 = (RuleCall)cPostConditionAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyPathGroupParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Layout:
		//  LayoutKeyword postCondition=PostCondition? "{" body=PathGroup? "}";   // used to be 'layout'
		public ParserRule getRule() { return rule; }

		//LayoutKeyword postCondition=PostCondition? "{" body=PathGroup? "}"
		public Group getGroup() { return cGroup; }

		//LayoutKeyword
		public RuleCall getLayoutKeywordParserRuleCall_0() { return cLayoutKeywordParserRuleCall_0; }

		//postCondition=PostCondition?
		public Assignment getPostConditionAssignment_1() { return cPostConditionAssignment_1; }

		//PostCondition
		public RuleCall getPostConditionPostConditionParserRuleCall_1_0() { return cPostConditionPostConditionParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//body=PathGroup?
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }

		//PathGroup
		public RuleCall getBodyPathGroupParserRuleCall_3_0() { return cBodyPathGroupParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class GroupElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Group");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cGroupKeywordParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cPreConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPreConditionPreConditionParserRuleCall_1_0 = (RuleCall)cPreConditionAssignment_1.eContents().get(0);
		private final Assignment cPostConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPostConditionPostConditionParserRuleCall_2_0 = (RuleCall)cPostConditionAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPrerequisitesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPrerequisitesPrerequisiteParserRuleCall_4_0 = (RuleCall)cPrerequisitesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Group:
		//  GroupKeyword preCondition=PreCondition? postCondition=PostCondition? "{"
		//  prerequisites+=Prerequisite* "}";
		public ParserRule getRule() { return rule; }

		//GroupKeyword preCondition=PreCondition? postCondition=PostCondition? "{"
		//prerequisites+=Prerequisite* "}"
		public Group getGroup() { return cGroup; }

		//GroupKeyword
		public RuleCall getGroupKeywordParserRuleCall_0() { return cGroupKeywordParserRuleCall_0; }

		//preCondition=PreCondition?
		public Assignment getPreConditionAssignment_1() { return cPreConditionAssignment_1; }

		//PreCondition
		public RuleCall getPreConditionPreConditionParserRuleCall_1_0() { return cPreConditionPreConditionParserRuleCall_1_0; }

		//postCondition=PostCondition?
		public Assignment getPostConditionAssignment_2() { return cPostConditionAssignment_2; }

		//PostCondition
		public RuleCall getPostConditionPostConditionParserRuleCall_2_0() { return cPostConditionPostConditionParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//prerequisites+=Prerequisite*
		public Assignment getPrerequisitesAssignment_4() { return cPrerequisitesAssignment_4; }

		//Prerequisite
		public RuleCall getPrerequisitesPrerequisiteParserRuleCall_4_0() { return cPrerequisitesPrerequisiteParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class RepositoryConfigurationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RepositoryConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cLocationAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cLocationURIParserRuleCall_0_0_0 = (RuleCall)cLocationAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cResolverKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cResolverClassAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cResolverClassQualifiedNameParserRuleCall_0_1_1_0 = (RuleCall)cResolverClassAssignment_0_1_1.eContents().get(0);
		private final Assignment cAdviceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAdviceCompoundAdviceParserRuleCall_1_0 = (RuleCall)cAdviceAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//RepositoryConfiguration:
		//  (location=URI|"resolver" resolverClass=QualifiedName) advice=CompoundAdvice? ";"; 
		//
		//
		//	              
		//	
		//
		/// *
		// ** URI TODO: Would like to have better parsing of URL - don't know if possible to push this to lexer
		// ** as we may want to support namespaces (using 'ns:' prefix) (for importing b3 files, common advice, rules etc.).
		// ** The ':' clashes with 'scheme:' which is the only known BuildMethod in an opaque URI. 
		// * /
		public ParserRule getRule() { return rule; }

		//(location=URI|"resolver" resolverClass=QualifiedName) advice=CompoundAdvice? ";"
		public Group getGroup() { return cGroup; }

		//location=URI|"resolver" resolverClass=QualifiedName
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//location=URI
		public Assignment getLocationAssignment_0_0() { return cLocationAssignment_0_0; }

		//URI
		public RuleCall getLocationURIParserRuleCall_0_0_0() { return cLocationURIParserRuleCall_0_0_0; }

		//"resolver" resolverClass=QualifiedName
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"resolver"
		public Keyword getResolverKeyword_0_1_0() { return cResolverKeyword_0_1_0; }

		//resolverClass=QualifiedName
		public Assignment getResolverClassAssignment_0_1_1() { return cResolverClassAssignment_0_1_1; }

		//QualifiedName
		public RuleCall getResolverClassQualifiedNameParserRuleCall_0_1_1_0() { return cResolverClassQualifiedNameParserRuleCall_0_1_1_0; }

		//advice=CompoundAdvice?
		public Assignment getAdviceAssignment_1() { return cAdviceAssignment_1; }

		//CompoundAdvice
		public RuleCall getAdviceCompoundAdviceParserRuleCall_1_0() { return cAdviceCompoundAdviceParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class URIElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "URI");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//URI returns ecore::EString:
		//  STRING; 
		//
		/// *
		// ** URI TODO: Would like to have better parsing of URL - don't know if possible to push this to lexer
		// ** as we may want to support namespaces (using 'ns:' prefix) (for importing b3 files, common advice, rules etc.).
		// ** The ':' clashes with 'scheme:' which is the only known BuildMethod in an opaque URI. 
		// * /
		//    
		//	
		//
		/// * ADVICE
		// ** TODO: Had to use '?' instead if '*', and '??' intead of '**' as these operators are intermixed with / which sometimes
		// ** makes them look like comments. (Forbidding // comments is not the wanted sollution). 
		// **
		// * /
		public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class NamedAdviceElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedAdvice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cAdviceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAdviceCompoundAdviceParserRuleCall_1_0 = (RuleCall)cAdviceAssignment_1.eContents().get(0);
		
		//NamedAdvice:
		//  name=ID? advice=CompoundAdvice; 
		//
		/// * ADVICE
		// ** TODO: Had to use '?' instead if '*', and '??' intead of '**' as these operators are intermixed with / which sometimes
		// ** makes them look like comments. (Forbidding // comments is not the wanted sollution). 
		// **
		// * /
		public ParserRule getRule() { return rule; }

		//name=ID? advice=CompoundAdvice
		public Group getGroup() { return cGroup; }

		//name=ID?
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//advice=CompoundAdvice
		public Assignment getAdviceAssignment_1() { return cAdviceAssignment_1; }

		//CompoundAdvice
		public RuleCall getAdviceCompoundAdviceParserRuleCall_1_0() { return cAdviceCompoundAdviceParserRuleCall_1_0; }
	}

	public class AdviceElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Advice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAdviceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cCompoundAdviceParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Advice:
		//  "advice" CompoundAdvice;
		public ParserRule getRule() { return rule; }

		//"advice" CompoundAdvice
		public Group getGroup() { return cGroup; }

		//"advice"
		public Keyword getAdviceKeyword_0() { return cAdviceKeyword_0; }

		//CompoundAdvice
		public RuleCall getCompoundAdviceParserRuleCall_1() { return cCompoundAdviceParserRuleCall_1; }
	}

	public class CompoundAdviceElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompoundAdvice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cAdviceAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAdviceAdviceStatementParserRuleCall_1_0_0 = (RuleCall)cAdviceAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CompoundAdvice:
		//  "{" (advice+=AdviceStatement ";")* "}";
		public ParserRule getRule() { return rule; }

		//"{" (advice+=AdviceStatement ";")* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//(advice+=AdviceStatement ";")*
		public Group getGroup_1() { return cGroup_1; }

		//advice+=AdviceStatement
		public Assignment getAdviceAssignment_1_0() { return cAdviceAssignment_1_0; }

		//AdviceStatement
		public RuleCall getAdviceAdviceStatementParserRuleCall_1_0_0() { return cAdviceAdviceStatementParserRuleCall_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class AdviceStatementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdviceStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPathAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPathAdvicePathParserRuleCall_0_0 = (RuleCall)cPathAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cOpAssignmentOperatorEnumRuleCall_1_0_0_0 = (RuleCall)cOpAssignment_1_0_0.eContents().get(0);
		private final Assignment cValueAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_1_0_1_0 = (RuleCall)cValueAssignment_1_0_1.eContents().get(0);
		private final Assignment cAdviceAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cAdviceCompoundAdviceParserRuleCall_1_1_0 = (RuleCall)cAdviceAssignment_1_1.eContents().get(0);
		
		//AdviceStatement:
		//  path=AdvicePath (op=AssignmentOperator value=Expression|advice=CompoundAdvice); 
		//
		//                   
		//
		//// a | ** | [foo==bar] | .. | a 
		//// a:**:[foo==bar]:..:a
		public ParserRule getRule() { return rule; }

		//path=AdvicePath (op=AssignmentOperator value=Expression|advice=CompoundAdvice)
		public Group getGroup() { return cGroup; }

		//path=AdvicePath
		public Assignment getPathAssignment_0() { return cPathAssignment_0; }

		//AdvicePath
		public RuleCall getPathAdvicePathParserRuleCall_0_0() { return cPathAdvicePathParserRuleCall_0_0; }

		//op=AssignmentOperator value=Expression|advice=CompoundAdvice
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//op=AssignmentOperator value=Expression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//op=AssignmentOperator
		public Assignment getOpAssignment_1_0_0() { return cOpAssignment_1_0_0; }

		//AssignmentOperator
		public RuleCall getOpAssignmentOperatorEnumRuleCall_1_0_0_0() { return cOpAssignmentOperatorEnumRuleCall_1_0_0_0; }

		//value=Expression
		public Assignment getValueAssignment_1_0_1() { return cValueAssignment_1_0_1; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_0_1_0() { return cValueExpressionParserRuleCall_1_0_1_0; }

		//advice=CompoundAdvice
		public Assignment getAdviceAssignment_1_1() { return cAdviceAssignment_1_1; }

		//CompoundAdvice
		public RuleCall getAdviceCompoundAdviceParserRuleCall_1_1_0() { return cAdviceCompoundAdviceParserRuleCall_1_1_0; }
	}

	public class AdvicePathElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdvicePath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAbsoluteAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAbsoluteColonKeyword_0_0 = (Keyword)cAbsoluteAssignment_0.eContents().get(0);
		private final Assignment cSelectorsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSelectorsSelectorParserRuleCall_1_0 = (RuleCall)cSelectorsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSelectorsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSelectorsSelectorParserRuleCall_2_1_0 = (RuleCall)cSelectorsAssignment_2_1.eContents().get(0);
		
		//AdvicePath:
		//  absolute?=":"? selectors+=Selector (":" selectors+=Selector)*; 
		//
		//// a | ** | [foo==bar] | .. | a 
		//// a:**:[foo==bar]:..:a
		public ParserRule getRule() { return rule; }

		//absolute?=":"? selectors+=Selector (":" selectors+=Selector)*
		public Group getGroup() { return cGroup; }

		//absolute?=":"?
		public Assignment getAbsoluteAssignment_0() { return cAbsoluteAssignment_0; }

		//":"
		public Keyword getAbsoluteColonKeyword_0_0() { return cAbsoluteColonKeyword_0_0; }

		//selectors+=Selector
		public Assignment getSelectorsAssignment_1() { return cSelectorsAssignment_1; }

		//Selector
		public RuleCall getSelectorsSelectorParserRuleCall_1_0() { return cSelectorsSelectorParserRuleCall_1_0; }

		//(":" selectors+=Selector)*
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//selectors+=Selector
		public Assignment getSelectorsAssignment_2_1() { return cSelectorsAssignment_2_1; }

		//Selector
		public RuleCall getSelectorsSelectorParserRuleCall_2_1_0() { return cSelectorsSelectorParserRuleCall_2_1_0; }
	}

	public class SelectorElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Selector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDiscriminatingSelectorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMultiNodeSelectorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNodeSelectorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Selector:
		//  DiscriminatingSelector|MultiNodeSelector|NodeSelector;
		public ParserRule getRule() { return rule; }

		//DiscriminatingSelector|MultiNodeSelector|NodeSelector
		public Alternatives getAlternatives() { return cAlternatives; }

		//DiscriminatingSelector
		public RuleCall getDiscriminatingSelectorParserRuleCall_0() { return cDiscriminatingSelectorParserRuleCall_0; }

		//MultiNodeSelector
		public RuleCall getMultiNodeSelectorParserRuleCall_1() { return cMultiNodeSelectorParserRuleCall_1; }

		//NodeSelector
		public RuleCall getNodeSelectorParserRuleCall_2() { return cNodeSelectorParserRuleCall_2; }
	}

	public class MultiNodeSelectorElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiNodeSelector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNameSelectorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cThisSelectorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cChildrenSelectorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAncestorSelectorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRegexpSelectorParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//MultiNodeSelector returns Selector:
		//  NameSelector|ThisSelector|ChildrenSelector|AncestorSelector|RegexpSelector;
		public ParserRule getRule() { return rule; }

		//NameSelector|ThisSelector|ChildrenSelector|AncestorSelector|RegexpSelector
		public Alternatives getAlternatives() { return cAlternatives; }

		//NameSelector
		public RuleCall getNameSelectorParserRuleCall_0() { return cNameSelectorParserRuleCall_0; }

		//ThisSelector
		public RuleCall getThisSelectorParserRuleCall_1() { return cThisSelectorParserRuleCall_1; }

		//ChildrenSelector
		public RuleCall getChildrenSelectorParserRuleCall_2() { return cChildrenSelectorParserRuleCall_2; }

		//AncestorSelector
		public RuleCall getAncestorSelectorParserRuleCall_3() { return cAncestorSelectorParserRuleCall_3; }

		//RegexpSelector
		public RuleCall getRegexpSelectorParserRuleCall_4() { return cRegexpSelectorParserRuleCall_4; }
	}

	public class DiscriminatingSelectorElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DiscriminatingSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSelectorMultiNodeSelectorParserRuleCall_0_0 = (RuleCall)cSelectorAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateExpressionParserRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DiscriminatingSelector returns Selector:
		//  selector=MultiNodeSelector "[" predicate=Expression "]";
		public ParserRule getRule() { return rule; }

		//selector=MultiNodeSelector "[" predicate=Expression "]"
		public Group getGroup() { return cGroup; }

		//selector=MultiNodeSelector
		public Assignment getSelectorAssignment_0() { return cSelectorAssignment_0; }

		//MultiNodeSelector
		public RuleCall getSelectorMultiNodeSelectorParserRuleCall_0_0() { return cSelectorMultiNodeSelectorParserRuleCall_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//predicate=Expression
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }

		//Expression
		public RuleCall getPredicateExpressionParserRuleCall_2_0() { return cPredicateExpressionParserRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class NodeSelectorElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeSelector");
		private final RuleCall cParentSelectorParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//NodeSelector returns Selector:
		//  ParentSelector;
		public ParserRule getRule() { return rule; }

		//ParentSelector
		public RuleCall getParentSelectorParserRuleCall() { return cParentSelectorParserRuleCall; }
	}

	public class NameSelectorElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NameSelector");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//NameSelector:
		//  name=QualifiedName;
		public ParserRule getRule() { return rule; }

		//name=QualifiedName
		public Assignment getNameAssignment() { return cNameAssignment; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0() { return cNameQualifiedNameParserRuleCall_0; }
	}

	public class ThisSelectorElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ThisSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cThisSelectorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ThisSelector:
		//  {ThisSelector} ".";
		public ParserRule getRule() { return rule; }

		//{ThisSelector} "."
		public Group getGroup() { return cGroup; }

		//{ThisSelector}
		public Action getThisSelectorAction_0() { return cThisSelectorAction_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
	}

	public class ParentSelectorElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParentSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParentSelectorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ParentSelector:
		//  {ParentSelector} "..";
		public ParserRule getRule() { return rule; }

		//{ParentSelector} ".."
		public Group getGroup() { return cGroup; }

		//{ParentSelector}
		public Action getParentSelectorAction_0() { return cParentSelectorAction_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }
	}

	public class ChildrenSelectorElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChildrenSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cChildrenSelectorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ChildrenSelector:
		//  {ChildrenSelector} "*";
		public ParserRule getRule() { return rule; }

		//{ChildrenSelector} "*"
		public Group getGroup() { return cGroup; }

		//{ChildrenSelector}
		public Action getChildrenSelectorAction_0() { return cChildrenSelectorAction_0; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}

	public class AncestorSelectorElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AncestorSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAncestorSelectorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AncestorSelector:
		//  {AncestorSelector} "**";
		public ParserRule getRule() { return rule; }

		//{AncestorSelector} "**"
		public Group getGroup() { return cGroup; }

		//{AncestorSelector}
		public Action getAncestorSelectorAction_0() { return cAncestorSelectorAction_0; }

		//"**"
		public Keyword getAsteriskAsteriskKeyword_1() { return cAsteriskAsteriskKeyword_1; }
	}

	public class RegexpSelectorElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RegexpSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRegexpSelectorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPatternAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPatternREGEXTerminalRuleCall_1_0 = (RuleCall)cPatternAssignment_1.eContents().get(0);
		
		//RegexpSelector:
		//  {RegexpSelector} pattern=REGEX;
		public ParserRule getRule() { return rule; }

		//{RegexpSelector} pattern=REGEX
		public Group getGroup() { return cGroup; }

		//{RegexpSelector}
		public Action getRegexpSelectorAction_0() { return cRegexpSelectorAction_0; }

		//pattern=REGEX
		public Assignment getPatternAssignment_1() { return cPatternAssignment_1; }

		//REGEX
		public RuleCall getPatternREGEXTerminalRuleCall_1_0() { return cPatternREGEXTerminalRuleCall_1_0; }
	}

	public class WildcardNodeElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WildcardNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//WildcardNode returns ecore::EString:
		//  "*" "*"?;
		public ParserRule getRule() { return rule; }

		//"*" "*"?
		public Group getGroup() { return cGroup; }

		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }

		//"*"?
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}

	public class FilterElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Filter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPredicateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPredicateExpressionParserRuleCall_1_0 = (RuleCall)cPredicateAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Filter:
		//  "(" predicate=Expression ")"; 
		//
		//              
		//
		/// * ASSERTS * /
		public ParserRule getRule() { return rule; }

		//"(" predicate=Expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//predicate=Expression
		public Assignment getPredicateAssignment_1() { return cPredicateAssignment_1; }

		//Expression
		public RuleCall getPredicateExpressionParserRuleCall_1_0() { return cPredicateExpressionParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class PreConditionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PreCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPreconditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAssertsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAssertsAssertionExpressionParserRuleCall_2_0 = (RuleCall)cAssertsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PreCondition:
		//  "precondition" "{" asserts+=AssertionExpression* "}"; 
		//
		/// * ASSERTS * /
		public ParserRule getRule() { return rule; }

		//"precondition" "{" asserts+=AssertionExpression* "}"
		public Group getGroup() { return cGroup; }

		//"precondition"
		public Keyword getPreconditionKeyword_0() { return cPreconditionKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//asserts+=AssertionExpression*
		public Assignment getAssertsAssignment_2() { return cAssertsAssignment_2; }

		//AssertionExpression
		public RuleCall getAssertsAssertionExpressionParserRuleCall_2_0() { return cAssertsAssertionExpressionParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class PostConditionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PostCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPostconditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAssertsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAssertsAssertionExpressionParserRuleCall_2_0 = (RuleCall)cAssertsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PostCondition:
		//  "postcondition" "{" asserts+=AssertionExpression* "}";
		public ParserRule getRule() { return rule; }

		//"postcondition" "{" asserts+=AssertionExpression* "}"
		public Group getGroup() { return cGroup; }

		//"postcondition"
		public Keyword getPostconditionKeyword_0() { return cPostconditionKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//asserts+=AssertionExpression*
		public Assignment getAssertsAssignment_2() { return cAssertsAssignment_2; }

		//AssertionExpression
		public RuleCall getAssertsAssertionExpressionParserRuleCall_2_0() { return cAssertsAssertionExpressionParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class AssertionExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssertionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMessageAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMessageSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cMessageAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AssertionExpression:
		//  "assert" expr=Expression ("," message=STRING)? ";"; 
		//
		//             
		//
		//
		/// * STATEMENTS * /
		public ParserRule getRule() { return rule; }

		//"assert" expr=Expression ("," message=STRING)? ";"
		public Group getGroup() { return cGroup; }

		//"assert"
		public Keyword getAssertKeyword_0() { return cAssertKeyword_0; }

		//expr=Expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }

		//("," message=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//message=STRING
		public Assignment getMessageAssignment_2_1() { return cMessageAssignment_2_1; }

		//STRING
		public RuleCall getMessageSTRINGTerminalRuleCall_2_1_0() { return cMessageSTRINGTerminalRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class StatementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSwitchStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWhileStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cForStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDoWhileStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCompoundStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final RuleCall cVarExpressionParserRuleCall_6_0 = (RuleCall)cGroup_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final RuleCall cBreakStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cContinueStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cReturnStatementParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cFunctionStatementParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cLabelStatementParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cThrowStatementParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cTryCatchStatementParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cWithStatementParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		
		//Statement:
		//  IfStatement|SwitchStatement|WhileStatement|ForStatement|DoWhileStatement|
		//  CompoundStatement|VarExpression? ";"|BreakStatement|ContinueStatement|
		//  ReturnStatement|FunctionStatement|LabelStatement|ThrowStatement|
		//  TryCatchStatement|WithStatement; 
		//
		/// * STATEMENTS * /
		public ParserRule getRule() { return rule; }

		//IfStatement|SwitchStatement|WhileStatement|ForStatement|DoWhileStatement|
		//CompoundStatement|VarExpression? ";"|BreakStatement|ContinueStatement|
		//ReturnStatement|FunctionStatement|LabelStatement|ThrowStatement|
		//TryCatchStatement|WithStatement 
		//
		/// * STATEMENTS * /
		public Alternatives getAlternatives() { return cAlternatives; }

		//IfStatement
		public RuleCall getIfStatementParserRuleCall_0() { return cIfStatementParserRuleCall_0; }

		//SwitchStatement
		public RuleCall getSwitchStatementParserRuleCall_1() { return cSwitchStatementParserRuleCall_1; }

		//WhileStatement
		public RuleCall getWhileStatementParserRuleCall_2() { return cWhileStatementParserRuleCall_2; }

		//ForStatement
		public RuleCall getForStatementParserRuleCall_3() { return cForStatementParserRuleCall_3; }

		//DoWhileStatement
		public RuleCall getDoWhileStatementParserRuleCall_4() { return cDoWhileStatementParserRuleCall_4; }

		//CompoundStatement
		public RuleCall getCompoundStatementParserRuleCall_5() { return cCompoundStatementParserRuleCall_5; }

		//VarExpression? ";"
		public Group getGroup_6() { return cGroup_6; }

		//VarExpression?
		public RuleCall getVarExpressionParserRuleCall_6_0() { return cVarExpressionParserRuleCall_6_0; }

		//";"
		public Keyword getSemicolonKeyword_6_1() { return cSemicolonKeyword_6_1; }

		//BreakStatement
		public RuleCall getBreakStatementParserRuleCall_7() { return cBreakStatementParserRuleCall_7; }

		//ContinueStatement
		public RuleCall getContinueStatementParserRuleCall_8() { return cContinueStatementParserRuleCall_8; }

		//ReturnStatement
		public RuleCall getReturnStatementParserRuleCall_9() { return cReturnStatementParserRuleCall_9; }

		//FunctionStatement
		public RuleCall getFunctionStatementParserRuleCall_10() { return cFunctionStatementParserRuleCall_10; }

		//LabelStatement
		public RuleCall getLabelStatementParserRuleCall_11() { return cLabelStatementParserRuleCall_11; }

		//ThrowStatement
		public RuleCall getThrowStatementParserRuleCall_12() { return cThrowStatementParserRuleCall_12; }

		//TryCatchStatement
		public RuleCall getTryCatchStatementParserRuleCall_13() { return cTryCatchStatementParserRuleCall_13; }

		//WithStatement
		public RuleCall getWithStatementParserRuleCall_14() { return cWithStatementParserRuleCall_14; }
	}

	public class BreakStatementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BreakStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBreakStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBreakKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLabelIDTerminalRuleCall_2_0 = (RuleCall)cLabelAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BreakStatement:
		//  {BreakStatement} "break" label=ID? ";";
		public ParserRule getRule() { return rule; }

		//{BreakStatement} "break" label=ID? ";"
		public Group getGroup() { return cGroup; }

		//{BreakStatement}
		public Action getBreakStatementAction_0() { return cBreakStatementAction_0; }

		//"break"
		public Keyword getBreakKeyword_1() { return cBreakKeyword_1; }

		//label=ID?
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }

		//ID
		public RuleCall getLabelIDTerminalRuleCall_2_0() { return cLabelIDTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ContinueStatementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContinueStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContinueStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContinueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLabelIDTerminalRuleCall_2_0 = (RuleCall)cLabelAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ContinueStatement:
		//  {ContinueStatement} "continue" label=ID? ";";
		public ParserRule getRule() { return rule; }

		//{ContinueStatement} "continue" label=ID? ";"
		public Group getGroup() { return cGroup; }

		//{ContinueStatement}
		public Action getContinueStatementAction_0() { return cContinueStatementAction_0; }

		//"continue"
		public Keyword getContinueKeyword_1() { return cContinueKeyword_1; }

		//label=ID?
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }

		//ID
		public RuleCall getLabelIDTerminalRuleCall_2_0() { return cLabelIDTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class CompoundStatementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompoundStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsStatementsParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CompoundStatement:
		//  "{" statements=Statements "}";
		public ParserRule getRule() { return rule; }

		//"{" statements=Statements "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//statements=Statements
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }

		//Statements
		public RuleCall getStatementsStatementsParserRuleCall_1_0() { return cStatementsStatementsParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class StatementsElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statements");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//Statements:
		//  statements+=Statement+;
		public ParserRule getRule() { return rule; }

		//statements+=Statement+
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}

	public class WhileStatementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyStatementParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//WhileStatement:
		//  "while" "(" condition=Expression ")" body=Statement;
		public ParserRule getRule() { return rule; }

		//"while" "(" condition=Expression ")" body=Statement
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//body=Statement
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }

		//Statement
		public RuleCall getBodyStatementParserRuleCall_4_0() { return cBodyStatementParserRuleCall_4_0; }
	}

	public class SwitchStatementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SwitchStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSwitchExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSwitchExprVarExpressionParserRuleCall_2_0 = (RuleCall)cSwitchExprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCaseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCaseCaseParserRuleCall_5_0 = (RuleCall)cCaseAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cDefaultKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cColonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cStatementsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cStatementsStatementsParserRuleCall_6_2_0 = (RuleCall)cStatementsAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//SwitchStatement:
		//  "switch" "(" switchExpr=VarExpression ")" "{" case+=Case* ("default" ":" statements=
		//  Statements?)? "}";
		public ParserRule getRule() { return rule; }

		//"switch" "(" switchExpr=VarExpression ")" "{" case+=Case* ("default" ":" statements=
		//Statements?)? "}"
		public Group getGroup() { return cGroup; }

		//"switch"
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//switchExpr=VarExpression
		public Assignment getSwitchExprAssignment_2() { return cSwitchExprAssignment_2; }

		//VarExpression
		public RuleCall getSwitchExprVarExpressionParserRuleCall_2_0() { return cSwitchExprVarExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//case+=Case*
		public Assignment getCaseAssignment_5() { return cCaseAssignment_5; }

		//Case
		public RuleCall getCaseCaseParserRuleCall_5_0() { return cCaseCaseParserRuleCall_5_0; }

		//("default" ":" statements=Statements?)?
		public Group getGroup_6() { return cGroup_6; }

		//"default"
		public Keyword getDefaultKeyword_6_0() { return cDefaultKeyword_6_0; }

		//":"
		public Keyword getColonKeyword_6_1() { return cColonKeyword_6_1; }

		//statements=Statements?
		public Assignment getStatementsAssignment_6_2() { return cStatementsAssignment_6_2; }

		//Statements
		public RuleCall getStatementsStatementsParserRuleCall_6_2_0() { return cStatementsStatementsParserRuleCall_6_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class CaseElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Case");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionValueLiteralParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsStatementsParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		
		//Case:
		//  "case" condition=ValueLiteral ":" statements=Statements?; 
		//		
		//        
		//
		//// TODO: needs validation that expression list only has one entry and is a LHS value
		//// if inLoop == true. Needs validation that RHS is a collection item if inLoop == true.
		////
		public ParserRule getRule() { return rule; }

		//"case" condition=ValueLiteral ":" statements=Statements?
		public Group getGroup() { return cGroup; }

		//"case"
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }

		//condition=ValueLiteral
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//ValueLiteral
		public RuleCall getConditionValueLiteralParserRuleCall_1_0() { return cConditionValueLiteralParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//statements=Statements?
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }

		//Statements
		public RuleCall getStatementsStatementsParserRuleCall_3_0() { return cStatementsStatementsParserRuleCall_3_0; }
	}

	public class ForStatementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInitAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitVarExpressionListParserRuleCall_3_0 = (RuleCall)cInitAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Assignment cRegularAssignment_4_0_0 = (Assignment)cGroup_4_0.eContents().get(0);
		private final Keyword cRegularSemicolonKeyword_4_0_0_0 = (Keyword)cRegularAssignment_4_0_0.eContents().get(0);
		private final Assignment cCondAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cCondExpressionParserRuleCall_4_0_1_0 = (RuleCall)cCondAssignment_4_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_0_2 = (Keyword)cGroup_4_0.eContents().get(2);
		private final Assignment cIterateAssignment_4_0_3 = (Assignment)cGroup_4_0.eContents().get(3);
		private final RuleCall cIterateExpressionListParserRuleCall_4_0_3_0 = (RuleCall)cIterateAssignment_4_0_3.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cInKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cIterateAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cIterateExpressionParserRuleCall_4_1_1_0 = (RuleCall)cIterateAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyStatementParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		
		//ForStatement:
		//  {ForStatement} "for" "(" init=VarExpressionList? (regular?=";" cond=Expression? ";"
		//  iterate=ExpressionList?|"in" iterate=Expression) ")" body=Statement; 
		//
		//// TODO: needs validation that expression list only has one entry and is a LHS value
		//// if inLoop == true. Needs validation that RHS is a collection item if inLoop == true.
		////
		public ParserRule getRule() { return rule; }

		//{ForStatement} "for" "(" init=VarExpressionList? (regular?=";" cond=Expression? ";"
		//iterate=ExpressionList?|"in" iterate=Expression) ")" body=Statement
		public Group getGroup() { return cGroup; }

		//{ForStatement}
		public Action getForStatementAction_0() { return cForStatementAction_0; }

		//"for"
		public Keyword getForKeyword_1() { return cForKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//init=VarExpressionList?
		public Assignment getInitAssignment_3() { return cInitAssignment_3; }

		//VarExpressionList
		public RuleCall getInitVarExpressionListParserRuleCall_3_0() { return cInitVarExpressionListParserRuleCall_3_0; }

		//regular?=";" cond=Expression? ";" iterate=ExpressionList?|"in" iterate=Expression
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//regular?=";" cond=Expression? ";" iterate=ExpressionList?
		public Group getGroup_4_0() { return cGroup_4_0; }

		//regular?=";"
		public Assignment getRegularAssignment_4_0_0() { return cRegularAssignment_4_0_0; }

		//";"
		public Keyword getRegularSemicolonKeyword_4_0_0_0() { return cRegularSemicolonKeyword_4_0_0_0; }

		//cond=Expression?
		public Assignment getCondAssignment_4_0_1() { return cCondAssignment_4_0_1; }

		//Expression
		public RuleCall getCondExpressionParserRuleCall_4_0_1_0() { return cCondExpressionParserRuleCall_4_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4_0_2() { return cSemicolonKeyword_4_0_2; }

		//iterate=ExpressionList?
		public Assignment getIterateAssignment_4_0_3() { return cIterateAssignment_4_0_3; }

		//ExpressionList
		public RuleCall getIterateExpressionListParserRuleCall_4_0_3_0() { return cIterateExpressionListParserRuleCall_4_0_3_0; }

		//"in" iterate=Expression
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"in"
		public Keyword getInKeyword_4_1_0() { return cInKeyword_4_1_0; }

		//iterate=Expression
		public Assignment getIterateAssignment_4_1_1() { return cIterateAssignment_4_1_1; }

		//Expression
		public RuleCall getIterateExpressionParserRuleCall_4_1_1_0() { return cIterateExpressionParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//body=Statement
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }

		//Statement
		public RuleCall getBodyStatementParserRuleCall_6_0() { return cBodyStatementParserRuleCall_6_0; }
	}

	public class DoWhileStatementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoWhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		private final Keyword cWhileKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionExpressionParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DoWhileStatement:
		//  "do" statement=Statement "while" "(" condition=Expression ")" ";";
		public ParserRule getRule() { return rule; }

		//"do" statement=Statement "while" "(" condition=Expression ")" ";"
		public Group getGroup() { return cGroup; }

		//"do"
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }

		//statement=Statement
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_0() { return cStatementStatementParserRuleCall_1_0; }

		//"while"
		public Keyword getWhileKeyword_2() { return cWhileKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//condition=Expression
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_4_0() { return cConditionExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class ReturnStatementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReturnAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReturnExpressionParserRuleCall_1_0 = (RuleCall)cReturnAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ReturnStatement:
		//  "return" return=Expression? ";";
		public ParserRule getRule() { return rule; }

		//"return" return=Expression? ";"
		public Group getGroup() { return cGroup; }

		//"return"
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }

		//return=Expression?
		public Assignment getReturnAssignment_1() { return cReturnAssignment_1; }

		//Expression
		public RuleCall getReturnExpressionParserRuleCall_1_0() { return cReturnExpressionParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class FunctionStatementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsIDTerminalRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsIDTerminalRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStatementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatementsStatementsParserRuleCall_6_0 = (RuleCall)cStatementsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//FunctionStatement:
		//  "function" name=ID "(" (params+=ID ("," params+=ID)*) ")" "{" statements=Statements "}";
		public ParserRule getRule() { return rule; }

		//"function" name=ID "(" (params+=ID ("," params+=ID)*) ")" "{" statements=Statements "}"
		public Group getGroup() { return cGroup; }

		//"function"
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//params+=ID ("," params+=ID)*
		public Group getGroup_3() { return cGroup_3; }

		//params+=ID
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }

		//ID
		public RuleCall getParamsIDTerminalRuleCall_3_0_0() { return cParamsIDTerminalRuleCall_3_0_0; }

		//("," params+=ID)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//params+=ID
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }

		//ID
		public RuleCall getParamsIDTerminalRuleCall_3_1_1_0() { return cParamsIDTerminalRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//statements=Statements
		public Assignment getStatementsAssignment_6() { return cStatementsAssignment_6; }

		//Statements
		public RuleCall getStatementsStatementsParserRuleCall_6_0() { return cStatementsStatementsParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class IfStatementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondExpressionParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenStatementParserRuleCall_4_0 = (RuleCall)cThenAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseStatementParserRuleCall_5_1_0 = (RuleCall)cElseAssignment_5_1.eContents().get(0);
		
		//IfStatement:
		//  "if" "(" cond=Expression ")" then=Statement ("else" else=Statement)?;
		public ParserRule getRule() { return rule; }

		//"if" "(" cond=Expression ")" then=Statement ("else" else=Statement)?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//cond=Expression
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }

		//Expression
		public RuleCall getCondExpressionParserRuleCall_2_0() { return cCondExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//then=Statement
		public Assignment getThenAssignment_4() { return cThenAssignment_4; }

		//Statement
		public RuleCall getThenStatementParserRuleCall_4_0() { return cThenStatementParserRuleCall_4_0; }

		//("else" else=Statement)?
		public Group getGroup_5() { return cGroup_5; }

		//"else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }

		//else=Statement
		public Assignment getElseAssignment_5_1() { return cElseAssignment_5_1; }

		//Statement
		public RuleCall getElseStatementParserRuleCall_5_1_0() { return cElseStatementParserRuleCall_5_1_0; }
	}

	public class LabelStatementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LabelStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementStatementParserRuleCall_2_0 = (RuleCall)cStatementAssignment_2.eContents().get(0);
		
		//LabelStatement:
		//  name=ID ":" statement=Statement;
		public ParserRule getRule() { return rule; }

		//name=ID ":" statement=Statement
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//statement=Statement
		public Assignment getStatementAssignment_2() { return cStatementAssignment_2; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_2_0() { return cStatementStatementParserRuleCall_2_0; }
	}

	public class ThrowStatementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ThrowStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThrowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ThrowStatement:
		//  "throw" expr=Expression ";";
		public ParserRule getRule() { return rule; }

		//"throw" expr=Expression ";"
		public Group getGroup() { return cGroup; }

		//"throw"
		public Keyword getThrowKeyword_0() { return cThrowKeyword_0; }

		//expr=Expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class TryCatchStatementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TryCatchStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTryBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTryBlockCompoundStatementParserRuleCall_1_0 = (RuleCall)cTryBlockAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cCatchBlockAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cCatchBlockCatchBlockParserRuleCall_2_0_0_0 = (RuleCall)cCatchBlockAssignment_2_0_0.eContents().get(0);
		private final Assignment cFinallyBlockAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cFinallyBlockFinallyBlockParserRuleCall_2_0_1_0 = (RuleCall)cFinallyBlockAssignment_2_0_1.eContents().get(0);
		private final Assignment cFinallyAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cFinallyFinallyBlockParserRuleCall_2_1_0 = (RuleCall)cFinallyAssignment_2_1.eContents().get(0);
		
		//TryCatchStatement:
		//  "try" tryBlock=CompoundStatement (catchBlock=CatchBlock finallyBlock=FinallyBlock?|
		//  finally=FinallyBlock);
		public ParserRule getRule() { return rule; }

		//"try" tryBlock=CompoundStatement (catchBlock=CatchBlock finallyBlock=FinallyBlock?|
		//finally=FinallyBlock)
		public Group getGroup() { return cGroup; }

		//"try"
		public Keyword getTryKeyword_0() { return cTryKeyword_0; }

		//tryBlock=CompoundStatement
		public Assignment getTryBlockAssignment_1() { return cTryBlockAssignment_1; }

		//CompoundStatement
		public RuleCall getTryBlockCompoundStatementParserRuleCall_1_0() { return cTryBlockCompoundStatementParserRuleCall_1_0; }

		//catchBlock=CatchBlock finallyBlock=FinallyBlock?|finally=FinallyBlock
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//catchBlock=CatchBlock finallyBlock=FinallyBlock?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//catchBlock=CatchBlock
		public Assignment getCatchBlockAssignment_2_0_0() { return cCatchBlockAssignment_2_0_0; }

		//CatchBlock
		public RuleCall getCatchBlockCatchBlockParserRuleCall_2_0_0_0() { return cCatchBlockCatchBlockParserRuleCall_2_0_0_0; }

		//finallyBlock=FinallyBlock?
		public Assignment getFinallyBlockAssignment_2_0_1() { return cFinallyBlockAssignment_2_0_1; }

		//FinallyBlock
		public RuleCall getFinallyBlockFinallyBlockParserRuleCall_2_0_1_0() { return cFinallyBlockFinallyBlockParserRuleCall_2_0_1_0; }

		//finally=FinallyBlock
		public Assignment getFinallyAssignment_2_1() { return cFinallyAssignment_2_1; }

		//FinallyBlock
		public RuleCall getFinallyFinallyBlockParserRuleCall_2_1_0() { return cFinallyFinallyBlockParserRuleCall_2_1_0; }
	}

	public class CatchBlockElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CatchBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCatchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableIDTerminalRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCatchBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCatchBlockCompoundStatementParserRuleCall_4_0 = (RuleCall)cCatchBlockAssignment_4.eContents().get(0);
		
		//CatchBlock:
		//  "catch" "(" variable=ID ")" catchBlock=CompoundStatement;
		public ParserRule getRule() { return rule; }

		//"catch" "(" variable=ID ")" catchBlock=CompoundStatement
		public Group getGroup() { return cGroup; }

		//"catch"
		public Keyword getCatchKeyword_0() { return cCatchKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//variable=ID
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }

		//ID
		public RuleCall getVariableIDTerminalRuleCall_2_0() { return cVariableIDTerminalRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//catchBlock=CompoundStatement
		public Assignment getCatchBlockAssignment_4() { return cCatchBlockAssignment_4; }

		//CompoundStatement
		public RuleCall getCatchBlockCompoundStatementParserRuleCall_4_0() { return cCatchBlockCompoundStatementParserRuleCall_4_0; }
	}

	public class FinallyBlockElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FinallyBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFinallyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFinallyBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFinallyBlockCompoundStatementParserRuleCall_1_0 = (RuleCall)cFinallyBlockAssignment_1.eContents().get(0);
		
		//FinallyBlock:
		//  "finally" finallyBlock=CompoundStatement;
		public ParserRule getRule() { return rule; }

		//"finally" finallyBlock=CompoundStatement
		public Group getGroup() { return cGroup; }

		//"finally"
		public Keyword getFinallyKeyword_0() { return cFinallyKeyword_0; }

		//finallyBlock=CompoundStatement
		public Assignment getFinallyBlockAssignment_1() { return cFinallyBlockAssignment_1; }

		//CompoundStatement
		public RuleCall getFinallyBlockCompoundStatementParserRuleCall_1_0() { return cFinallyBlockCompoundStatementParserRuleCall_1_0; }
	}

	public class WithStatementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WithStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_4_0 = (RuleCall)cStatementAssignment_4.eContents().get(0);
		
		//WithStatement:
		//  "with" "(" expr=Expression ")" statement=Statement; 
		//		
		//                
		//		
		/// * EXPRESSIONS * /
		public ParserRule getRule() { return rule; }

		//"with" "(" expr=Expression ")" statement=Statement
		public Group getGroup() { return cGroup; }

		//"with"
		public Keyword getWithKeyword_0() { return cWithKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//statement=Statement
		public Assignment getStatementAssignment_4() { return cStatementAssignment_4; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_4_0() { return cStatementStatementParserRuleCall_4_0; }
	}

	public class VarExpressionListElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprVarExpressionParserRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprVarExpressionParserRuleCall_1_1_0 = (RuleCall)cExprAssignment_1_1.eContents().get(0);
		
		//VarExpressionList:
		//  expr+=VarExpression ("," expr+=VarExpression)*;
		public ParserRule getRule() { return rule; }

		//expr+=VarExpression ("," expr+=VarExpression)*
		public Group getGroup() { return cGroup; }

		//expr+=VarExpression
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }

		//VarExpression
		public RuleCall getExprVarExpressionParserRuleCall_0_0() { return cExprVarExpressionParserRuleCall_0_0; }

		//("," expr+=VarExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//expr+=VarExpression
		public Assignment getExprAssignment_1_1() { return cExprAssignment_1_1; }

		//VarExpression
		public RuleCall getExprVarExpressionParserRuleCall_1_1_0() { return cExprVarExpressionParserRuleCall_1_1_0; }
	}

	public class ExpressionListElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprExpressionParserRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_1_0 = (RuleCall)cExprAssignment_1_1.eContents().get(0);
		
		//ExpressionList:
		//  expr+=Expression ("," expr+=Expression)*; 
		//                  
		//
		//// Assignment is optional i JS
		//// Also makes it possible to use VarExpression in a for(var a in xxx) loop
		////
		public ParserRule getRule() { return rule; }

		//expr+=Expression ("," expr+=Expression)*
		public Group getGroup() { return cGroup; }

		//expr+=Expression
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_0_0() { return cExprExpressionParserRuleCall_0_0; }

		//("," expr+=Expression)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//expr+=Expression
		public Assignment getExprAssignment_1_1() { return cExprAssignment_1_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_1_0() { return cExprExpressionParserRuleCall_1_1_0; }
	}

	public class VarExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cVarExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVarKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cEqualsSignKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cValueAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_1_3_1_0 = (RuleCall)cValueAssignment_1_3_1.eContents().get(0);
		
		//VarExpression returns Expression:
		//  Expression|{VarExpression} "var" name=ID ("=" value=Expression)?; 
		//
		//// Assignment is optional i JS
		//// Also makes it possible to use VarExpression in a for(var a in xxx) loop
		////
		//                  
		//
		//
		////Expression returns Expression: value = AssignmentExpression ;
		public ParserRule getRule() { return rule; }

		//Expression|{VarExpression} "var" name=ID ("=" value=Expression)? 
		//
		//// Assignment is optional i JS
		//// Also makes it possible to use VarExpression in a for(var a in xxx) loop
		////
		//                  
		//
		//
		////Expression returns Expression: value = AssignmentExpression ;
		public Alternatives getAlternatives() { return cAlternatives; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }

		//{VarExpression} "var" name=ID ("=" value=Expression)?
		public Group getGroup_1() { return cGroup_1; }

		//{VarExpression}
		public Action getVarExpressionAction_1_0() { return cVarExpressionAction_1_0; }

		//"var"
		public Keyword getVarKeyword_1_1() { return cVarKeyword_1_1; }

		//name=ID
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_2_0() { return cNameIDTerminalRuleCall_1_2_0; }

		//("=" value=Expression)?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"="
		public Keyword getEqualsSignKeyword_1_3_0() { return cEqualsSignKeyword_1_3_0; }

		//value=Expression
		public Assignment getValueAssignment_1_3_1() { return cValueAssignment_1_3_1; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_3_1_0() { return cValueExpressionParserRuleCall_1_3_1_0; }
	}

	public class ExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cAssignmentExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//  AssignmentExpression; 
		//
		//
		////Expression returns Expression: value = AssignmentExpression ;
		public ParserRule getRule() { return rule; }

		//AssignmentExpression
		public RuleCall getAssignmentExpressionParserRuleCall() { return cAssignmentExpressionParserRuleCall; }
	}

	public class AssignmentExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignmentExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIfExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAssignmentOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpAssignmentOperatorEnumRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAssignmentExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AssignmentExpression returns Expression:
		//  IfExpression ({AssignmentOperation.left=current} op=AssignmentOperator right=
		//  AssignmentExpression)?; 
		//
		//    
		//	       
		//	
		//
		////ChainExpression returns Expression:
		////	ChainedExpression //({ChainExpression.first=current} ',' next=ChainedExpression)*
		////	;
		public ParserRule getRule() { return rule; }

		//IfExpression ({AssignmentOperation.left=current} op=AssignmentOperator right=
		//AssignmentExpression)?
		public Group getGroup() { return cGroup; }

		//IfExpression
		public RuleCall getIfExpressionParserRuleCall_0() { return cIfExpressionParserRuleCall_0; }

		//({AssignmentOperation.left=current} op=AssignmentOperator right=
		//AssignmentExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{AssignmentOperation.left=current}
		public Action getAssignmentOperationLeftAction_1_0() { return cAssignmentOperationLeftAction_1_0; }

		//op=AssignmentOperator
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//AssignmentOperator
		public RuleCall getOpAssignmentOperatorEnumRuleCall_1_1_0() { return cOpAssignmentOperatorEnumRuleCall_1_1_0; }

		//right=AssignmentExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AssignmentExpression
		public RuleCall getRightAssignmentExpressionParserRuleCall_1_2_0() { return cRightAssignmentExpressionParserRuleCall_1_2_0; }
	}

	public class ChainedExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChainedExpression");
		private final RuleCall cIfExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ChainedExpression returns Expression:
		//  IfExpression; 
		//
		////ChainExpression returns Expression:
		////	ChainedExpression //({ChainExpression.first=current} ',' next=ChainedExpression)*
		////	;
		public ParserRule getRule() { return rule; }

		//IfExpression
		public RuleCall getIfExpressionParserRuleCall() { return cIfExpressionParserRuleCall; }
	}

	public class IfExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cIfExpressionConditionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cThenPartAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cThenPartChainedExpressionParserRuleCall_1_2_0 = (RuleCall)cThenPartAssignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cElsePartAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cElsePartChainedExpressionParserRuleCall_1_4_0 = (RuleCall)cElsePartAssignment_1_4.eContents().get(0);
		
		//IfExpression returns Expression:
		//  OrExpression ({IfExpression.condition=current} "?" thenPart=ChainedExpression ":"
		//  elsePart=ChainedExpression)?;
		public ParserRule getRule() { return rule; }

		//OrExpression ({IfExpression.condition=current} "?" thenPart=ChainedExpression ":"
		//elsePart=ChainedExpression)?
		public Group getGroup() { return cGroup; }

		//OrExpression
		public RuleCall getOrExpressionParserRuleCall_0() { return cOrExpressionParserRuleCall_0; }

		//({IfExpression.condition=current} "?" thenPart=ChainedExpression ":" elsePart=
		//ChainedExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{IfExpression.condition=current}
		public Action getIfExpressionConditionAction_1_0() { return cIfExpressionConditionAction_1_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_1() { return cQuestionMarkKeyword_1_1; }

		//thenPart=ChainedExpression
		public Assignment getThenPartAssignment_1_2() { return cThenPartAssignment_1_2; }

		//ChainedExpression
		public RuleCall getThenPartChainedExpressionParserRuleCall_1_2_0() { return cThenPartChainedExpressionParserRuleCall_1_2_0; }

		//":"
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }

		//elsePart=ChainedExpression
		public Assignment getElsePartAssignment_1_4() { return cElsePartAssignment_1_4; }

		//ChainedExpression
		public RuleCall getElsePartChainedExpressionParserRuleCall_1_4_0() { return cElsePartChainedExpressionParserRuleCall_1_4_0; }
	}

	public class OrExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBooleanOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorVerticalLineVerticalLineKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrExpression returns Expression:
		//  AndExpression ({BooleanOperation.left=current} operator="||" right=AndExpression)*;
		public ParserRule getRule() { return rule; }

		//AndExpression ({BooleanOperation.left=current} operator="||" right=AndExpression)*
		public Group getGroup() { return cGroup; }

		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }

		//({BooleanOperation.left=current} operator="||" right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BooleanOperation.left=current}
		public Action getBooleanOperationLeftAction_1_0() { return cBooleanOperationLeftAction_1_0; }

		//operator="||"
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"||"
		public Keyword getOperatorVerticalLineVerticalLineKeyword_1_1_0() { return cOperatorVerticalLineVerticalLineKeyword_1_1_0; }

		//right=AndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_2_0() { return cRightAndExpressionParserRuleCall_1_2_0; }
	}

	public class AndExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitwiseExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBooleanOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorAmpersandAmpersandKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBitwiseExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExpression returns Expression:
		//  BitwiseExpression ({BooleanOperation.left=current} operator="&&" right=
		//  BitwiseExpression)*;
		public ParserRule getRule() { return rule; }

		//BitwiseExpression ({BooleanOperation.left=current} operator="&&" right=
		//BitwiseExpression)*
		public Group getGroup() { return cGroup; }

		//BitwiseExpression
		public RuleCall getBitwiseExpressionParserRuleCall_0() { return cBitwiseExpressionParserRuleCall_0; }

		//({BooleanOperation.left=current} operator="&&" right=BitwiseExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BooleanOperation.left=current}
		public Action getBooleanOperationLeftAction_1_0() { return cBooleanOperationLeftAction_1_0; }

		//operator="&&"
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"&&"
		public Keyword getOperatorAmpersandAmpersandKeyword_1_1_0() { return cOperatorAmpersandAmpersandKeyword_1_1_0; }

		//right=BitwiseExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//BitwiseExpression
		public RuleCall getRightBitwiseExpressionParserRuleCall_1_2_0() { return cRightBitwiseExpressionParserRuleCall_1_2_0; }
	}

	public class BitwiseExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitwiseExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperationCallParamsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cNameAlternatives_1_1_0 = (Alternatives)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cNameAmpersandKeyword_1_1_0_0 = (Keyword)cNameAlternatives_1_1_0.eContents().get(0);
		private final Keyword cNameCircumflexAccentKeyword_1_1_0_1 = (Keyword)cNameAlternatives_1_1_0.eContents().get(1);
		private final Keyword cNameVerticalLineKeyword_1_1_0_2 = (Keyword)cNameAlternatives_1_1_0.eContents().get(2);
		private final Assignment cParamsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cParamsRelationalExpressionParserRuleCall_1_2_0 = (RuleCall)cParamsAssignment_1_2.eContents().get(0);
		
		//BitwiseExpression returns Expression:
		//  RelationalExpression ({OperationCall.params+=current} name=( "&" | "^" | "|" ) params+=
		//  RelationalExpression)*;
		public ParserRule getRule() { return rule; }

		//RelationalExpression ({OperationCall.params+=current} name=( "&" | "^" | "|" ) params+=
		//RelationalExpression)*
		public Group getGroup() { return cGroup; }

		//RelationalExpression
		public RuleCall getRelationalExpressionParserRuleCall_0() { return cRelationalExpressionParserRuleCall_0; }

		//({OperationCall.params+=current} name=( "&" | "^" | "|" ) params+=RelationalExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{OperationCall.params+=current}
		public Action getOperationCallParamsAction_1_0() { return cOperationCallParamsAction_1_0; }

		//name=( "&" | "^" | "|" )
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//"&"|"^"|"|"
		public Alternatives getNameAlternatives_1_1_0() { return cNameAlternatives_1_1_0; }

		//"&"
		public Keyword getNameAmpersandKeyword_1_1_0_0() { return cNameAmpersandKeyword_1_1_0_0; }

		//"^"
		public Keyword getNameCircumflexAccentKeyword_1_1_0_1() { return cNameCircumflexAccentKeyword_1_1_0_1; }

		//"|"
		public Keyword getNameVerticalLineKeyword_1_1_0_2() { return cNameVerticalLineKeyword_1_1_0_2; }

		//params+=RelationalExpression
		public Assignment getParamsAssignment_1_2() { return cParamsAssignment_1_2; }

		//RelationalExpression
		public RuleCall getParamsRelationalExpressionParserRuleCall_1_2_0() { return cParamsRelationalExpressionParserRuleCall_1_2_0; }
	}

	public class RelationalExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cShiftExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRelationalOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorRelationalOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightShiftExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//RelationalExpression returns Expression:
		//  ShiftExpression ({RelationalOperation.left=current} operator=RelationalOperator
		//  right=ShiftExpression)*;
		public ParserRule getRule() { return rule; }

		//ShiftExpression ({RelationalOperation.left=current} operator=RelationalOperator
		//right=ShiftExpression)*
		public Group getGroup() { return cGroup; }

		//ShiftExpression
		public RuleCall getShiftExpressionParserRuleCall_0() { return cShiftExpressionParserRuleCall_0; }

		//({RelationalOperation.left=current} operator=RelationalOperator right=
		//ShiftExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{RelationalOperation.left=current}
		public Action getRelationalOperationLeftAction_1_0() { return cRelationalOperationLeftAction_1_0; }

		//operator=RelationalOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//RelationalOperator
		public RuleCall getOperatorRelationalOperatorEnumRuleCall_1_1_0() { return cOperatorRelationalOperatorEnumRuleCall_1_1_0; }

		//right=ShiftExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ShiftExpression
		public RuleCall getRightShiftExpressionParserRuleCall_1_2_0() { return cRightShiftExpressionParserRuleCall_1_2_0; }
	}

	public class ShiftExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShiftExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperationCallParamsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cNameAlternatives_1_1_0 = (Alternatives)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cNameLessThanSignLessThanSignKeyword_1_1_0_0 = (Keyword)cNameAlternatives_1_1_0.eContents().get(0);
		private final Keyword cNameGreaterThanSignGreaterThanSignKeyword_1_1_0_1 = (Keyword)cNameAlternatives_1_1_0.eContents().get(1);
		private final Keyword cNameGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_1_0_2 = (Keyword)cNameAlternatives_1_1_0.eContents().get(2);
		private final Assignment cParamsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cParamsAdditiveExpressionParserRuleCall_1_2_0 = (RuleCall)cParamsAssignment_1_2.eContents().get(0);
		
		//ShiftExpression returns Expression:
		//  AdditiveExpression ({OperationCall.params+=current} name=( "<<" | ">>" | ">>>" ) params+=
		//  AdditiveExpression)*;
		public ParserRule getRule() { return rule; }

		//AdditiveExpression ({OperationCall.params+=current} name=( "<<" | ">>" | ">>>" ) params+=
		//AdditiveExpression)*
		public Group getGroup() { return cGroup; }

		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall_0() { return cAdditiveExpressionParserRuleCall_0; }

		//({OperationCall.params+=current} name=( "<<" | ">>" | ">>>" ) params+=AdditiveExpression
		//)*
		public Group getGroup_1() { return cGroup_1; }

		//{OperationCall.params+=current}
		public Action getOperationCallParamsAction_1_0() { return cOperationCallParamsAction_1_0; }

		//name=( "<<" | ">>" | ">>>" )
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//"<<"|">>"|">>>"
		public Alternatives getNameAlternatives_1_1_0() { return cNameAlternatives_1_1_0; }

		//"<<"
		public Keyword getNameLessThanSignLessThanSignKeyword_1_1_0_0() { return cNameLessThanSignLessThanSignKeyword_1_1_0_0; }

		//">>"
		public Keyword getNameGreaterThanSignGreaterThanSignKeyword_1_1_0_1() { return cNameGreaterThanSignGreaterThanSignKeyword_1_1_0_1; }

		//">>>"
		public Keyword getNameGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_1_0_2() { return cNameGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_1_0_2; }

		//params+=AdditiveExpression
		public Assignment getParamsAssignment_1_2() { return cParamsAssignment_1_2; }

		//AdditiveExpression
		public RuleCall getParamsAdditiveExpressionParserRuleCall_1_2_0() { return cParamsAdditiveExpressionParserRuleCall_1_2_0; }
	}

	public class AdditiveExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperationCallParamsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cNameAlternatives_1_1_0 = (Alternatives)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cNamePlusSignKeyword_1_1_0_0 = (Keyword)cNameAlternatives_1_1_0.eContents().get(0);
		private final Keyword cNameHyphenMinusKeyword_1_1_0_1 = (Keyword)cNameAlternatives_1_1_0.eContents().get(1);
		private final Assignment cParamsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cParamsMultiplicativeExpressionParserRuleCall_1_2_0 = (RuleCall)cParamsAssignment_1_2.eContents().get(0);
		
		//AdditiveExpression returns Expression:
		//  MultiplicativeExpression ({OperationCall.params+=current} name=( "+" | "-" ) params+=
		//  MultiplicativeExpression)*;
		public ParserRule getRule() { return rule; }

		//MultiplicativeExpression ({OperationCall.params+=current} name=( "+" | "-" ) params+=
		//MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//MultiplicativeExpression
		public RuleCall getMultiplicativeExpressionParserRuleCall_0() { return cMultiplicativeExpressionParserRuleCall_0; }

		//({OperationCall.params+=current} name=( "+" | "-" ) params+=MultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{OperationCall.params+=current}
		public Action getOperationCallParamsAction_1_0() { return cOperationCallParamsAction_1_0; }

		//name=( "+" | "-" )
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//"+"|"-"
		public Alternatives getNameAlternatives_1_1_0() { return cNameAlternatives_1_1_0; }

		//"+"
		public Keyword getNamePlusSignKeyword_1_1_0_0() { return cNamePlusSignKeyword_1_1_0_0; }

		//"-"
		public Keyword getNameHyphenMinusKeyword_1_1_0_1() { return cNameHyphenMinusKeyword_1_1_0_1; }

		//params+=MultiplicativeExpression
		public Assignment getParamsAssignment_1_2() { return cParamsAssignment_1_2; }

		//MultiplicativeExpression
		public RuleCall getParamsMultiplicativeExpressionParserRuleCall_1_2_0() { return cParamsMultiplicativeExpressionParserRuleCall_1_2_0; }
	}

	public class MultiplicativeExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSetExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperationCallParamsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cNameAlternatives_1_1_0 = (Alternatives)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cNameAsteriskKeyword_1_1_0_0 = (Keyword)cNameAlternatives_1_1_0.eContents().get(0);
		private final Keyword cNameSolidusKeyword_1_1_0_1 = (Keyword)cNameAlternatives_1_1_0.eContents().get(1);
		private final Keyword cNamePercentSignKeyword_1_1_0_2 = (Keyword)cNameAlternatives_1_1_0.eContents().get(2);
		private final Assignment cParamsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cParamsSetExpressionParserRuleCall_1_2_0 = (RuleCall)cParamsAssignment_1_2.eContents().get(0);
		
		//MultiplicativeExpression returns Expression:
		//  SetExpression ({OperationCall.params+=current} name=( "*" | "/" | "%" ) params+=
		//  SetExpression)*;
		public ParserRule getRule() { return rule; }

		//SetExpression ({OperationCall.params+=current} name=( "*" | "/" | "%" ) params+=
		//SetExpression)*
		public Group getGroup() { return cGroup; }

		//SetExpression
		public RuleCall getSetExpressionParserRuleCall_0() { return cSetExpressionParserRuleCall_0; }

		//({OperationCall.params+=current} name=( "*" | "/" | "%" ) params+=SetExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{OperationCall.params+=current}
		public Action getOperationCallParamsAction_1_0() { return cOperationCallParamsAction_1_0; }

		//name=( "*" | "/" | "%" )
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//"*"|"/"|"%"
		public Alternatives getNameAlternatives_1_1_0() { return cNameAlternatives_1_1_0; }

		//"*"
		public Keyword getNameAsteriskKeyword_1_1_0_0() { return cNameAsteriskKeyword_1_1_0_0; }

		//"/"
		public Keyword getNameSolidusKeyword_1_1_0_1() { return cNameSolidusKeyword_1_1_0_1; }

		//"%"
		public Keyword getNamePercentSignKeyword_1_1_0_2() { return cNamePercentSignKeyword_1_1_0_2; }

		//params+=SetExpression
		public Assignment getParamsAssignment_1_2() { return cParamsAssignment_1_2; }

		//SetExpression
		public RuleCall getParamsSetExpressionParserRuleCall_1_2_0() { return cParamsSetExpressionParserRuleCall_1_2_0; }
	}

	public class SetExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryOrInfixExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSetOperationCallParamsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpSetOperatorEnumRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cParamsUnaryOrInfixExpressionParserRuleCall_1_2_0 = (RuleCall)cParamsAssignment_1_2.eContents().get(0);
		
		//SetExpression returns Expression:
		//  UnaryOrInfixExpression ({SetOperationCall.params+=current} op=SetOperator params+=
		//  UnaryOrInfixExpression)*;
		public ParserRule getRule() { return rule; }

		//UnaryOrInfixExpression ({SetOperationCall.params+=current} op=SetOperator params+=
		//UnaryOrInfixExpression)*
		public Group getGroup() { return cGroup; }

		//UnaryOrInfixExpression
		public RuleCall getUnaryOrInfixExpressionParserRuleCall_0() { return cUnaryOrInfixExpressionParserRuleCall_0; }

		//({SetOperationCall.params+=current} op=SetOperator params+=UnaryOrInfixExpression)
		// *
		public Group getGroup_1() { return cGroup_1; }

		//{SetOperationCall.params+=current}
		public Action getSetOperationCallParamsAction_1_0() { return cSetOperationCallParamsAction_1_0; }

		//op=SetOperator
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//SetOperator
		public RuleCall getOpSetOperatorEnumRuleCall_1_1_0() { return cOpSetOperatorEnumRuleCall_1_1_0; }

		//params+=UnaryOrInfixExpression
		public Assignment getParamsAssignment_1_2() { return cParamsAssignment_1_2; }

		//UnaryOrInfixExpression
		public RuleCall getParamsUnaryOrInfixExpressionParserRuleCall_1_2_0() { return cParamsUnaryOrInfixExpressionParserRuleCall_1_2_0; }
	}

	public class UnaryOrInfixExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOrInfixExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPostopExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnaryOrInfixExpression returns Expression:
		//  UnaryExpression|PostopExpression;
		public ParserRule getRule() { return rule; }

		//UnaryExpression|PostopExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0() { return cUnaryExpressionParserRuleCall_0; }

		//PostopExpression
		public RuleCall getPostopExpressionParserRuleCall_1() { return cPostopExpressionParserRuleCall_1; }
	}

	public class UnaryExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnaryOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final Keyword cNameExclamationMarkKeyword_1_0_0 = (Keyword)cNameAlternatives_1_0.eContents().get(0);
		private final Keyword cNameHyphenMinusKeyword_1_0_1 = (Keyword)cNameAlternatives_1_0.eContents().get(1);
		private final Keyword cNamePlusSignPlusSignKeyword_1_0_2 = (Keyword)cNameAlternatives_1_0.eContents().get(2);
		private final Keyword cNameHyphenMinusHyphenMinusKeyword_1_0_3 = (Keyword)cNameAlternatives_1_0.eContents().get(3);
		private final Keyword cNameTypeofKeyword_1_0_4 = (Keyword)cNameAlternatives_1_0.eContents().get(4);
		private final Keyword cNameDeleteKeyword_1_0_5 = (Keyword)cNameAlternatives_1_0.eContents().get(5);
		private final Keyword cNameTildeKeyword_1_0_6 = (Keyword)cNameAlternatives_1_0.eContents().get(6);
		private final Assignment cParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamsPostopExpressionParserRuleCall_2_0 = (RuleCall)cParamsAssignment_2.eContents().get(0);
		
		//UnaryExpression:
		//  {UnaryOperation} name=( "!" | "-" | "++" | "--" | "typeof" | "delete" | "~" ) params+=
		//  PostopExpression;
		public ParserRule getRule() { return rule; }

		//{UnaryOperation} name=( "!" | "-" | "++" | "--" | "typeof" | "delete" | "~" ) params+=
		//PostopExpression
		public Group getGroup() { return cGroup; }

		//{UnaryOperation}
		public Action getUnaryOperationAction_0() { return cUnaryOperationAction_0; }

		//name=( "!" | "-" | "++" | "--" | "typeof" | "delete" | "~" )
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//"!"|"-"|"++"|"--"|"typeof"|"delete"|"~"
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }

		//"!"
		public Keyword getNameExclamationMarkKeyword_1_0_0() { return cNameExclamationMarkKeyword_1_0_0; }

		//"-"
		public Keyword getNameHyphenMinusKeyword_1_0_1() { return cNameHyphenMinusKeyword_1_0_1; }

		//"++"
		public Keyword getNamePlusSignPlusSignKeyword_1_0_2() { return cNamePlusSignPlusSignKeyword_1_0_2; }

		//"--"
		public Keyword getNameHyphenMinusHyphenMinusKeyword_1_0_3() { return cNameHyphenMinusHyphenMinusKeyword_1_0_3; }

		//"typeof"
		public Keyword getNameTypeofKeyword_1_0_4() { return cNameTypeofKeyword_1_0_4; }

		//"delete"
		public Keyword getNameDeleteKeyword_1_0_5() { return cNameDeleteKeyword_1_0_5; }

		//"~"
		public Keyword getNameTildeKeyword_1_0_6() { return cNameTildeKeyword_1_0_6; }

		//params+=PostopExpression
		public Assignment getParamsAssignment_2() { return cParamsAssignment_2; }

		//PostopExpression
		public RuleCall getParamsPostopExpressionParserRuleCall_2_0() { return cParamsPostopExpressionParserRuleCall_2_0; }
	}

	public class PostopExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PostopExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cInfixExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperationCallPostTargetAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cNameAlternatives_1_1_0 = (Alternatives)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cNameHyphenMinusHyphenMinusKeyword_1_1_0_0 = (Keyword)cNameAlternatives_1_1_0.eContents().get(0);
		private final Keyword cNamePlusSignPlusSignKeyword_1_1_0_1 = (Keyword)cNameAlternatives_1_1_0.eContents().get(1);
		
		//PostopExpression returns Expression:
		//  InfixExpression ({OperationCall.postTarget=current} name=( "--" | "++" ))?;
		public ParserRule getRule() { return rule; }

		//InfixExpression ({OperationCall.postTarget=current} name=( "--" | "++" ))?
		public Group getGroup() { return cGroup; }

		//InfixExpression
		public RuleCall getInfixExpressionParserRuleCall_0() { return cInfixExpressionParserRuleCall_0; }

		//({OperationCall.postTarget=current} name=( "--" | "++" ))?
		public Group getGroup_1() { return cGroup_1; }

		//{OperationCall.postTarget=current}
		public Action getOperationCallPostTargetAction_1_0() { return cOperationCallPostTargetAction_1_0; }

		//name=( "--" | "++" )
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//"--"|"++"
		public Alternatives getNameAlternatives_1_1_0() { return cNameAlternatives_1_1_0; }

		//"--"
		public Keyword getNameHyphenMinusHyphenMinusKeyword_1_1_0_0() { return cNameHyphenMinusHyphenMinusKeyword_1_1_0_0; }

		//"++"
		public Keyword getNamePlusSignPlusSignKeyword_1_1_0_1() { return cNamePlusSignPlusSignKeyword_1_1_0_1; }
	}

	public class InfixExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InfixExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCallExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cOperationCallTargetAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cNameAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_0_2_0 = (RuleCall)cNameAssignment_1_0_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Group cGroup_1_0_4 = (Group)cGroup_1_0.eContents().get(4);
		private final Assignment cParamsAssignment_1_0_4_0 = (Assignment)cGroup_1_0_4.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_1_0_4_0_0 = (RuleCall)cParamsAssignment_1_0_4_0.eContents().get(0);
		private final Group cGroup_1_0_4_1 = (Group)cGroup_1_0_4.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_4_1_0 = (Keyword)cGroup_1_0_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_0_4_1_1 = (Assignment)cGroup_1_0_4_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_1_0_4_1_1_0 = (RuleCall)cParamsAssignment_1_0_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_5 = (Keyword)cGroup_1_0.eContents().get(5);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cAtCallTargetAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cIndexAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cIndexExpressionParserRuleCall_1_1_2_0 = (RuleCall)cIndexAssignment_1_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Group cGroup_1_1_4 = (Group)cGroup_1_1.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_1_1_4_0 = (Keyword)cGroup_1_1_4.eContents().get(0);
		private final Group cGroup_1_1_4_1 = (Group)cGroup_1_1_4.eContents().get(1);
		private final Assignment cParamsAssignment_1_1_4_1_0 = (Assignment)cGroup_1_1_4_1.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_1_1_4_1_0_0 = (RuleCall)cParamsAssignment_1_1_4_1_0.eContents().get(0);
		private final Group cGroup_1_1_4_1_1 = (Group)cGroup_1_1_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_4_1_1_0 = (Keyword)cGroup_1_1_4_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1_4_1_1_1 = (Assignment)cGroup_1_1_4_1_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_1_1_4_1_1_1_0 = (RuleCall)cParamsAssignment_1_1_4_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_4_2 = (Keyword)cGroup_1_1_4.eContents().get(2);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cFeatureCallTargetAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cFullStopKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cTypeAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cTypeIDTerminalRuleCall_1_2_2_0 = (RuleCall)cTypeAssignment_1_2_2.eContents().get(0);
		
		//InfixExpression returns Expression:
		//  CallExpression ({OperationCall.target=current} "." name=ID "(" (params+=Parameter (","
		//  params+=Parameter)*)? ")"|{AtCall.target=current} "[" index=Expression "]" ("(" (
		//  params+=Parameter ("," params+=Parameter)*)? ")")?|{FeatureCall.target=current} "."
		//  type=ID)*;
		public ParserRule getRule() { return rule; }

		//CallExpression ({OperationCall.target=current} "." name=ID "(" (params+=Parameter (","
		//params+=Parameter)*)? ")"|{AtCall.target=current} "[" index=Expression "]" ("(" (
		//params+=Parameter ("," params+=Parameter)*)? ")")?|{FeatureCall.target=current} "."
		//type=ID)*
		public Group getGroup() { return cGroup; }

		//CallExpression
		public RuleCall getCallExpressionParserRuleCall_0() { return cCallExpressionParserRuleCall_0; }

		//({OperationCall.target=current} "." name=ID "(" (params+=Parameter ("," params+=
		//Parameter)*)? ")"|{AtCall.target=current} "[" index=Expression "]" ("(" (params+=
		//Parameter ("," params+=Parameter)*)? ")")?|{FeatureCall.target=current} "." type=ID)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{OperationCall.target=current} "." name=ID "(" (params+=Parameter ("," params+=
		//Parameter)*)? ")"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{OperationCall.target=current}
		public Action getOperationCallTargetAction_1_0_0() { return cOperationCallTargetAction_1_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_0_1() { return cFullStopKeyword_1_0_1; }

		//name=ID
		public Assignment getNameAssignment_1_0_2() { return cNameAssignment_1_0_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_2_0() { return cNameIDTerminalRuleCall_1_0_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_3() { return cLeftParenthesisKeyword_1_0_3; }

		//(params+=Parameter ("," params+=Parameter)*)?
		public Group getGroup_1_0_4() { return cGroup_1_0_4; }

		//params+=Parameter
		public Assignment getParamsAssignment_1_0_4_0() { return cParamsAssignment_1_0_4_0; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_1_0_4_0_0() { return cParamsParameterParserRuleCall_1_0_4_0_0; }

		//("," params+=Parameter)*
		public Group getGroup_1_0_4_1() { return cGroup_1_0_4_1; }

		//","
		public Keyword getCommaKeyword_1_0_4_1_0() { return cCommaKeyword_1_0_4_1_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_1_0_4_1_1() { return cParamsAssignment_1_0_4_1_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_1_0_4_1_1_0() { return cParamsParameterParserRuleCall_1_0_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_5() { return cRightParenthesisKeyword_1_0_5; }

		//{AtCall.target=current} "[" index=Expression "]" ("(" (params+=Parameter ("," params+=
		//Parameter)*)? ")")?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{AtCall.target=current}
		public Action getAtCallTargetAction_1_1_0() { return cAtCallTargetAction_1_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_1() { return cLeftSquareBracketKeyword_1_1_1; }

		//index=Expression
		public Assignment getIndexAssignment_1_1_2() { return cIndexAssignment_1_1_2; }

		//Expression
		public RuleCall getIndexExpressionParserRuleCall_1_1_2_0() { return cIndexExpressionParserRuleCall_1_1_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_3() { return cRightSquareBracketKeyword_1_1_3; }

		//("(" (params+=Parameter ("," params+=Parameter)*)? ")")?
		public Group getGroup_1_1_4() { return cGroup_1_1_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_4_0() { return cLeftParenthesisKeyword_1_1_4_0; }

		//(params+=Parameter ("," params+=Parameter)*)?
		public Group getGroup_1_1_4_1() { return cGroup_1_1_4_1; }

		//params+=Parameter
		public Assignment getParamsAssignment_1_1_4_1_0() { return cParamsAssignment_1_1_4_1_0; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_1_1_4_1_0_0() { return cParamsParameterParserRuleCall_1_1_4_1_0_0; }

		//("," params+=Parameter)*
		public Group getGroup_1_1_4_1_1() { return cGroup_1_1_4_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_4_1_1_0() { return cCommaKeyword_1_1_4_1_1_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_1_1_4_1_1_1() { return cParamsAssignment_1_1_4_1_1_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_1_1_4_1_1_1_0() { return cParamsParameterParserRuleCall_1_1_4_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_4_2() { return cRightParenthesisKeyword_1_1_4_2; }

		//{FeatureCall.target=current} "." type=ID
		public Group getGroup_1_2() { return cGroup_1_2; }

		//{FeatureCall.target=current}
		public Action getFeatureCallTargetAction_1_2_0() { return cFeatureCallTargetAction_1_2_0; }

		//"."
		public Keyword getFullStopKeyword_1_2_1() { return cFullStopKeyword_1_2_1; }

		//type=ID
		public Assignment getTypeAssignment_1_2_2() { return cTypeAssignment_1_2_2; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_1_2_2_0() { return cTypeIDTerminalRuleCall_1_2_2_0; }
	}

	public class CallExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CallExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperationCallTargetAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cParamsAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_1_2_0_0 = (RuleCall)cParamsAssignment_1_2_0.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cGroup_1_2.eContents().get(1);
		private final Keyword cCommaKeyword_1_2_1_0 = (Keyword)cGroup_1_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_1_2_1_1_0 = (RuleCall)cParamsAssignment_1_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//CallExpression returns Expression:
		//  PrimaryExpression ({OperationCall.target=current} "(" (params+=Parameter ("," params
		//  +=Parameter)*)? ")")*;
		public ParserRule getRule() { return rule; }

		//PrimaryExpression ({OperationCall.target=current} "(" (params+=Parameter ("," params
		//+=Parameter)*)? ")")*
		public Group getGroup() { return cGroup; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//({OperationCall.target=current} "(" (params+=Parameter ("," params+=Parameter)*)? ")"
		//)*
		public Group getGroup_1() { return cGroup_1; }

		//{OperationCall.target=current}
		public Action getOperationCallTargetAction_1_0() { return cOperationCallTargetAction_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//(params+=Parameter ("," params+=Parameter)*)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//params+=Parameter
		public Assignment getParamsAssignment_1_2_0() { return cParamsAssignment_1_2_0; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_1_2_0_0() { return cParamsParameterParserRuleCall_1_2_0_0; }

		//("," params+=Parameter)*
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }

		//","
		public Keyword getCommaKeyword_1_2_1_0() { return cCommaKeyword_1_2_1_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_1_2_1_1() { return cParamsAssignment_1_2_1_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_1_2_1_1_0() { return cParamsParameterParserRuleCall_1_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class PrimaryExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstructorCallExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPropertyValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cKeywordVariablesParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cParanthesizedExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//PrimaryExpression returns Expression:
		//  Literal|ConstructorCallExpression|VariableValue|PropertyValue|KeywordVariables|
		//  ParanthesizedExpression; 
		//		
		//    
		//	   
		////	| FeatureCall
		public ParserRule getRule() { return rule; }

		//Literal|ConstructorCallExpression|VariableValue|PropertyValue|KeywordVariables|
		//ParanthesizedExpression 
		//		
		//    
		//	   
		////	| FeatureCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//Literal    
		////	| FeatureCall
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }

		//ConstructorCallExpression
		public RuleCall getConstructorCallExpressionParserRuleCall_1() { return cConstructorCallExpressionParserRuleCall_1; }

		//VariableValue
		public RuleCall getVariableValueParserRuleCall_2() { return cVariableValueParserRuleCall_2; }

		//PropertyValue
		public RuleCall getPropertyValueParserRuleCall_3() { return cPropertyValueParserRuleCall_3; }

		//KeywordVariables
		public RuleCall getKeywordVariablesParserRuleCall_4() { return cKeywordVariablesParserRuleCall_4; }

		//ParanthesizedExpression
		public RuleCall getParanthesizedExpressionParserRuleCall_5() { return cParanthesizedExpressionParserRuleCall_5; }
	}

	public class PropertyValueElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPropertyValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//PropertyValue returns Expression:
		//  {PropertyValue} name=PID;
		public ParserRule getRule() { return rule; }

		//{PropertyValue} name=PID
		public Group getGroup() { return cGroup; }

		//{PropertyValue}
		public Action getPropertyValueAction_0() { return cPropertyValueAction_0; }

		//name=PID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//PID
		public RuleCall getNamePIDTerminalRuleCall_1_0() { return cNamePIDTerminalRuleCall_1_0; }
	}

	public class VariableValueElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//VariableValue returns Expression:
		//  {VariableValue} name=ID;
		public ParserRule getRule() { return rule; }

		//{VariableValue} name=ID
		public Group getGroup() { return cGroup; }

		//{VariableValue}
		public Action getVariableValueAction_0() { return cVariableValueAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class KeywordVariablesElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KeywordVariables");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cKeywordVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameGroupKeywordParserRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameLayoutKeywordParserRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		private final Keyword cNamePropertiesKeyword_1_0_2 = (Keyword)cNameAlternatives_1_0.eContents().get(2);
		
		//KeywordVariables returns Expression:
		//  {KeywordVariable} name=( GroupKeyword | LayoutKeyword | "properties" ); 
		//                       
		//
		////FeatureCall:
		////	OperationCall
		////	;
		////	
		////OperationCall 
		////	: name=(ID|PID) "(" (params+=Parameter ("," params+=Parameter)*)? ")" 
		////	;
		public ParserRule getRule() { return rule; }

		//{KeywordVariable} name=( GroupKeyword | LayoutKeyword | "properties" )
		public Group getGroup() { return cGroup; }

		//{KeywordVariable}
		public Action getKeywordVariableAction_0() { return cKeywordVariableAction_0; }

		//name=( GroupKeyword | LayoutKeyword | "properties" )
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//GroupKeyword|LayoutKeyword|"properties"
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }

		//GroupKeyword
		public RuleCall getNameGroupKeywordParserRuleCall_1_0_0() { return cNameGroupKeywordParserRuleCall_1_0_0; }

		//LayoutKeyword
		public RuleCall getNameLayoutKeywordParserRuleCall_1_0_1() { return cNameLayoutKeywordParserRuleCall_1_0_1; }

		//"properties"
		public Keyword getNamePropertiesKeyword_1_0_2() { return cNamePropertiesKeyword_1_0_2; }
	}

	public class ConstructorCallExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstructorCallExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCreatorCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameNewKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTargetQualifiedNameParserRuleCall_2_0 = (RuleCall)cTargetAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParamsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_4_0_0 = (RuleCall)cParamsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_4_1_1_0 = (RuleCall)cParamsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ConstructorCallExpression returns Expression:
		//  {CreatorCall} name="new" target=QualifiedName "(" (params+=Parameter ("," params+=
		//  Parameter)*)? ")"; 
		//
		////FeatureCall:
		////	OperationCall
		////	;
		////	
		////OperationCall 
		////	: name=(ID|PID) "(" (params+=Parameter ("," params+=Parameter)*)? ")" 
		////	;
		public ParserRule getRule() { return rule; }

		//{CreatorCall} name="new" target=QualifiedName "(" (params+=Parameter ("," params+=
		//Parameter)*)? ")"
		public Group getGroup() { return cGroup; }

		//{CreatorCall}
		public Action getCreatorCallAction_0() { return cCreatorCallAction_0; }

		//name="new"
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//"new"
		public Keyword getNameNewKeyword_1_0() { return cNameNewKeyword_1_0; }

		//target=QualifiedName
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }

		//QualifiedName
		public RuleCall getTargetQualifiedNameParserRuleCall_2_0() { return cTargetQualifiedNameParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(params+=Parameter ("," params+=Parameter)*)?
		public Group getGroup_4() { return cGroup_4; }

		//params+=Parameter
		public Assignment getParamsAssignment_4_0() { return cParamsAssignment_4_0; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_4_0_0() { return cParamsParameterParserRuleCall_4_0_0; }

		//("," params+=Parameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_4_1_1() { return cParamsAssignment_4_1_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_4_1_1_0() { return cParamsParameterParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class LiteralElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRegexpLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralArrayParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLiteralObjectParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLiteralFunctionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Literal returns Expression:
		//  ValueLiteral|RegexpLiteral|LiteralArray|LiteralObject|LiteralFunction;
		public ParserRule getRule() { return rule; }

		//ValueLiteral|RegexpLiteral|LiteralArray|LiteralObject|LiteralFunction
		public Alternatives getAlternatives() { return cAlternatives; }

		//ValueLiteral
		public RuleCall getValueLiteralParserRuleCall_0() { return cValueLiteralParserRuleCall_0; }

		//RegexpLiteral
		public RuleCall getRegexpLiteralParserRuleCall_1() { return cRegexpLiteralParserRuleCall_1; }

		//LiteralArray
		public RuleCall getLiteralArrayParserRuleCall_2() { return cLiteralArrayParserRuleCall_2; }

		//LiteralObject
		public RuleCall getLiteralObjectParserRuleCall_3() { return cLiteralObjectParserRuleCall_3; }

		//LiteralFunction
		public RuleCall getLiteralFunctionParserRuleCall_4() { return cLiteralFunctionParserRuleCall_4; }
	}

	public class LiteralArrayElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralArrayAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementExpressionParserRuleCall_2_0_0 = (RuleCall)cElementAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementExpressionParserRuleCall_2_1_1_0 = (RuleCall)cElementAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LiteralArray returns Expression:
		//  {LiteralArray} "[" (element+=Expression ("," element+=Expression)*)? "]";
		public ParserRule getRule() { return rule; }

		//{LiteralArray} "[" (element+=Expression ("," element+=Expression)*)? "]"
		public Group getGroup() { return cGroup; }

		//{LiteralArray}
		public Action getLiteralArrayAction_0() { return cLiteralArrayAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//(element+=Expression ("," element+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }

		//element+=Expression
		public Assignment getElementAssignment_2_0() { return cElementAssignment_2_0; }

		//Expression
		public RuleCall getElementExpressionParserRuleCall_2_0_0() { return cElementExpressionParserRuleCall_2_0_0; }

		//("," element+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//element+=Expression
		public Assignment getElementAssignment_2_1_1() { return cElementAssignment_2_1_1; }

		//Expression
		public RuleCall getElementExpressionParserRuleCall_2_1_1_0() { return cElementExpressionParserRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class LiteralObjectElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralObjectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cFeaturesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cFeaturesFeatureParserRuleCall_2_0_0 = (RuleCall)cFeaturesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cFeaturesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cFeaturesFeatureParserRuleCall_2_1_1_0 = (RuleCall)cFeaturesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LiteralObject returns Expression:
		//  {LiteralObject} "{" (features+=Feature ("," features+=Feature)*)? "}";
		public ParserRule getRule() { return rule; }

		//{LiteralObject} "{" (features+=Feature ("," features+=Feature)*)? "}"
		public Group getGroup() { return cGroup; }

		//{LiteralObject}
		public Action getLiteralObjectAction_0() { return cLiteralObjectAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(features+=Feature ("," features+=Feature)*)?
		public Group getGroup_2() { return cGroup_2; }

		//features+=Feature
		public Assignment getFeaturesAssignment_2_0() { return cFeaturesAssignment_2_0; }

		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_2_0_0() { return cFeaturesFeatureParserRuleCall_2_0_0; }

		//("," features+=Feature)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//features+=Feature
		public Assignment getFeaturesAssignment_2_1_1() { return cFeaturesAssignment_2_1_1; }

		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_2_1_1_0() { return cFeaturesFeatureParserRuleCall_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class LiteralFunctionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cFunctionKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cFunKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersIDTerminalRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersIDTerminalRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStatementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatementsStatementsParserRuleCall_6_0 = (RuleCall)cStatementsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//LiteralFunction returns Expression:
		//  {LiteralFunction} ("function"|"fun") "(" (parameters+=ID ("," parameters+=ID)*) ")" "{"
		//  statements=Statements "}";
		public ParserRule getRule() { return rule; }

		//{LiteralFunction} ("function"|"fun") "(" (parameters+=ID ("," parameters+=ID)*) ")" "{"
		//statements=Statements "}"
		public Group getGroup() { return cGroup; }

		//{LiteralFunction}
		public Action getLiteralFunctionAction_0() { return cLiteralFunctionAction_0; }

		//"function"|"fun"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"function"
		public Keyword getFunctionKeyword_1_0() { return cFunctionKeyword_1_0; }

		//"fun"
		public Keyword getFunKeyword_1_1() { return cFunKeyword_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//parameters+=ID ("," parameters+=ID)*
		public Group getGroup_3() { return cGroup_3; }

		//parameters+=ID
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }

		//ID
		public RuleCall getParametersIDTerminalRuleCall_3_0_0() { return cParametersIDTerminalRuleCall_3_0_0; }

		//("," parameters+=ID)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parameters+=ID
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }

		//ID
		public RuleCall getParametersIDTerminalRuleCall_3_1_1_0() { return cParametersIDTerminalRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//statements=Statements
		public Assignment getStatementsAssignment_6() { return cStatementsAssignment_6; }

		//Statements
		public RuleCall getStatementsStatementsParserRuleCall_6_0() { return cStatementsStatementsParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class FeatureElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFeatureAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNamePIDTerminalRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0_2 = (RuleCall)cNameAlternatives_1_0.eContents().get(2);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Feature:
		//  {Feature} name=( ID | PID | STRING ) ":" value=Expression;
		public ParserRule getRule() { return rule; }

		//{Feature} name=( ID | PID | STRING ) ":" value=Expression
		public Group getGroup() { return cGroup; }

		//{Feature}
		public Action getFeatureAction_0() { return cFeatureAction_0; }

		//name=( ID | PID | STRING )
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID|PID|STRING
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }

		//PID
		public RuleCall getNamePIDTerminalRuleCall_1_0_1() { return cNamePIDTerminalRuleCall_1_0_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0_2() { return cNameSTRINGTerminalRuleCall_1_0_2; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//value=Expression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_3_0() { return cValueExpressionParserRuleCall_3_0; }
	}

	public class ValueLiteralElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNullLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUndefinedLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStringLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cRealLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cQueryLiteralParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//ValueLiteral returns Expression:
		//  BooleanLiteral|IntegerLiteral|NullLiteral|UndefinedLiteral|StringLiteral|
		//  RealLiteral|QueryLiteral;
		public ParserRule getRule() { return rule; }

		//BooleanLiteral|IntegerLiteral|NullLiteral|UndefinedLiteral|StringLiteral|
		//RealLiteral|QueryLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_0() { return cBooleanLiteralParserRuleCall_0; }

		//IntegerLiteral
		public RuleCall getIntegerLiteralParserRuleCall_1() { return cIntegerLiteralParserRuleCall_1; }

		//NullLiteral
		public RuleCall getNullLiteralParserRuleCall_2() { return cNullLiteralParserRuleCall_2; }

		//UndefinedLiteral
		public RuleCall getUndefinedLiteralParserRuleCall_3() { return cUndefinedLiteralParserRuleCall_3; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_4() { return cStringLiteralParserRuleCall_4; }

		//RealLiteral
		public RuleCall getRealLiteralParserRuleCall_5() { return cRealLiteralParserRuleCall_5; }

		//QueryLiteral
		public RuleCall getQueryLiteralParserRuleCall_6() { return cQueryLiteralParserRuleCall_6; }
	}

	public class BooleanLiteralElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cValAlternatives_1_0 = (Alternatives)cValAssignment_1.eContents().get(0);
		private final Keyword cValTrueKeyword_1_0_0 = (Keyword)cValAlternatives_1_0.eContents().get(0);
		private final Keyword cValFalseKeyword_1_0_1 = (Keyword)cValAlternatives_1_0.eContents().get(1);
		
		//BooleanLiteral returns Expression:
		//  {BooleanLiteral} val=( "true" | "false" ); 
		//	
		//             
		//// TODO: Hex is a string until an int converter is written for it
		public ParserRule getRule() { return rule; }

		//{BooleanLiteral} val=( "true" | "false" )
		public Group getGroup() { return cGroup; }

		//{BooleanLiteral}
		public Action getBooleanLiteralAction_0() { return cBooleanLiteralAction_0; }

		//val=( "true" | "false" )
		public Assignment getValAssignment_1() { return cValAssignment_1; }

		//"true"|"false"
		public Alternatives getValAlternatives_1_0() { return cValAlternatives_1_0; }

		//"true"
		public Keyword getValTrueKeyword_1_0_0() { return cValTrueKeyword_1_0_0; }

		//"false"
		public Keyword getValFalseKeyword_1_0_1() { return cValFalseKeyword_1_0_1; }
	}

	public class IntegerLiteralElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntegerLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cIvalAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cIvalINTTerminalRuleCall_0_1_0 = (RuleCall)cIvalAssignment_0_1.eContents().get(0);
		private final Assignment cSvalAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSvalHEXTerminalRuleCall_1_0 = (RuleCall)cSvalAssignment_1.eContents().get(0);
		
		//IntegerLiteral returns Expression:
		//  {IntegerLiteral} ival=INT|sval=HEX; 
		//// TODO: Hex is a string until an int converter is written for it
		public ParserRule getRule() { return rule; }

		//{IntegerLiteral} ival=INT|sval=HEX 
		//// TODO: Hex is a string until an int converter is written for it
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IntegerLiteral} ival=INT
		public Group getGroup_0() { return cGroup_0; }

		//{IntegerLiteral}
		public Action getIntegerLiteralAction_0_0() { return cIntegerLiteralAction_0_0; }

		//ival=INT
		public Assignment getIvalAssignment_0_1() { return cIvalAssignment_0_1; }

		//INT
		public RuleCall getIvalINTTerminalRuleCall_0_1_0() { return cIvalINTTerminalRuleCall_0_1_0; }

		//sval=HEX
		public Assignment getSvalAssignment_1() { return cSvalAssignment_1; }

		//HEX
		public RuleCall getSvalHEXTerminalRuleCall_1_0() { return cSvalHEXTerminalRuleCall_1_0; }
	}

	public class NullLiteralElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cValNullKeyword_1_0 = (Keyword)cValAssignment_1.eContents().get(0);
		
		//NullLiteral returns Expression:
		//  {NullLiteral} val="null"; 
		//	        
		//// Not a keyword in JS, but prevention of reassignment is wanted.
		public ParserRule getRule() { return rule; }

		//{NullLiteral} val="null"
		public Group getGroup() { return cGroup; }

		//{NullLiteral}
		public Action getNullLiteralAction_0() { return cNullLiteralAction_0; }

		//val="null"
		public Assignment getValAssignment_1() { return cValAssignment_1; }

		//"null"
		public Keyword getValNullKeyword_1_0() { return cValNullKeyword_1_0; }
	}

	public class UndefinedLiteralElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UndefinedLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUndefinedLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cValUndefinedKeyword_1_0 = (Keyword)cValAssignment_1.eContents().get(0);
		
		//UndefinedLiteral returns Expression:
		//  {UndefinedLiteral} val="undefined"; 
		//// Not a keyword in JS, but prevention of reassignment is wanted.
		public ParserRule getRule() { return rule; }

		//{UndefinedLiteral} val="undefined"
		public Group getGroup() { return cGroup; }

		//{UndefinedLiteral}
		public Action getUndefinedLiteralAction_0() { return cUndefinedLiteralAction_0; }

		//val="undefined"
		public Assignment getValAssignment_1() { return cValAssignment_1; }

		//"undefined"
		public Keyword getValUndefinedKeyword_1_0() { return cValUndefinedKeyword_1_0; }
	}

	public class StringLiteralElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValSTRINGTerminalRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		
		//StringLiteral returns Expression:
		//  {StringLiteral} val=STRING;
		public ParserRule getRule() { return rule; }

		//{StringLiteral} val=STRING
		public Group getGroup() { return cGroup; }

		//{StringLiteral}
		public Action getStringLiteralAction_0() { return cStringLiteralAction_0; }

		//val=STRING
		public Assignment getValAssignment_1() { return cValAssignment_1; }

		//STRING
		public RuleCall getValSTRINGTerminalRuleCall_1_0() { return cValSTRINGTerminalRuleCall_1_0; }
	}

	public class RealLiteralElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRealLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValRealValueParserRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		
		//RealLiteral returns Expression:
		//  {RealLiteral} val=RealValue;
		public ParserRule getRule() { return rule; }

		//{RealLiteral} val=RealValue
		public Group getGroup() { return cGroup; }

		//{RealLiteral}
		public Action getRealLiteralAction_0() { return cRealLiteralAction_0; }

		//val=RealValue
		public Assignment getValAssignment_1() { return cValAssignment_1; }

		//RealValue
		public RuleCall getValRealValueParserRuleCall_1_0() { return cValRealValueParserRuleCall_1_0; }
	}

	public class RealValueElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealValue");
		private final RuleCall cREALTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//RealValue returns ecore::EDouble:
		//  REAL;
		public ParserRule getRule() { return rule; }

		//REAL
		public RuleCall getREALTerminalRuleCall() { return cREALTerminalRuleCall; }
	}

	public class RegexpLiteralElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RegexpLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRegexpLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValREGEXTerminalRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		
		//RegexpLiteral returns Expression:
		//  {RegexpLiteral} val=REGEX;
		public ParserRule getRule() { return rule; }

		//{RegexpLiteral} val=REGEX
		public Group getGroup() { return cGroup; }

		//{RegexpLiteral}
		public Action getRegexpLiteralAction_0() { return cRegexpLiteralAction_0; }

		//val=REGEX
		public Assignment getValAssignment_1() { return cValAssignment_1; }

		//REGEX
		public RuleCall getValREGEXTerminalRuleCall_1_0() { return cValREGEXTerminalRuleCall_1_0; }
	}

	public class QueryLiteralElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QueryLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQueryLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cQueryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValAdvicePathParserRuleCall_3_0 = (RuleCall)cValAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//QueryLiteral returns Expression:
		//  {QueryLiteral} "query" "{" val=AdvicePath "}";
		public ParserRule getRule() { return rule; }

		//{QueryLiteral} "query" "{" val=AdvicePath "}"
		public Group getGroup() { return cGroup; }

		//{QueryLiteral}
		public Action getQueryLiteralAction_0() { return cQueryLiteralAction_0; }

		//"query"
		public Keyword getQueryKeyword_1() { return cQueryKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//val=AdvicePath
		public Assignment getValAssignment_3() { return cValAssignment_3; }

		//AdvicePath
		public RuleCall getValAdvicePathParserRuleCall_3_0() { return cValAdvicePathParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ParanthesizedExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParanthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParanthesizedExpression returns Expression:
		//  "(" Expression ")";
		public ParserRule getRule() { return rule; }

		//"(" Expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class VersionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Version");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOriginalAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cOriginalSTRINGTerminalRuleCall_0_0 = (RuleCall)cOriginalAssignment_0.eContents().get(0);
		private final Assignment cOriginalAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOriginalAlfanumSymParserRuleCall_1_0 = (RuleCall)cOriginalAssignment_1.eContents().get(0);
		
		//Version:
		//  original=STRING|original=AlfanumSym; 	
		//
		//    
		//	    
		//	  
		//	
		//
		/// *
		// ** VersionRange TODO: Uses two instances of Version. This works because use of [ ]  ( ) in Version must be 
		// ** escaped with " ". Omni
		// ** version uses version strings with \[ when a range is presented/parsed in string format.
		// * /
		public ParserRule getRule() { return rule; }

		//original=STRING|original=AlfanumSym 	
		//
		//    
		//	    
		//	  
		//	
		//
		/// *
		// ** VersionRange TODO: Uses two instances of Version. This works because use of [ ]  ( ) in Version must be 
		// ** escaped with " ". Omni
		// ** version uses version strings with \[ when a range is presented/parsed in string format.
		// * /
		public Alternatives getAlternatives() { return cAlternatives; }

		//original=STRING
		public Assignment getOriginalAssignment_0() { return cOriginalAssignment_0; }

		//STRING
		public RuleCall getOriginalSTRINGTerminalRuleCall_0_0() { return cOriginalSTRINGTerminalRuleCall_0_0; }

		//original=AlfanumSym
		public Assignment getOriginalAssignment_1() { return cOriginalAssignment_1; }

		//AlfanumSym
		public RuleCall getOriginalAlfanumSymParserRuleCall_1_0() { return cOriginalAlfanumSymParserRuleCall_1_0; }
	}

	public class VersionRangeElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VersionRange");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cMinLimitAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cMinLimitAlternatives_0_0_0 = (Alternatives)cMinLimitAssignment_0_0.eContents().get(0);
		private final Keyword cMinLimitLeftSquareBracketKeyword_0_0_0_0 = (Keyword)cMinLimitAlternatives_0_0_0.eContents().get(0);
		private final Keyword cMinLimitLeftParenthesisKeyword_0_0_0_1 = (Keyword)cMinLimitAlternatives_0_0_0.eContents().get(1);
		private final Assignment cMinAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cMinVersionParserRuleCall_0_1_0 = (RuleCall)cMinAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cMaxAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cMaxVersionParserRuleCall_0_2_1_0 = (RuleCall)cMaxAssignment_0_2_1.eContents().get(0);
		private final Assignment cMaxLimitAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final Alternatives cMaxLimitAlternatives_0_3_0 = (Alternatives)cMaxLimitAssignment_0_3.eContents().get(0);
		private final Keyword cMaxLimitRightSquareBracketKeyword_0_3_0_0 = (Keyword)cMaxLimitAlternatives_0_3_0.eContents().get(0);
		private final Keyword cMaxLimitRightParenthesisKeyword_0_3_0_1 = (Keyword)cMaxLimitAlternatives_0_3_0.eContents().get(1);
		private final Assignment cMinAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cMinVersionParserRuleCall_1_0 = (RuleCall)cMinAssignment_1.eContents().get(0);
		
		//VersionRange:
		//  minLimit=( "[" | "(" ) min=Version ("," max=Version)? maxLimit=( "]" | ")" )|min=Version; 
		//
		/// *
		// ** VersionRange TODO: Uses two instances of Version. This works because use of [ ]  ( ) in Version must be 
		// ** escaped with " ". Omni
		// ** version uses version strings with \[ when a range is presented/parsed in string format.
		// * /
		//    
		//	              
		//	  
		//	
		//
		//// Qualified name
		//// TODO: Needs to disallow whie space between ID and '.', and no embedded comments. A bug in xtext prevents using hidden() here.
		////
		public ParserRule getRule() { return rule; }

		//minLimit=( "[" | "(" ) min=Version ("," max=Version)? maxLimit=( "]" | ")" )|min=Version 
		//
		/// *
		// ** VersionRange TODO: Uses two instances of Version. This works because use of [ ]  ( ) in Version must be 
		// ** escaped with " ". Omni
		// ** version uses version strings with \[ when a range is presented/parsed in string format.
		// * /
		//    
		//	              
		//	  
		//	
		//
		//// Qualified name
		//// TODO: Needs to disallow whie space between ID and '.', and no embedded comments. A bug in xtext prevents using hidden() here.
		////
		public Alternatives getAlternatives() { return cAlternatives; }

		//minLimit=( "[" | "(" ) min=Version ("," max=Version)? maxLimit=( "]" | ")" )
		public Group getGroup_0() { return cGroup_0; }

		//minLimit=( "[" | "(" )
		public Assignment getMinLimitAssignment_0_0() { return cMinLimitAssignment_0_0; }

		//"["|"("
		public Alternatives getMinLimitAlternatives_0_0_0() { return cMinLimitAlternatives_0_0_0; }

		//"["
		public Keyword getMinLimitLeftSquareBracketKeyword_0_0_0_0() { return cMinLimitLeftSquareBracketKeyword_0_0_0_0; }

		//"("
		public Keyword getMinLimitLeftParenthesisKeyword_0_0_0_1() { return cMinLimitLeftParenthesisKeyword_0_0_0_1; }

		//min=Version
		public Assignment getMinAssignment_0_1() { return cMinAssignment_0_1; }

		//Version
		public RuleCall getMinVersionParserRuleCall_0_1_0() { return cMinVersionParserRuleCall_0_1_0; }

		//("," max=Version)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//","
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }

		//max=Version
		public Assignment getMaxAssignment_0_2_1() { return cMaxAssignment_0_2_1; }

		//Version
		public RuleCall getMaxVersionParserRuleCall_0_2_1_0() { return cMaxVersionParserRuleCall_0_2_1_0; }

		//maxLimit=( "]" | ")" )
		public Assignment getMaxLimitAssignment_0_3() { return cMaxLimitAssignment_0_3; }

		//"]"|")"
		public Alternatives getMaxLimitAlternatives_0_3_0() { return cMaxLimitAlternatives_0_3_0; }

		//"]"
		public Keyword getMaxLimitRightSquareBracketKeyword_0_3_0_0() { return cMaxLimitRightSquareBracketKeyword_0_3_0_0; }

		//")"
		public Keyword getMaxLimitRightParenthesisKeyword_0_3_0_1() { return cMaxLimitRightParenthesisKeyword_0_3_0_1; }

		//min=Version
		public Assignment getMinAssignment_1() { return cMinAssignment_1; }

		//Version
		public RuleCall getMinVersionParserRuleCall_1_0() { return cMinVersionParserRuleCall_1_0; }
	}

	public class QualifiedNameElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cHEXTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Alternatives cAlternatives_2_2 = (Alternatives)cGroup_2.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_2_2_0 = (RuleCall)cAlternatives_2_2.eContents().get(0);
		private final RuleCall cHEXTerminalRuleCall_2_2_1 = (RuleCall)cAlternatives_2_2.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2_2_2 = (RuleCall)cAlternatives_2_2.eContents().get(2);
		private final RuleCall cHIDDENBUGParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//QualifiedName returns ecore::EString hidden ( ):
		//  ID (INT|HEX|ID)* ("." ID (INT|HEX|ID)*)* HIDDENBUG; 
		//
		//// Qualified name
		//// TODO: Needs to disallow whie space between ID and '.', and no embedded comments. A bug in xtext prevents using hidden() here.
		////
		public ParserRule getRule() { return rule; }

		//ID (INT|HEX|ID)* ("." ID (INT|HEX|ID)*)* HIDDENBUG
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//(INT|HEX|ID)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }

		//HEX
		public RuleCall getHEXTerminalRuleCall_1_1() { return cHEXTerminalRuleCall_1_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_2() { return cIDTerminalRuleCall_1_2; }

		//("." ID (INT|HEX|ID)*)*
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }

		//(INT|HEX|ID)*
		public Alternatives getAlternatives_2_2() { return cAlternatives_2_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_2_0() { return cINTTerminalRuleCall_2_2_0; }

		//HEX
		public RuleCall getHEXTerminalRuleCall_2_2_1() { return cHEXTerminalRuleCall_2_2_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_2_2() { return cIDTerminalRuleCall_2_2_2; }

		//HIDDENBUG
		public RuleCall getHIDDENBUGParserRuleCall_3() { return cHIDDENBUGParserRuleCall_3; }
	}

	public class HIDDENBUGElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HIDDENBUG");
		private final Keyword cTildeTildeTildeTildeTildeKeyword = (Keyword)rule.eContents().get(1);
		
		//HIDDENBUG returns ecore::EString hidden ( WS , SL_COMMENT , ML_COMMENT ):
		//  "~~~~~"?; 
		//            // TODO: REPLACE HACK WHEN HIDDEN WORKS.
		//
		//
		//// Declare Property ID to include '.'
		public ParserRule getRule() { return rule; }

		//"~~~~~"?
		public Keyword getTildeTildeTildeTildeTildeKeyword() { return cTildeTildeTildeTildeTildeKeyword; }
	}

	public class PROPElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PROP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PROP returns ecore::EString hidden ( ):
		//  "$" "{" QualifiedName "}";   // TODO: REPLACE HACK WHEN HIDDEN WORKS.
		//
		//
		//// Declare Property ID to include '.'
		public ParserRule getRule() { return rule; }

		//"$" "{" QualifiedName "}"
		public Group getGroup() { return cGroup; }

		//"$"
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_2() { return cQualifiedNameParserRuleCall_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class PropertyNameElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyName");
		private final RuleCall cPIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PropertyName returns ecore::EString:
		//  PID;
		public ParserRule getRule() { return rule; }

		//PID
		public RuleCall getPIDTerminalRuleCall() { return cPIDTerminalRuleCall; }
	}

	public class EscapedQualifiedNameElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EscapedQualifiedName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQualifiedNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EscapedQualifiedName returns ecore::EString:
		//  STRING|QualifiedName;
		public ParserRule getRule() { return rule; }

		//STRING|QualifiedName
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_1() { return cQualifiedNameParserRuleCall_1; }
	}

	public class InterfaceNameElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceName");
		private final RuleCall cQualifiedNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//InterfaceName returns ecore::EString:
		//  QualifiedName; 
		//    
		//
		//// CompoundName (whitespace and comments allowed, as sequence can be very long. name parts
		//// do not allow being broken across lines.
		////
		public ParserRule getRule() { return rule; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall() { return cQualifiedNameParserRuleCall; }
	}

	public class CompoundNameElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompoundName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEscapedQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cEscapedQualifiedNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//CompoundName returns ecore::EString:
		//  EscapedQualifiedName "/" EscapedQualifiedName; 
		//
		//// CompoundName (whitespace and comments allowed, as sequence can be very long. name parts
		//// do not allow being broken across lines.
		////
		//          
		//
		//// Aliases that help with unified naming (good for experiments - the indirection can be removed later)
		public ParserRule getRule() { return rule; }

		//EscapedQualifiedName "/" EscapedQualifiedName
		public Group getGroup() { return cGroup; }

		//EscapedQualifiedName
		public RuleCall getEscapedQualifiedNameParserRuleCall_0() { return cEscapedQualifiedNameParserRuleCall_0; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//EscapedQualifiedName
		public RuleCall getEscapedQualifiedNameParserRuleCall_2() { return cEscapedQualifiedNameParserRuleCall_2; }
	}

	public class UnitNameElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitName");
		private final RuleCall cEscapedQualifiedNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UnitName returns ecore::EString:
		//  EscapedQualifiedName; 
		//
		//// Aliases that help with unified naming (good for experiments - the indirection can be removed later)
		public ParserRule getRule() { return rule; }

		//EscapedQualifiedName
		public RuleCall getEscapedQualifiedNameParserRuleCall() { return cEscapedQualifiedNameParserRuleCall; }
	}

	public class PartNameElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PartName");
		private final RuleCall cEscapedQualifiedNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PartName returns ecore::EString:
		//  EscapedQualifiedName;
		public ParserRule getRule() { return rule; }

		//EscapedQualifiedName
		public RuleCall getEscapedQualifiedNameParserRuleCall() { return cEscapedQualifiedNameParserRuleCall; }
	}

	public class SeparatorElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Separator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCommercialAtKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cDollarSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cPercentSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cAmpersandKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cPlusSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cEqualsSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cAsteriskKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cLessThanSignKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cGreaterThanSignKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cColonKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cQuestionMarkKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		
		//Separator returns ecore::EString:
		//  "."|"-"|"!"|"@"|"$"|"%"|"&"|"+"|"="|"*"|"<"|">"|":"|"?"; 
		//
		//
		//// Version, and VersionRange
		//// TODO: make it into a datatype and have better rules, syntax coloring (now integer parts are colored grey, other parts are not colored), etc.
		//// TODO: uncertain if the set of allowed chars is definitive.
		////
		public ParserRule getRule() { return rule; }

		//"."|"-"|"!"|"@"|"$"|"%"|"&"|"+"|"="|"*"|"<"|">"|":"|"?" 
		//
		//
		//// Version, and VersionRange
		//// TODO: make it into a datatype and have better rules, syntax coloring (now integer parts are colored grey, other parts are not colored), etc.
		//// TODO: uncertain if the set of allowed chars is definitive.
		////
		public Alternatives getAlternatives() { return cAlternatives; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_2() { return cExclamationMarkKeyword_2; }

		//"@"
		public Keyword getCommercialAtKeyword_3() { return cCommercialAtKeyword_3; }

		//"$"
		public Keyword getDollarSignKeyword_4() { return cDollarSignKeyword_4; }

		//"%"
		public Keyword getPercentSignKeyword_5() { return cPercentSignKeyword_5; }

		//"&"
		public Keyword getAmpersandKeyword_6() { return cAmpersandKeyword_6; }

		//"+"
		public Keyword getPlusSignKeyword_7() { return cPlusSignKeyword_7; }

		//"="
		public Keyword getEqualsSignKeyword_8() { return cEqualsSignKeyword_8; }

		//"*"
		public Keyword getAsteriskKeyword_9() { return cAsteriskKeyword_9; }

		//"<"
		public Keyword getLessThanSignKeyword_10() { return cLessThanSignKeyword_10; }

		//">"
		public Keyword getGreaterThanSignKeyword_11() { return cGreaterThanSignKeyword_11; }

		//":"
		public Keyword getColonKeyword_12() { return cColonKeyword_12; }

		//"?"
		public Keyword getQuestionMarkKeyword_13() { return cQuestionMarkKeyword_13; }
	}

	public class AlfanumSymElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AlfanumSym");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cHEXTerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cREALTerminalRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cSeparatorParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final RuleCall cHEXTerminalRuleCall_1_3 = (RuleCall)cAlternatives_1.eContents().get(3);
		private final RuleCall cREALTerminalRuleCall_1_4 = (RuleCall)cAlternatives_1.eContents().get(4);
		
		//AlfanumSym returns ecore::EString:
		//  (ID|INT|HEX|REAL) (Separator|ID|INT|HEX|REAL)*; 
		//              
		//
		//
		//// Redeclare the default ID without the ^ keyword escape mechanism, and including
		//// the JS $ char which is allowed in the first position.
		////
		public ParserRule getRule() { return rule; }

		//(ID|INT|HEX|REAL) (Separator|ID|INT|HEX|REAL)*
		public Group getGroup() { return cGroup; }

		//ID|INT|HEX|REAL
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_1() { return cINTTerminalRuleCall_0_1; }

		//HEX
		public RuleCall getHEXTerminalRuleCall_0_2() { return cHEXTerminalRuleCall_0_2; }

		//REAL
		public RuleCall getREALTerminalRuleCall_0_3() { return cREALTerminalRuleCall_0_3; }

		//(Separator|ID|INT|HEX|REAL)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//Separator
		public RuleCall getSeparatorParserRuleCall_1_0() { return cSeparatorParserRuleCall_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_2() { return cINTTerminalRuleCall_1_2; }

		//HEX
		public RuleCall getHEXTerminalRuleCall_1_3() { return cHEXTerminalRuleCall_1_3; }

		//REAL
		public RuleCall getREALTerminalRuleCall_1_4() { return cREALTerminalRuleCall_1_4; }
	}
	
	
	public class AssignmentOperatorElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AssignmentOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSETEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSETEqualsSignKeyword_0_0 = (Keyword)cSETEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSET_PLUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSET_PLUSPlusSignEqualsSignKeyword_1_0 = (Keyword)cSET_PLUSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSET_MINUSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSET_MINUSHyphenMinusEqualsSignKeyword_2_0 = (Keyword)cSET_MINUSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSET_MULEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSET_MULAsteriskEqualsSignKeyword_3_0 = (Keyword)cSET_MULEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSET_DIVEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSET_DIVSolidusEqualsSignKeyword_4_0 = (Keyword)cSET_DIVEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSET_MODEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSET_MODPercentSignEqualsSignKeyword_5_0 = (Keyword)cSET_MODEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cSET_ANDEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cSET_ANDAmpersandEqualsSignKeyword_6_0 = (Keyword)cSET_ANDEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cSET_XOREnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cSET_XORCircumflexAccentEqualsSignKeyword_7_0 = (Keyword)cSET_XOREnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cSET_OREnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cSET_ORVerticalLineEqualsSignKeyword_8_0 = (Keyword)cSET_OREnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cSET_LSHIFTEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cSET_LSHIFTLessThanSignLessThanSignEqualsSignKeyword_9_0 = (Keyword)cSET_LSHIFTEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cSET_RSHIFTEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cSET_RSHIFTGreaterThanSignGreaterThanSignEqualsSignKeyword_10_0 = (Keyword)cSET_RSHIFTEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cSET_RSHIFT_0EnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cSET_RSHIFT_0GreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_11_0 = (Keyword)cSET_RSHIFT_0EnumLiteralDeclaration_11.eContents().get(0);
		
		//enum AssignmentOperator:
		//  SET="=" | SET_PLUS="+=" | SET_MINUS="-=" | SET_MUL="*=" | SET_DIV="/=" | SET_MOD="%=" |
		//  SET_AND="&=" | SET_XOR="^=" | SET_OR="|=" | SET_LSHIFT="<<=" | SET_RSHIFT=">>=" |
		//  SET_RSHIFT_0=">>>="; 
		//		
		/// * EXPRESSIONS * /
		public EnumRule getRule() { return rule; }

		//SET="=" | SET_PLUS="+=" | SET_MINUS="-=" | SET_MUL="*=" | SET_DIV="/=" | SET_MOD="%=" |
		//SET_AND="&=" | SET_XOR="^=" | SET_OR="|=" | SET_LSHIFT="<<=" | SET_RSHIFT=">>=" |
		//SET_RSHIFT_0=">>>=" 
		//		
		/// * EXPRESSIONS * /
		public Alternatives getAlternatives() { return cAlternatives; }

		//SET="="
		public EnumLiteralDeclaration getSETEnumLiteralDeclaration_0() { return cSETEnumLiteralDeclaration_0; }

		//"="
		public Keyword getSETEqualsSignKeyword_0_0() { return cSETEqualsSignKeyword_0_0; }

		//SET_PLUS="+="
		public EnumLiteralDeclaration getSET_PLUSEnumLiteralDeclaration_1() { return cSET_PLUSEnumLiteralDeclaration_1; }

		//"+="
		public Keyword getSET_PLUSPlusSignEqualsSignKeyword_1_0() { return cSET_PLUSPlusSignEqualsSignKeyword_1_0; }

		//SET_MINUS="-="
		public EnumLiteralDeclaration getSET_MINUSEnumLiteralDeclaration_2() { return cSET_MINUSEnumLiteralDeclaration_2; }

		//"-="
		public Keyword getSET_MINUSHyphenMinusEqualsSignKeyword_2_0() { return cSET_MINUSHyphenMinusEqualsSignKeyword_2_0; }

		//SET_MUL="*="
		public EnumLiteralDeclaration getSET_MULEnumLiteralDeclaration_3() { return cSET_MULEnumLiteralDeclaration_3; }

		//"*="
		public Keyword getSET_MULAsteriskEqualsSignKeyword_3_0() { return cSET_MULAsteriskEqualsSignKeyword_3_0; }

		//SET_DIV="/="
		public EnumLiteralDeclaration getSET_DIVEnumLiteralDeclaration_4() { return cSET_DIVEnumLiteralDeclaration_4; }

		//"/="
		public Keyword getSET_DIVSolidusEqualsSignKeyword_4_0() { return cSET_DIVSolidusEqualsSignKeyword_4_0; }

		//SET_MOD="%="
		public EnumLiteralDeclaration getSET_MODEnumLiteralDeclaration_5() { return cSET_MODEnumLiteralDeclaration_5; }

		//"%="
		public Keyword getSET_MODPercentSignEqualsSignKeyword_5_0() { return cSET_MODPercentSignEqualsSignKeyword_5_0; }

		//SET_AND="&="
		public EnumLiteralDeclaration getSET_ANDEnumLiteralDeclaration_6() { return cSET_ANDEnumLiteralDeclaration_6; }

		//"&="
		public Keyword getSET_ANDAmpersandEqualsSignKeyword_6_0() { return cSET_ANDAmpersandEqualsSignKeyword_6_0; }

		//SET_XOR="^="
		public EnumLiteralDeclaration getSET_XOREnumLiteralDeclaration_7() { return cSET_XOREnumLiteralDeclaration_7; }

		//"^="
		public Keyword getSET_XORCircumflexAccentEqualsSignKeyword_7_0() { return cSET_XORCircumflexAccentEqualsSignKeyword_7_0; }

		//SET_OR="|="
		public EnumLiteralDeclaration getSET_OREnumLiteralDeclaration_8() { return cSET_OREnumLiteralDeclaration_8; }

		//"|="
		public Keyword getSET_ORVerticalLineEqualsSignKeyword_8_0() { return cSET_ORVerticalLineEqualsSignKeyword_8_0; }

		//SET_LSHIFT="<<="
		public EnumLiteralDeclaration getSET_LSHIFTEnumLiteralDeclaration_9() { return cSET_LSHIFTEnumLiteralDeclaration_9; }

		//"<<="
		public Keyword getSET_LSHIFTLessThanSignLessThanSignEqualsSignKeyword_9_0() { return cSET_LSHIFTLessThanSignLessThanSignEqualsSignKeyword_9_0; }

		//SET_RSHIFT=">>="
		public EnumLiteralDeclaration getSET_RSHIFTEnumLiteralDeclaration_10() { return cSET_RSHIFTEnumLiteralDeclaration_10; }

		//">>="
		public Keyword getSET_RSHIFTGreaterThanSignGreaterThanSignEqualsSignKeyword_10_0() { return cSET_RSHIFTGreaterThanSignGreaterThanSignEqualsSignKeyword_10_0; }

		//SET_RSHIFT_0=">>>="
		public EnumLiteralDeclaration getSET_RSHIFT_0EnumLiteralDeclaration_11() { return cSET_RSHIFT_0EnumLiteralDeclaration_11; }

		//">>>="
		public Keyword getSET_RSHIFT_0GreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_11_0() { return cSET_RSHIFT_0GreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_11_0; }
	}

	public class RelationalOperatorElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQ_MATCHESEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQ_MATCHESTildeEqualsSignKeyword_0_0 = (Keyword)cEQ_MATCHESEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEQEqualsSignEqualsSignKeyword_1_0 = (Keyword)cEQEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEQ_IDENTITYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEQ_IDENTITYEqualsSignEqualsSignEqualsSignKeyword_2_0 = (Keyword)cEQ_IDENTITYEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cEQ_NOTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cEQ_NOTExclamationMarkEqualsSignKeyword_3_0 = (Keyword)cEQ_NOTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEQ_NOT_IDENTITYEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEQ_NOT_IDENTITYExclamationMarkEqualsSignEqualsSignKeyword_4_0 = (Keyword)cEQ_NOT_IDENTITYEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cEQ_GTEQEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cEQ_GTEQGreaterThanSignEqualsSignKeyword_5_0 = (Keyword)cEQ_GTEQEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cEQ_LEEQEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cEQ_LEEQLessThanSignEqualsSignKeyword_6_0 = (Keyword)cEQ_LEEQEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cEQ_GTEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cEQ_GTGreaterThanSignKeyword_7_0 = (Keyword)cEQ_GTEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cEQ_LTEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cEQ_LTLessThanSignKeyword_8_0 = (Keyword)cEQ_LTEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cEQ_INSTANCEOFEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cEQ_INSTANCEOFInstanceofKeyword_9_0 = (Keyword)cEQ_INSTANCEOFEnumLiteralDeclaration_9.eContents().get(0);
		
		//enum RelationalOperator:
		//  EQ_MATCHES="~=" | EQ="==" | EQ_IDENTITY="===" | EQ_NOT="!=" | EQ_NOT_IDENTITY="!==" |
		//  EQ_GTEQ=">=" | EQ_LEEQ="<=" | EQ_GT=">" | EQ_LT="<" | EQ_INSTANCEOF="instanceof";
		public EnumRule getRule() { return rule; }

		//EQ_MATCHES="~=" | EQ="==" | EQ_IDENTITY="===" | EQ_NOT="!=" | EQ_NOT_IDENTITY="!==" |
		//EQ_GTEQ=">=" | EQ_LEEQ="<=" | EQ_GT=">" | EQ_LT="<" | EQ_INSTANCEOF="instanceof"
		public Alternatives getAlternatives() { return cAlternatives; }

		//EQ_MATCHES="~="
		public EnumLiteralDeclaration getEQ_MATCHESEnumLiteralDeclaration_0() { return cEQ_MATCHESEnumLiteralDeclaration_0; }

		//"~="
		public Keyword getEQ_MATCHESTildeEqualsSignKeyword_0_0() { return cEQ_MATCHESTildeEqualsSignKeyword_0_0; }

		//EQ="=="
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_1() { return cEQEnumLiteralDeclaration_1; }

		//"=="
		public Keyword getEQEqualsSignEqualsSignKeyword_1_0() { return cEQEqualsSignEqualsSignKeyword_1_0; }

		//EQ_IDENTITY="==="
		public EnumLiteralDeclaration getEQ_IDENTITYEnumLiteralDeclaration_2() { return cEQ_IDENTITYEnumLiteralDeclaration_2; }

		//"==="
		public Keyword getEQ_IDENTITYEqualsSignEqualsSignEqualsSignKeyword_2_0() { return cEQ_IDENTITYEqualsSignEqualsSignEqualsSignKeyword_2_0; }

		//EQ_NOT="!="
		public EnumLiteralDeclaration getEQ_NOTEnumLiteralDeclaration_3() { return cEQ_NOTEnumLiteralDeclaration_3; }

		//"!="
		public Keyword getEQ_NOTExclamationMarkEqualsSignKeyword_3_0() { return cEQ_NOTExclamationMarkEqualsSignKeyword_3_0; }

		//EQ_NOT_IDENTITY="!=="
		public EnumLiteralDeclaration getEQ_NOT_IDENTITYEnumLiteralDeclaration_4() { return cEQ_NOT_IDENTITYEnumLiteralDeclaration_4; }

		//"!=="
		public Keyword getEQ_NOT_IDENTITYExclamationMarkEqualsSignEqualsSignKeyword_4_0() { return cEQ_NOT_IDENTITYExclamationMarkEqualsSignEqualsSignKeyword_4_0; }

		//EQ_GTEQ=">="
		public EnumLiteralDeclaration getEQ_GTEQEnumLiteralDeclaration_5() { return cEQ_GTEQEnumLiteralDeclaration_5; }

		//">="
		public Keyword getEQ_GTEQGreaterThanSignEqualsSignKeyword_5_0() { return cEQ_GTEQGreaterThanSignEqualsSignKeyword_5_0; }

		//EQ_LEEQ="<="
		public EnumLiteralDeclaration getEQ_LEEQEnumLiteralDeclaration_6() { return cEQ_LEEQEnumLiteralDeclaration_6; }

		//"<="
		public Keyword getEQ_LEEQLessThanSignEqualsSignKeyword_6_0() { return cEQ_LEEQLessThanSignEqualsSignKeyword_6_0; }

		//EQ_GT=">"
		public EnumLiteralDeclaration getEQ_GTEnumLiteralDeclaration_7() { return cEQ_GTEnumLiteralDeclaration_7; }

		//">"
		public Keyword getEQ_GTGreaterThanSignKeyword_7_0() { return cEQ_GTGreaterThanSignKeyword_7_0; }

		//EQ_LT="<"
		public EnumLiteralDeclaration getEQ_LTEnumLiteralDeclaration_8() { return cEQ_LTEnumLiteralDeclaration_8; }

		//"<"
		public Keyword getEQ_LTLessThanSignKeyword_8_0() { return cEQ_LTLessThanSignKeyword_8_0; }

		//EQ_INSTANCEOF="instanceof"
		public EnumLiteralDeclaration getEQ_INSTANCEOFEnumLiteralDeclaration_9() { return cEQ_INSTANCEOFEnumLiteralDeclaration_9; }

		//"instanceof"
		public Keyword getEQ_INSTANCEOFInstanceofKeyword_9_0() { return cEQ_INSTANCEOFInstanceofKeyword_9_0; }
	}

	public class SetOperatorElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SetOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSelectEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSelectSelectKeyword_0_0 = (Keyword)cSelectEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCollectEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCollectCollectKeyword_1_0 = (Keyword)cCollectEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRejectEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRejectRejectKeyword_2_0 = (Keyword)cRejectEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cExistsEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cExistsExistsKeyword_3_0 = (Keyword)cExistsEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cNotexistsEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cNotexistsNotexistsKeyword_4_0 = (Keyword)cNotexistsEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cForeachEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cForeachForeachKeyword_5_0 = (Keyword)cForeachEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum SetOperator:
		//  select | collect | reject | exists | notexists | foreach;
		public EnumRule getRule() { return rule; }

		//select | collect | reject | exists | notexists | foreach
		public Alternatives getAlternatives() { return cAlternatives; }

		//select
		public EnumLiteralDeclaration getSelectEnumLiteralDeclaration_0() { return cSelectEnumLiteralDeclaration_0; }

		//"select"
		public Keyword getSelectSelectKeyword_0_0() { return cSelectSelectKeyword_0_0; }

		//collect
		public EnumLiteralDeclaration getCollectEnumLiteralDeclaration_1() { return cCollectEnumLiteralDeclaration_1; }

		//"collect"
		public Keyword getCollectCollectKeyword_1_0() { return cCollectCollectKeyword_1_0; }

		//reject
		public EnumLiteralDeclaration getRejectEnumLiteralDeclaration_2() { return cRejectEnumLiteralDeclaration_2; }

		//"reject"
		public Keyword getRejectRejectKeyword_2_0() { return cRejectRejectKeyword_2_0; }

		//exists
		public EnumLiteralDeclaration getExistsEnumLiteralDeclaration_3() { return cExistsEnumLiteralDeclaration_3; }

		//"exists"
		public Keyword getExistsExistsKeyword_3_0() { return cExistsExistsKeyword_3_0; }

		//notexists
		public EnumLiteralDeclaration getNotexistsEnumLiteralDeclaration_4() { return cNotexistsEnumLiteralDeclaration_4; }

		//"notexists"
		public Keyword getNotexistsNotexistsKeyword_4_0() { return cNotexistsNotexistsKeyword_4_0; }

		//foreach
		public EnumLiteralDeclaration getForeachEnumLiteralDeclaration_5() { return cForeachEnumLiteralDeclaration_5; }

		//"foreach"
		public Keyword getForeachForeachKeyword_5_0() { return cForeachForeachKeyword_5_0; }
	}

	public class VisibilityElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Visibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPublicPublicKeyword_0_0 = (Keyword)cPublicEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPrivatePrivateKeyword_1_0 = (Keyword)cPrivateEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Visibility:
		//  public | private;
		public EnumRule getRule() { return rule; }

		//public | private
		public Alternatives getAlternatives() { return cAlternatives; }

		//public
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration_0() { return cPublicEnumLiteralDeclaration_0; }

		//"public"
		public Keyword getPublicPublicKeyword_0_0() { return cPublicPublicKeyword_0_0; }

		//private
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration_1() { return cPrivateEnumLiteralDeclaration_1; }

		//"private"
		public Keyword getPrivatePrivateKeyword_1_0() { return cPrivatePrivateKeyword_1_0; }
	}

	public class ExecutionModeElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ExecutionMode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cParallelEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cParallelParallelKeyword_0_0 = (Keyword)cParallelEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSequentialEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSequentialSequentialKeyword_1_0 = (Keyword)cSequentialEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ExecutionMode:
		//  parallel | sequential; 
		//   	         
		//
		//
		//// Version, and VersionRange
		//// TODO: make it into a datatype and have better rules, syntax coloring (now integer parts are colored grey, other parts are not colored), etc.
		//// TODO: uncertain if the set of allowed chars is definitive.
		////
		public EnumRule getRule() { return rule; }

		//parallel | sequential 
		//   	         
		//
		//
		//// Version, and VersionRange
		//// TODO: make it into a datatype and have better rules, syntax coloring (now integer parts are colored grey, other parts are not colored), etc.
		//// TODO: uncertain if the set of allowed chars is definitive.
		////
		public Alternatives getAlternatives() { return cAlternatives; }

		//parallel
		public EnumLiteralDeclaration getParallelEnumLiteralDeclaration_0() { return cParallelEnumLiteralDeclaration_0; }

		//"parallel"
		public Keyword getParallelParallelKeyword_0_0() { return cParallelParallelKeyword_0_0; }

		//sequential
		public EnumLiteralDeclaration getSequentialEnumLiteralDeclaration_1() { return cSequentialEnumLiteralDeclaration_1; }

		//"sequential"
		public Keyword getSequentialSequentialKeyword_1_0() { return cSequentialSequentialKeyword_1_0; }
	}
	
	private BeeModelElements pBeeModel;
	private ImportElements pImport;
	private JavaImporterElements pJavaImporter;
	private NativeImporterElements pNativeImporter;
	private UnitElements pUnit;
	private ProvidedCapabilityElements pProvidedCapability;
	private RequiredCapabilityElements pRequiredCapability;
	private NamedPropertyStatementsElements pNamedPropertyStatements;
	private CompoundPropertyOperationElements pCompoundPropertyOperation;
	private PropertyOperationElements pPropertyOperation;
	private FilteredPropertyOperationElements pFilteredPropertyOperation;
	private SetPropertyOperationElements pSetPropertyOperation;
	private UnsetPropertyOperationElements pUnsetPropertyOperation;
	private SynchronizationElements pSynchronization;
	private SynchronizedPartElements pSynchronizedPart;
	private PathGroupElements pPathGroup;
	private PathVectorElementElements pPathVectorElement;
	private FilteredPathVectorElements pFilteredPathVector;
	private BasePathVectorElements pBasePathVector;
	private UnbasedPathVectorElements pUnbasedPathVector;
	private CompoundPathVectorElements pCompoundPathVector;
	private PathElements pPath;
	private PrerequisiteElements pPrerequisite;
	private ClosureElements pClosure;
	private PrerequisiteEntryElements pPrerequisiteEntry;
	private PartInSelfElements pPartInSelf;
	private CapabilityReferencedPartElements pCapabilityReferencedPart;
	private CompoundReferencesElements pCompoundReferences;
	private BuildMethodElements pBuildMethod;
	private ParameterElements pParameter;
	private GroupKeywordElements pGroupKeyword;
	private LayoutKeywordElements pLayoutKeyword;
	private LayoutElements pLayout;
	private GroupElements pGroup;
	private RepositoryConfigurationElements pRepositoryConfiguration;
	private URIElements pURI;
	private NamedAdviceElements pNamedAdvice;
	private AdviceElements pAdvice;
	private CompoundAdviceElements pCompoundAdvice;
	private AdviceStatementElements pAdviceStatement;
	private AdvicePathElements pAdvicePath;
	private SelectorElements pSelector;
	private MultiNodeSelectorElements pMultiNodeSelector;
	private DiscriminatingSelectorElements pDiscriminatingSelector;
	private NodeSelectorElements pNodeSelector;
	private NameSelectorElements pNameSelector;
	private ThisSelectorElements pThisSelector;
	private ParentSelectorElements pParentSelector;
	private ChildrenSelectorElements pChildrenSelector;
	private AncestorSelectorElements pAncestorSelector;
	private RegexpSelectorElements pRegexpSelector;
	private WildcardNodeElements pWildcardNode;
	private FilterElements pFilter;
	private PreConditionElements pPreCondition;
	private PostConditionElements pPostCondition;
	private AssertionExpressionElements pAssertionExpression;
	private StatementElements pStatement;
	private BreakStatementElements pBreakStatement;
	private ContinueStatementElements pContinueStatement;
	private CompoundStatementElements pCompoundStatement;
	private StatementsElements pStatements;
	private WhileStatementElements pWhileStatement;
	private SwitchStatementElements pSwitchStatement;
	private CaseElements pCase;
	private ForStatementElements pForStatement;
	private DoWhileStatementElements pDoWhileStatement;
	private ReturnStatementElements pReturnStatement;
	private FunctionStatementElements pFunctionStatement;
	private IfStatementElements pIfStatement;
	private LabelStatementElements pLabelStatement;
	private ThrowStatementElements pThrowStatement;
	private TryCatchStatementElements pTryCatchStatement;
	private CatchBlockElements pCatchBlock;
	private FinallyBlockElements pFinallyBlock;
	private WithStatementElements pWithStatement;
	private AssignmentOperatorElements unknownRuleAssignmentOperator;
	private RelationalOperatorElements unknownRuleRelationalOperator;
	private VarExpressionListElements pVarExpressionList;
	private ExpressionListElements pExpressionList;
	private VarExpressionElements pVarExpression;
	private ExpressionElements pExpression;
	private AssignmentExpressionElements pAssignmentExpression;
	private ChainedExpressionElements pChainedExpression;
	private IfExpressionElements pIfExpression;
	private OrExpressionElements pOrExpression;
	private AndExpressionElements pAndExpression;
	private BitwiseExpressionElements pBitwiseExpression;
	private RelationalExpressionElements pRelationalExpression;
	private ShiftExpressionElements pShiftExpression;
	private AdditiveExpressionElements pAdditiveExpression;
	private MultiplicativeExpressionElements pMultiplicativeExpression;
	private SetOperatorElements unknownRuleSetOperator;
	private SetExpressionElements pSetExpression;
	private UnaryOrInfixExpressionElements pUnaryOrInfixExpression;
	private UnaryExpressionElements pUnaryExpression;
	private PostopExpressionElements pPostopExpression;
	private InfixExpressionElements pInfixExpression;
	private CallExpressionElements pCallExpression;
	private PrimaryExpressionElements pPrimaryExpression;
	private PropertyValueElements pPropertyValue;
	private VariableValueElements pVariableValue;
	private KeywordVariablesElements pKeywordVariables;
	private ConstructorCallExpressionElements pConstructorCallExpression;
	private LiteralElements pLiteral;
	private LiteralArrayElements pLiteralArray;
	private LiteralObjectElements pLiteralObject;
	private LiteralFunctionElements pLiteralFunction;
	private FeatureElements pFeature;
	private ValueLiteralElements pValueLiteral;
	private BooleanLiteralElements pBooleanLiteral;
	private IntegerLiteralElements pIntegerLiteral;
	private NullLiteralElements pNullLiteral;
	private UndefinedLiteralElements pUndefinedLiteral;
	private StringLiteralElements pStringLiteral;
	private RealLiteralElements pRealLiteral;
	private RealValueElements pRealValue;
	private RegexpLiteralElements pRegexpLiteral;
	private QueryLiteralElements pQueryLiteral;
	private ParanthesizedExpressionElements pParanthesizedExpression;
	private VersionElements pVersion;
	private VersionRangeElements pVersionRange;
	private QualifiedNameElements pQualifiedName;
	private HIDDENBUGElements pHIDDENBUG;
	private PROPElements pPROP;
	private PropertyNameElements pPropertyName;
	private EscapedQualifiedNameElements pEscapedQualifiedName;
	private InterfaceNameElements pInterfaceName;
	private CompoundNameElements pCompoundName;
	private UnitNameElements pUnitName;
	private PartNameElements pPartName;
	private VisibilityElements unknownRuleVisibility;
	private ExecutionModeElements unknownRuleExecutionMode;
	private SeparatorElements pSeparator;
	private AlfanumSymElements pAlfanumSym;
	private TerminalRule tID;
	private TerminalRule tPID;
	private TerminalRule tREGEX;
	private TerminalRule tSTRING;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tHEX;
	private TerminalRule tINT;
	private TerminalRule tREAL;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public BeeLangGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//BeeModel:
	//  imports+=Import* body=Unit;
	public BeeModelElements getBeeModelAccess() {
		return (pBeeModel != null) ? pBeeModel : (pBeeModel = new BeeModelElements());
	}
	
	public ParserRule getBeeModelRule() {
		return getBeeModelAccess().getRule();
	}

	//Import:
	//  reexport?="reexport"? "import" importer=( JavaImporter | NativeImporter ) ("as"
	//  nameSpace=ID)? ";";
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//JavaImporter:
	//  name=QualifiedName package?=".*"?;
	public JavaImporterElements getJavaImporterAccess() {
		return (pJavaImporter != null) ? pJavaImporter : (pJavaImporter = new JavaImporterElements());
	}
	
	public ParserRule getJavaImporterRule() {
		return getJavaImporterAccess().getRule();
	}

	//NativeImporter:
	//  uriString=STRING; 
	//          
	//		
	/// * UNIT - the body (compare to java class)
	// * /
	public NativeImporterElements getNativeImporterAccess() {
		return (pNativeImporter != null) ? pNativeImporter : (pNativeImporter = new NativeImporterElements());
	}
	
	public ParserRule getNativeImporterRule() {
		return getNativeImporterAccess().getRule();
	}

	//Unit returns BuildUnit hidden ( WS , ML_COMMENT , SL_COMMENT ):
	//  executionMode=ExecutionMode? "unit" name=UnitName? ("version" version=Version)? (
	//  "implements" implements+=InterfaceName ("," implements+=InterfaceName)*)? "{" (
	//  "properties" CompoundPropertyOperation+=NamedPropertyStatements)* ("provides" "{" (
	//  providedCapabilities+=ProvidedCapability ";")+ "}"|"provides" providedCapabilities
	//  +=ProvidedCapability ";"|"requires" "{" (requiredCapabilities+=RequiredCapability
	//  ";")+ "}"|"requires" requiredCapabilities+=RequiredCapability ";"|"meta" "requires"
	//  "{" (metaRequiredCapabilities+=RequiredCapability ";")+ "}"|"meta" "requires"
	//  metaRequiredCapabilities+=RequiredCapability ";"|"advice" advice+=NamedAdvice|
	//  "sequential" "{" synchronizations+=Synchronization+ "}"|"sequential"
	//  synchronizations+=Synchronization|buildMethods+=BuildMethod|"repositories" "{"
	//  repositoryConfigurations+=RepositoryConfiguration* "}")* "}"; 
	//		
	/// * UNIT - the body (compare to java class)
	// * /	
	//            
	//	    
	//	          
	//		           
	//	
	//			 //-- PROPERTIES
	//			 // goes first, because they may be used in the other clauses.
	//			 //
	//			          
	//		
	//		 	 //-- PROVIDES
	//			               
	//			          
	//			//-- REQUIRES & META REQUIRES
	//			               
	//			          
	//			                  
	//			            
	//			//--ADVICE
	//			       
	//			//--SYNCHRONIZE
	//			                  
	//			           
	//			//--BUILD METHODS
	//			         			
	//			//-- REPOSITORIES
	public UnitElements getUnitAccess() {
		return (pUnit != null) ? pUnit : (pUnit = new UnitElements());
	}
	
	public ParserRule getUnitRule() {
		return getUnitAccess().getRule();
	}

	//ProvidedCapability:
	//  ("when" filter=Filter)? interface=QualifiedName "/" name=QualifiedName ("/" version=
	//  Version)?;
	public ProvidedCapabilityElements getProvidedCapabilityAccess() {
		return (pProvidedCapability != null) ? pProvidedCapability : (pProvidedCapability = new ProvidedCapabilityElements());
	}
	
	public ParserRule getProvidedCapabilityRule() {
		return getProvidedCapabilityAccess().getRule();
	}

	//RequiredCapability:
	//  ("when" filter=Filter)? interface=QualifiedName "/" name=QualifiedName ("/" range=
	//  VersionRange)?; 
	//                   
	//
	//// An optionally named sequence of property statements
	public RequiredCapabilityElements getRequiredCapabilityAccess() {
		return (pRequiredCapability != null) ? pRequiredCapability : (pRequiredCapability = new RequiredCapabilityElements());
	}
	
	public ParserRule getRequiredCapabilityRule() {
		return getRequiredCapabilityAccess().getRule();
	}

	//NamedPropertyStatements returns NamedProperties:
	//  name=ID? body=CompoundPropertyOperation; 
	//
	//// An optionally named sequence of property statements
	//    
	//	             
	//	
	//
	//// Sequence of possibly filtered property statements
	public NamedPropertyStatementsElements getNamedPropertyStatementsAccess() {
		return (pNamedPropertyStatements != null) ? pNamedPropertyStatements : (pNamedPropertyStatements = new NamedPropertyStatementsElements());
	}
	
	public ParserRule getNamedPropertyStatementsRule() {
		return getNamedPropertyStatementsAccess().getRule();
	}

	//CompoundPropertyOperation:
	//  "{" operations+=PropertyOperation* "}"; 
	//
	//// Sequence of possibly filtered property statements	
	//    
	//	           
	//	
	//
	//// For model generation, to get supertype correct
	public CompoundPropertyOperationElements getCompoundPropertyOperationAccess() {
		return (pCompoundPropertyOperation != null) ? pCompoundPropertyOperation : (pCompoundPropertyOperation = new CompoundPropertyOperationElements());
	}
	
	public ParserRule getCompoundPropertyOperationRule() {
		return getCompoundPropertyOperationAccess().getRule();
	}

	//PropertyOperation:
	//  FilteredPropertyOperation|SetPropertyOperation|UnsetPropertyOperation|
	//  CompoundPropertyOperation; 
	//
	//// For model generation, to get supertype correct
	public PropertyOperationElements getPropertyOperationAccess() {
		return (pPropertyOperation != null) ? pPropertyOperation : (pPropertyOperation = new PropertyOperationElements());
	}
	
	public ParserRule getPropertyOperationRule() {
		return getPropertyOperationAccess().getRule();
	}

	//FilteredPropertyOperation:
	//  "when" filter=Filter body=( SetPropertyOperation | UnsetPropertyOperation |
	//  CompoundPropertyOperation );
	public FilteredPropertyOperationElements getFilteredPropertyOperationAccess() {
		return (pFilteredPropertyOperation != null) ? pFilteredPropertyOperation : (pFilteredPropertyOperation = new FilteredPropertyOperationElements());
	}
	
	public ParserRule getFilteredPropertyOperationRule() {
		return getFilteredPropertyOperationAccess().getRule();
	}

	//SetPropertyOperation:
	//  immutable?="immutable"? key=PropertyName op=AssignmentOperator value=Expression ";";
	public SetPropertyOperationElements getSetPropertyOperationAccess() {
		return (pSetPropertyOperation != null) ? pSetPropertyOperation : (pSetPropertyOperation = new SetPropertyOperationElements());
	}
	
	public ParserRule getSetPropertyOperationRule() {
		return getSetPropertyOperationAccess().getRule();
	}

	//UnsetPropertyOperation:
	//  "unset" key=PropertyName ";";
	public UnsetPropertyOperationElements getUnsetPropertyOperationAccess() {
		return (pUnsetPropertyOperation != null) ? pUnsetPropertyOperation : (pUnsetPropertyOperation = new UnsetPropertyOperationElements());
	}
	
	public ParserRule getUnsetPropertyOperationRule() {
		return getUnsetPropertyOperationAccess().getRule();
	}

	//Synchronization:
	//  partrefs+=SynchronizedPart ("," partrefs+=SynchronizedPart)+ ";"; 
	//
	// 
	//	                // at least 2
	public SynchronizationElements getSynchronizationAccess() {
		return (pSynchronization != null) ? pSynchronization : (pSynchronization = new SynchronizationElements());
	}
	
	public ParserRule getSynchronizationRule() {
		return getSynchronizationAccess().getRule();
	}

	//SynchronizedPart returns ecore::EString:
	//  CompoundName ("#" PartName)?|PartName; 
	//	
	//
	//	      
	//	  
	//	
	//	
	/// * PATH GROUP * /
	public SynchronizedPartElements getSynchronizedPartAccess() {
		return (pSynchronizedPart != null) ? pSynchronizedPart : (pSynchronizedPart = new SynchronizedPartElements());
	}
	
	public ParserRule getSynchronizedPartRule() {
		return getSynchronizedPartAccess().getRule();
	}

	//PathGroup:
	//  paths+=PathVectorElement* ("annotations" annotations=CompoundPropertyOperation)?; 
	//	
	/// * PATH GROUP * /
	public PathGroupElements getPathGroupAccess() {
		return (pPathGroup != null) ? pPathGroup : (pPathGroup = new PathGroupElements());
	}
	
	public ParserRule getPathGroupRule() {
		return getPathGroupAccess().getRule();
	}

	//PathVectorElement:
	//  FilteredPathVector|BasePathVector|UnbasedPathVector;
	public PathVectorElementElements getPathVectorElementAccess() {
		return (pPathVectorElement != null) ? pPathVectorElement : (pPathVectorElement = new PathVectorElementElements());
	}
	
	public ParserRule getPathVectorElementRule() {
		return getPathVectorElementAccess().getRule();
	}

	//FilteredPathVector:
	//  "when" filter=Filter body=( BasePathVector | UnbasedPathVector | CompoundPathVector );
	public FilteredPathVectorElements getFilteredPathVectorAccess() {
		return (pFilteredPathVector != null) ? pFilteredPathVector : (pFilteredPathVector = new FilteredPathVectorElements());
	}
	
	public ParserRule getFilteredPathVectorRule() {
		return getFilteredPathVectorAccess().getRule();
	}

	//BasePathVector returns PathVector:
	//  basePath=Path "[" (paths+=Path ("," paths+=Path)*)? "]" ";";
	public BasePathVectorElements getBasePathVectorAccess() {
		return (pBasePathVector != null) ? pBasePathVector : (pBasePathVector = new BasePathVectorElements());
	}
	
	public ParserRule getBasePathVectorRule() {
		return getBasePathVectorAccess().getRule();
	}

	//UnbasedPathVector returns PathVector:
	//  paths+=Path ("," paths+=Path)* ";";
	public UnbasedPathVectorElements getUnbasedPathVectorAccess() {
		return (pUnbasedPathVector != null) ? pUnbasedPathVector : (pUnbasedPathVector = new UnbasedPathVectorElements());
	}
	
	public ParserRule getUnbasedPathVectorRule() {
		return getUnbasedPathVectorAccess().getRule();
	}

	//CompoundPathVector:
	//  "{" body+=PathVectorElement* "}"; 
	//	
	//            
	//
	/// *
	// * A path can be written without quotes if it consists of safe chars 
	// * TODO: repace use of ID with better definition.
	// * TODO: Validation of path syntax (MS, n*x) ?
	// * /
	public CompoundPathVectorElements getCompoundPathVectorAccess() {
		return (pCompoundPathVector != null) ? pCompoundPathVector : (pCompoundPathVector = new CompoundPathVectorElements());
	}
	
	public ParserRule getCompoundPathVectorRule() {
		return getCompoundPathVectorAccess().getRule();
	}

	//Path returns ecore::EString hidden ( ):
	//  STRING|"/"? QualifiedName ("/" QualifiedName)* "/"?; 
	//
	/// *
	// * A path can be written without quotes if it consists of safe chars 
	// * TODO: repace use of ID with better definition.
	// * TODO: Validation of path syntax (MS, n*x) ?
	// * /
	//  
	//	  
	//	            // HIDDENBUG
	public PathElements getPathAccess() {
		return (pPath != null) ? pPath : (pPath = new PathElements());
	}
	
	public ParserRule getPathRule() {
		return getPathAccess().getRule();
	}

	//Prerequisite:
	//  (("when" filter=Filter)? (alias=ID "=")? (partReference=PrerequisiteEntry closure=
	//  Closure?)) ";";
	public PrerequisiteElements getPrerequisiteAccess() {
		return (pPrerequisite != null) ? pPrerequisite : (pPrerequisite = new PrerequisiteElements());
	}
	
	public ParserRule getPrerequisiteRule() {
		return getPrerequisiteAccess().getRule();
	}

	//Closure:
	//  "with" "{" ("properties" properties=CompoundPropertyOperation)? ("advice" advice=
	//  CompoundAdvice)? "}";
	public ClosureElements getClosureAccess() {
		return (pClosure != null) ? pClosure : (pClosure = new ClosureElements());
	}
	
	public ParserRule getClosureRule() {
		return getClosureAccess().getRule();
	}

	//PrerequisiteEntry:
	//  PartInSelf|CapabilityReferencedPart|CompoundReferences;
	public PrerequisiteEntryElements getPrerequisiteEntryAccess() {
		return (pPrerequisiteEntry != null) ? pPrerequisiteEntry : (pPrerequisiteEntry = new PrerequisiteEntryElements());
	}
	
	public ParserRule getPrerequisiteEntryRule() {
		return getPrerequisiteEntryAccess().getRule();
	}

	//PartInSelf:
	//  partName=PartName; 
	//	
	//	      // i.e. self#partName
	public PartInSelfElements getPartInSelfAccess() {
		return (pPartInSelf != null) ? pPartInSelf : (pPartInSelf = new PartInSelfElements());
	}
	
	public ParserRule getPartInSelfRule() {
		return getPartInSelfAccess().getRule();
	}

	//CapabilityReferencedPart:
	//  interface=InterfaceName "/" name=UnitName ("/" range=VersionRange)? "#" partName=
	//  PartName|interface=InterfaceName "/" name=UnitName ("/" range=VersionRange)?;
	public CapabilityReferencedPartElements getCapabilityReferencedPartAccess() {
		return (pCapabilityReferencedPart != null) ? pCapabilityReferencedPart : (pCapabilityReferencedPart = new CapabilityReferencedPartElements());
	}
	
	public ParserRule getCapabilityReferencedPartRule() {
		return getCapabilityReferencedPartAccess().getRule();
	}

	//CompoundReferences:
	//  "{" prerequisites+=Prerequisite* "}";
	public CompoundReferencesElements getCompoundReferencesAccess() {
		return (pCompoundReferences != null) ? pCompoundReferences : (pCompoundReferences = new CompoundReferencesElements());
	}
	
	public ParserRule getCompoundReferencesRule() {
		return getCompoundReferencesAccess().getRule();
	}

	//BuildMethod:
	//  visibility=Visibility? executionMode=ExecutionMode? name=PartName ("provides"
	//  providedCapabilities+=ProvidedCapability ("," providedCapabilities+=
	//  ProvidedCapability)*)? preCondition=PreCondition? postCondition=PostCondition? "{" (
	//  "properties" properties=CompoundPropertyOperation)? advice=Advice? group=Group?
	//  layout=Layout? statements=Statements? "}";
	public BuildMethodElements getBuildMethodAccess() {
		return (pBuildMethod != null) ? pBuildMethod : (pBuildMethod = new BuildMethodElements());
	}
	
	public ParserRule getBuildMethodRule() {
		return getBuildMethodAccess().getRule();
	}

	//Parameter:
	//  val=Expression;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//GroupKeyword returns ecore::EString:
	//  "input"; 
	//
	//        // used to be 'group'
	public GroupKeywordElements getGroupKeywordAccess() {
		return (pGroupKeyword != null) ? pGroupKeyword : (pGroupKeyword = new GroupKeywordElements());
	}
	
	public ParserRule getGroupKeywordRule() {
		return getGroupKeywordAccess().getRule();
	}

	//LayoutKeyword returns ecore::EString:
	//  "output";   // used to be 'group'
	//      // used to be 'layout'
	public LayoutKeywordElements getLayoutKeywordAccess() {
		return (pLayoutKeyword != null) ? pLayoutKeyword : (pLayoutKeyword = new LayoutKeywordElements());
	}
	
	public ParserRule getLayoutKeywordRule() {
		return getLayoutKeywordAccess().getRule();
	}

	//Layout:
	//  LayoutKeyword postCondition=PostCondition? "{" body=PathGroup? "}";   // used to be 'layout'
	public LayoutElements getLayoutAccess() {
		return (pLayout != null) ? pLayout : (pLayout = new LayoutElements());
	}
	
	public ParserRule getLayoutRule() {
		return getLayoutAccess().getRule();
	}

	//Group:
	//  GroupKeyword preCondition=PreCondition? postCondition=PostCondition? "{"
	//  prerequisites+=Prerequisite* "}";
	public GroupElements getGroupAccess() {
		return (pGroup != null) ? pGroup : (pGroup = new GroupElements());
	}
	
	public ParserRule getGroupRule() {
		return getGroupAccess().getRule();
	}

	//RepositoryConfiguration:
	//  (location=URI|"resolver" resolverClass=QualifiedName) advice=CompoundAdvice? ";"; 
	//
	//
	//	              
	//	
	//
	/// *
	// ** URI TODO: Would like to have better parsing of URL - don't know if possible to push this to lexer
	// ** as we may want to support namespaces (using 'ns:' prefix) (for importing b3 files, common advice, rules etc.).
	// ** The ':' clashes with 'scheme:' which is the only known BuildMethod in an opaque URI. 
	// * /
	public RepositoryConfigurationElements getRepositoryConfigurationAccess() {
		return (pRepositoryConfiguration != null) ? pRepositoryConfiguration : (pRepositoryConfiguration = new RepositoryConfigurationElements());
	}
	
	public ParserRule getRepositoryConfigurationRule() {
		return getRepositoryConfigurationAccess().getRule();
	}

	//URI returns ecore::EString:
	//  STRING; 
	//
	/// *
	// ** URI TODO: Would like to have better parsing of URL - don't know if possible to push this to lexer
	// ** as we may want to support namespaces (using 'ns:' prefix) (for importing b3 files, common advice, rules etc.).
	// ** The ':' clashes with 'scheme:' which is the only known BuildMethod in an opaque URI. 
	// * /
	//    
	//	
	//
	/// * ADVICE
	// ** TODO: Had to use '?' instead if '*', and '??' intead of '**' as these operators are intermixed with / which sometimes
	// ** makes them look like comments. (Forbidding // comments is not the wanted sollution). 
	// **
	// * /
	public URIElements getURIAccess() {
		return (pURI != null) ? pURI : (pURI = new URIElements());
	}
	
	public ParserRule getURIRule() {
		return getURIAccess().getRule();
	}

	//NamedAdvice:
	//  name=ID? advice=CompoundAdvice; 
	//
	/// * ADVICE
	// ** TODO: Had to use '?' instead if '*', and '??' intead of '**' as these operators are intermixed with / which sometimes
	// ** makes them look like comments. (Forbidding // comments is not the wanted sollution). 
	// **
	// * /
	public NamedAdviceElements getNamedAdviceAccess() {
		return (pNamedAdvice != null) ? pNamedAdvice : (pNamedAdvice = new NamedAdviceElements());
	}
	
	public ParserRule getNamedAdviceRule() {
		return getNamedAdviceAccess().getRule();
	}

	//Advice:
	//  "advice" CompoundAdvice;
	public AdviceElements getAdviceAccess() {
		return (pAdvice != null) ? pAdvice : (pAdvice = new AdviceElements());
	}
	
	public ParserRule getAdviceRule() {
		return getAdviceAccess().getRule();
	}

	//CompoundAdvice:
	//  "{" (advice+=AdviceStatement ";")* "}";
	public CompoundAdviceElements getCompoundAdviceAccess() {
		return (pCompoundAdvice != null) ? pCompoundAdvice : (pCompoundAdvice = new CompoundAdviceElements());
	}
	
	public ParserRule getCompoundAdviceRule() {
		return getCompoundAdviceAccess().getRule();
	}

	//AdviceStatement:
	//  path=AdvicePath (op=AssignmentOperator value=Expression|advice=CompoundAdvice); 
	//
	//                   
	//
	//// a | ** | [foo==bar] | .. | a 
	//// a:**:[foo==bar]:..:a
	public AdviceStatementElements getAdviceStatementAccess() {
		return (pAdviceStatement != null) ? pAdviceStatement : (pAdviceStatement = new AdviceStatementElements());
	}
	
	public ParserRule getAdviceStatementRule() {
		return getAdviceStatementAccess().getRule();
	}

	//AdvicePath:
	//  absolute?=":"? selectors+=Selector (":" selectors+=Selector)*; 
	//
	//// a | ** | [foo==bar] | .. | a 
	//// a:**:[foo==bar]:..:a
	public AdvicePathElements getAdvicePathAccess() {
		return (pAdvicePath != null) ? pAdvicePath : (pAdvicePath = new AdvicePathElements());
	}
	
	public ParserRule getAdvicePathRule() {
		return getAdvicePathAccess().getRule();
	}

	//Selector:
	//  DiscriminatingSelector|MultiNodeSelector|NodeSelector;
	public SelectorElements getSelectorAccess() {
		return (pSelector != null) ? pSelector : (pSelector = new SelectorElements());
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}

	//MultiNodeSelector returns Selector:
	//  NameSelector|ThisSelector|ChildrenSelector|AncestorSelector|RegexpSelector;
	public MultiNodeSelectorElements getMultiNodeSelectorAccess() {
		return (pMultiNodeSelector != null) ? pMultiNodeSelector : (pMultiNodeSelector = new MultiNodeSelectorElements());
	}
	
	public ParserRule getMultiNodeSelectorRule() {
		return getMultiNodeSelectorAccess().getRule();
	}

	//DiscriminatingSelector returns Selector:
	//  selector=MultiNodeSelector "[" predicate=Expression "]";
	public DiscriminatingSelectorElements getDiscriminatingSelectorAccess() {
		return (pDiscriminatingSelector != null) ? pDiscriminatingSelector : (pDiscriminatingSelector = new DiscriminatingSelectorElements());
	}
	
	public ParserRule getDiscriminatingSelectorRule() {
		return getDiscriminatingSelectorAccess().getRule();
	}

	//NodeSelector returns Selector:
	//  ParentSelector;
	public NodeSelectorElements getNodeSelectorAccess() {
		return (pNodeSelector != null) ? pNodeSelector : (pNodeSelector = new NodeSelectorElements());
	}
	
	public ParserRule getNodeSelectorRule() {
		return getNodeSelectorAccess().getRule();
	}

	//NameSelector:
	//  name=QualifiedName;
	public NameSelectorElements getNameSelectorAccess() {
		return (pNameSelector != null) ? pNameSelector : (pNameSelector = new NameSelectorElements());
	}
	
	public ParserRule getNameSelectorRule() {
		return getNameSelectorAccess().getRule();
	}

	//ThisSelector:
	//  {ThisSelector} ".";
	public ThisSelectorElements getThisSelectorAccess() {
		return (pThisSelector != null) ? pThisSelector : (pThisSelector = new ThisSelectorElements());
	}
	
	public ParserRule getThisSelectorRule() {
		return getThisSelectorAccess().getRule();
	}

	//ParentSelector:
	//  {ParentSelector} "..";
	public ParentSelectorElements getParentSelectorAccess() {
		return (pParentSelector != null) ? pParentSelector : (pParentSelector = new ParentSelectorElements());
	}
	
	public ParserRule getParentSelectorRule() {
		return getParentSelectorAccess().getRule();
	}

	//ChildrenSelector:
	//  {ChildrenSelector} "*";
	public ChildrenSelectorElements getChildrenSelectorAccess() {
		return (pChildrenSelector != null) ? pChildrenSelector : (pChildrenSelector = new ChildrenSelectorElements());
	}
	
	public ParserRule getChildrenSelectorRule() {
		return getChildrenSelectorAccess().getRule();
	}

	//AncestorSelector:
	//  {AncestorSelector} "**";
	public AncestorSelectorElements getAncestorSelectorAccess() {
		return (pAncestorSelector != null) ? pAncestorSelector : (pAncestorSelector = new AncestorSelectorElements());
	}
	
	public ParserRule getAncestorSelectorRule() {
		return getAncestorSelectorAccess().getRule();
	}

	//RegexpSelector:
	//  {RegexpSelector} pattern=REGEX;
	public RegexpSelectorElements getRegexpSelectorAccess() {
		return (pRegexpSelector != null) ? pRegexpSelector : (pRegexpSelector = new RegexpSelectorElements());
	}
	
	public ParserRule getRegexpSelectorRule() {
		return getRegexpSelectorAccess().getRule();
	}

	//WildcardNode returns ecore::EString:
	//  "*" "*"?;
	public WildcardNodeElements getWildcardNodeAccess() {
		return (pWildcardNode != null) ? pWildcardNode : (pWildcardNode = new WildcardNodeElements());
	}
	
	public ParserRule getWildcardNodeRule() {
		return getWildcardNodeAccess().getRule();
	}

	//Filter:
	//  "(" predicate=Expression ")"; 
	//
	//              
	//
	/// * ASSERTS * /
	public FilterElements getFilterAccess() {
		return (pFilter != null) ? pFilter : (pFilter = new FilterElements());
	}
	
	public ParserRule getFilterRule() {
		return getFilterAccess().getRule();
	}

	//PreCondition:
	//  "precondition" "{" asserts+=AssertionExpression* "}"; 
	//
	/// * ASSERTS * /
	public PreConditionElements getPreConditionAccess() {
		return (pPreCondition != null) ? pPreCondition : (pPreCondition = new PreConditionElements());
	}
	
	public ParserRule getPreConditionRule() {
		return getPreConditionAccess().getRule();
	}

	//PostCondition:
	//  "postcondition" "{" asserts+=AssertionExpression* "}";
	public PostConditionElements getPostConditionAccess() {
		return (pPostCondition != null) ? pPostCondition : (pPostCondition = new PostConditionElements());
	}
	
	public ParserRule getPostConditionRule() {
		return getPostConditionAccess().getRule();
	}

	//AssertionExpression:
	//  "assert" expr=Expression ("," message=STRING)? ";"; 
	//
	//             
	//
	//
	/// * STATEMENTS * /
	public AssertionExpressionElements getAssertionExpressionAccess() {
		return (pAssertionExpression != null) ? pAssertionExpression : (pAssertionExpression = new AssertionExpressionElements());
	}
	
	public ParserRule getAssertionExpressionRule() {
		return getAssertionExpressionAccess().getRule();
	}

	//Statement:
	//  IfStatement|SwitchStatement|WhileStatement|ForStatement|DoWhileStatement|
	//  CompoundStatement|VarExpression? ";"|BreakStatement|ContinueStatement|
	//  ReturnStatement|FunctionStatement|LabelStatement|ThrowStatement|
	//  TryCatchStatement|WithStatement; 
	//
	/// * STATEMENTS * /
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//BreakStatement:
	//  {BreakStatement} "break" label=ID? ";";
	public BreakStatementElements getBreakStatementAccess() {
		return (pBreakStatement != null) ? pBreakStatement : (pBreakStatement = new BreakStatementElements());
	}
	
	public ParserRule getBreakStatementRule() {
		return getBreakStatementAccess().getRule();
	}

	//ContinueStatement:
	//  {ContinueStatement} "continue" label=ID? ";";
	public ContinueStatementElements getContinueStatementAccess() {
		return (pContinueStatement != null) ? pContinueStatement : (pContinueStatement = new ContinueStatementElements());
	}
	
	public ParserRule getContinueStatementRule() {
		return getContinueStatementAccess().getRule();
	}

	//CompoundStatement:
	//  "{" statements=Statements "}";
	public CompoundStatementElements getCompoundStatementAccess() {
		return (pCompoundStatement != null) ? pCompoundStatement : (pCompoundStatement = new CompoundStatementElements());
	}
	
	public ParserRule getCompoundStatementRule() {
		return getCompoundStatementAccess().getRule();
	}

	//Statements:
	//  statements+=Statement+;
	public StatementsElements getStatementsAccess() {
		return (pStatements != null) ? pStatements : (pStatements = new StatementsElements());
	}
	
	public ParserRule getStatementsRule() {
		return getStatementsAccess().getRule();
	}

	//WhileStatement:
	//  "while" "(" condition=Expression ")" body=Statement;
	public WhileStatementElements getWhileStatementAccess() {
		return (pWhileStatement != null) ? pWhileStatement : (pWhileStatement = new WhileStatementElements());
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}

	//SwitchStatement:
	//  "switch" "(" switchExpr=VarExpression ")" "{" case+=Case* ("default" ":" statements=
	//  Statements?)? "}";
	public SwitchStatementElements getSwitchStatementAccess() {
		return (pSwitchStatement != null) ? pSwitchStatement : (pSwitchStatement = new SwitchStatementElements());
	}
	
	public ParserRule getSwitchStatementRule() {
		return getSwitchStatementAccess().getRule();
	}

	//Case:
	//  "case" condition=ValueLiteral ":" statements=Statements?; 
	//		
	//        
	//
	//// TODO: needs validation that expression list only has one entry and is a LHS value
	//// if inLoop == true. Needs validation that RHS is a collection item if inLoop == true.
	////
	public CaseElements getCaseAccess() {
		return (pCase != null) ? pCase : (pCase = new CaseElements());
	}
	
	public ParserRule getCaseRule() {
		return getCaseAccess().getRule();
	}

	//ForStatement:
	//  {ForStatement} "for" "(" init=VarExpressionList? (regular?=";" cond=Expression? ";"
	//  iterate=ExpressionList?|"in" iterate=Expression) ")" body=Statement; 
	//
	//// TODO: needs validation that expression list only has one entry and is a LHS value
	//// if inLoop == true. Needs validation that RHS is a collection item if inLoop == true.
	////
	public ForStatementElements getForStatementAccess() {
		return (pForStatement != null) ? pForStatement : (pForStatement = new ForStatementElements());
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}

	//DoWhileStatement:
	//  "do" statement=Statement "while" "(" condition=Expression ")" ";";
	public DoWhileStatementElements getDoWhileStatementAccess() {
		return (pDoWhileStatement != null) ? pDoWhileStatement : (pDoWhileStatement = new DoWhileStatementElements());
	}
	
	public ParserRule getDoWhileStatementRule() {
		return getDoWhileStatementAccess().getRule();
	}

	//ReturnStatement:
	//  "return" return=Expression? ";";
	public ReturnStatementElements getReturnStatementAccess() {
		return (pReturnStatement != null) ? pReturnStatement : (pReturnStatement = new ReturnStatementElements());
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}

	//FunctionStatement:
	//  "function" name=ID "(" (params+=ID ("," params+=ID)*) ")" "{" statements=Statements "}";
	public FunctionStatementElements getFunctionStatementAccess() {
		return (pFunctionStatement != null) ? pFunctionStatement : (pFunctionStatement = new FunctionStatementElements());
	}
	
	public ParserRule getFunctionStatementRule() {
		return getFunctionStatementAccess().getRule();
	}

	//IfStatement:
	//  "if" "(" cond=Expression ")" then=Statement ("else" else=Statement)?;
	public IfStatementElements getIfStatementAccess() {
		return (pIfStatement != null) ? pIfStatement : (pIfStatement = new IfStatementElements());
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}

	//LabelStatement:
	//  name=ID ":" statement=Statement;
	public LabelStatementElements getLabelStatementAccess() {
		return (pLabelStatement != null) ? pLabelStatement : (pLabelStatement = new LabelStatementElements());
	}
	
	public ParserRule getLabelStatementRule() {
		return getLabelStatementAccess().getRule();
	}

	//ThrowStatement:
	//  "throw" expr=Expression ";";
	public ThrowStatementElements getThrowStatementAccess() {
		return (pThrowStatement != null) ? pThrowStatement : (pThrowStatement = new ThrowStatementElements());
	}
	
	public ParserRule getThrowStatementRule() {
		return getThrowStatementAccess().getRule();
	}

	//TryCatchStatement:
	//  "try" tryBlock=CompoundStatement (catchBlock=CatchBlock finallyBlock=FinallyBlock?|
	//  finally=FinallyBlock);
	public TryCatchStatementElements getTryCatchStatementAccess() {
		return (pTryCatchStatement != null) ? pTryCatchStatement : (pTryCatchStatement = new TryCatchStatementElements());
	}
	
	public ParserRule getTryCatchStatementRule() {
		return getTryCatchStatementAccess().getRule();
	}

	//CatchBlock:
	//  "catch" "(" variable=ID ")" catchBlock=CompoundStatement;
	public CatchBlockElements getCatchBlockAccess() {
		return (pCatchBlock != null) ? pCatchBlock : (pCatchBlock = new CatchBlockElements());
	}
	
	public ParserRule getCatchBlockRule() {
		return getCatchBlockAccess().getRule();
	}

	//FinallyBlock:
	//  "finally" finallyBlock=CompoundStatement;
	public FinallyBlockElements getFinallyBlockAccess() {
		return (pFinallyBlock != null) ? pFinallyBlock : (pFinallyBlock = new FinallyBlockElements());
	}
	
	public ParserRule getFinallyBlockRule() {
		return getFinallyBlockAccess().getRule();
	}

	//WithStatement:
	//  "with" "(" expr=Expression ")" statement=Statement; 
	//		
	//                
	//		
	/// * EXPRESSIONS * /
	public WithStatementElements getWithStatementAccess() {
		return (pWithStatement != null) ? pWithStatement : (pWithStatement = new WithStatementElements());
	}
	
	public ParserRule getWithStatementRule() {
		return getWithStatementAccess().getRule();
	}

	//enum AssignmentOperator:
	//  SET="=" | SET_PLUS="+=" | SET_MINUS="-=" | SET_MUL="*=" | SET_DIV="/=" | SET_MOD="%=" |
	//  SET_AND="&=" | SET_XOR="^=" | SET_OR="|=" | SET_LSHIFT="<<=" | SET_RSHIFT=">>=" |
	//  SET_RSHIFT_0=">>>="; 
	//		
	/// * EXPRESSIONS * /
	public AssignmentOperatorElements getAssignmentOperatorAccess() {
		return (unknownRuleAssignmentOperator != null) ? unknownRuleAssignmentOperator : (unknownRuleAssignmentOperator = new AssignmentOperatorElements());
	}
	
	public EnumRule getAssignmentOperatorRule() {
		return getAssignmentOperatorAccess().getRule();
	}

	//enum RelationalOperator:
	//  EQ_MATCHES="~=" | EQ="==" | EQ_IDENTITY="===" | EQ_NOT="!=" | EQ_NOT_IDENTITY="!==" |
	//  EQ_GTEQ=">=" | EQ_LEEQ="<=" | EQ_GT=">" | EQ_LT="<" | EQ_INSTANCEOF="instanceof";
	public RelationalOperatorElements getRelationalOperatorAccess() {
		return (unknownRuleRelationalOperator != null) ? unknownRuleRelationalOperator : (unknownRuleRelationalOperator = new RelationalOperatorElements());
	}
	
	public EnumRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}

	//VarExpressionList:
	//  expr+=VarExpression ("," expr+=VarExpression)*;
	public VarExpressionListElements getVarExpressionListAccess() {
		return (pVarExpressionList != null) ? pVarExpressionList : (pVarExpressionList = new VarExpressionListElements());
	}
	
	public ParserRule getVarExpressionListRule() {
		return getVarExpressionListAccess().getRule();
	}

	//ExpressionList:
	//  expr+=Expression ("," expr+=Expression)*; 
	//                  
	//
	//// Assignment is optional i JS
	//// Also makes it possible to use VarExpression in a for(var a in xxx) loop
	////
	public ExpressionListElements getExpressionListAccess() {
		return (pExpressionList != null) ? pExpressionList : (pExpressionList = new ExpressionListElements());
	}
	
	public ParserRule getExpressionListRule() {
		return getExpressionListAccess().getRule();
	}

	//VarExpression returns Expression:
	//  Expression|{VarExpression} "var" name=ID ("=" value=Expression)?; 
	//
	//// Assignment is optional i JS
	//// Also makes it possible to use VarExpression in a for(var a in xxx) loop
	////
	//                  
	//
	//
	////Expression returns Expression: value = AssignmentExpression ;
	public VarExpressionElements getVarExpressionAccess() {
		return (pVarExpression != null) ? pVarExpression : (pVarExpression = new VarExpressionElements());
	}
	
	public ParserRule getVarExpressionRule() {
		return getVarExpressionAccess().getRule();
	}

	//Expression:
	//  AssignmentExpression; 
	//
	//
	////Expression returns Expression: value = AssignmentExpression ;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//AssignmentExpression returns Expression:
	//  IfExpression ({AssignmentOperation.left=current} op=AssignmentOperator right=
	//  AssignmentExpression)?; 
	//
	//    
	//	       
	//	
	//
	////ChainExpression returns Expression:
	////	ChainedExpression //({ChainExpression.first=current} ',' next=ChainedExpression)*
	////	;
	public AssignmentExpressionElements getAssignmentExpressionAccess() {
		return (pAssignmentExpression != null) ? pAssignmentExpression : (pAssignmentExpression = new AssignmentExpressionElements());
	}
	
	public ParserRule getAssignmentExpressionRule() {
		return getAssignmentExpressionAccess().getRule();
	}

	//ChainedExpression returns Expression:
	//  IfExpression; 
	//
	////ChainExpression returns Expression:
	////	ChainedExpression //({ChainExpression.first=current} ',' next=ChainedExpression)*
	////	;
	public ChainedExpressionElements getChainedExpressionAccess() {
		return (pChainedExpression != null) ? pChainedExpression : (pChainedExpression = new ChainedExpressionElements());
	}
	
	public ParserRule getChainedExpressionRule() {
		return getChainedExpressionAccess().getRule();
	}

	//IfExpression returns Expression:
	//  OrExpression ({IfExpression.condition=current} "?" thenPart=ChainedExpression ":"
	//  elsePart=ChainedExpression)?;
	public IfExpressionElements getIfExpressionAccess() {
		return (pIfExpression != null) ? pIfExpression : (pIfExpression = new IfExpressionElements());
	}
	
	public ParserRule getIfExpressionRule() {
		return getIfExpressionAccess().getRule();
	}

	//OrExpression returns Expression:
	//  AndExpression ({BooleanOperation.left=current} operator="||" right=AndExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return (pOrExpression != null) ? pOrExpression : (pOrExpression = new OrExpressionElements());
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//AndExpression returns Expression:
	//  BitwiseExpression ({BooleanOperation.left=current} operator="&&" right=
	//  BitwiseExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return (pAndExpression != null) ? pAndExpression : (pAndExpression = new AndExpressionElements());
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//BitwiseExpression returns Expression:
	//  RelationalExpression ({OperationCall.params+=current} name=( "&" | "^" | "|" ) params+=
	//  RelationalExpression)*;
	public BitwiseExpressionElements getBitwiseExpressionAccess() {
		return (pBitwiseExpression != null) ? pBitwiseExpression : (pBitwiseExpression = new BitwiseExpressionElements());
	}
	
	public ParserRule getBitwiseExpressionRule() {
		return getBitwiseExpressionAccess().getRule();
	}

	//RelationalExpression returns Expression:
	//  ShiftExpression ({RelationalOperation.left=current} operator=RelationalOperator
	//  right=ShiftExpression)*;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return (pRelationalExpression != null) ? pRelationalExpression : (pRelationalExpression = new RelationalExpressionElements());
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//ShiftExpression returns Expression:
	//  AdditiveExpression ({OperationCall.params+=current} name=( "<<" | ">>" | ">>>" ) params+=
	//  AdditiveExpression)*;
	public ShiftExpressionElements getShiftExpressionAccess() {
		return (pShiftExpression != null) ? pShiftExpression : (pShiftExpression = new ShiftExpressionElements());
	}
	
	public ParserRule getShiftExpressionRule() {
		return getShiftExpressionAccess().getRule();
	}

	//AdditiveExpression returns Expression:
	//  MultiplicativeExpression ({OperationCall.params+=current} name=( "+" | "-" ) params+=
	//  MultiplicativeExpression)*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return (pAdditiveExpression != null) ? pAdditiveExpression : (pAdditiveExpression = new AdditiveExpressionElements());
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//MultiplicativeExpression returns Expression:
	//  SetExpression ({OperationCall.params+=current} name=( "*" | "/" | "%" ) params+=
	//  SetExpression)*;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return (pMultiplicativeExpression != null) ? pMultiplicativeExpression : (pMultiplicativeExpression = new MultiplicativeExpressionElements());
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//enum SetOperator:
	//  select | collect | reject | exists | notexists | foreach;
	public SetOperatorElements getSetOperatorAccess() {
		return (unknownRuleSetOperator != null) ? unknownRuleSetOperator : (unknownRuleSetOperator = new SetOperatorElements());
	}
	
	public EnumRule getSetOperatorRule() {
		return getSetOperatorAccess().getRule();
	}

	//SetExpression returns Expression:
	//  UnaryOrInfixExpression ({SetOperationCall.params+=current} op=SetOperator params+=
	//  UnaryOrInfixExpression)*;
	public SetExpressionElements getSetExpressionAccess() {
		return (pSetExpression != null) ? pSetExpression : (pSetExpression = new SetExpressionElements());
	}
	
	public ParserRule getSetExpressionRule() {
		return getSetExpressionAccess().getRule();
	}

	//UnaryOrInfixExpression returns Expression:
	//  UnaryExpression|PostopExpression;
	public UnaryOrInfixExpressionElements getUnaryOrInfixExpressionAccess() {
		return (pUnaryOrInfixExpression != null) ? pUnaryOrInfixExpression : (pUnaryOrInfixExpression = new UnaryOrInfixExpressionElements());
	}
	
	public ParserRule getUnaryOrInfixExpressionRule() {
		return getUnaryOrInfixExpressionAccess().getRule();
	}

	//UnaryExpression:
	//  {UnaryOperation} name=( "!" | "-" | "++" | "--" | "typeof" | "delete" | "~" ) params+=
	//  PostopExpression;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return (pUnaryExpression != null) ? pUnaryExpression : (pUnaryExpression = new UnaryExpressionElements());
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//PostopExpression returns Expression:
	//  InfixExpression ({OperationCall.postTarget=current} name=( "--" | "++" ))?;
	public PostopExpressionElements getPostopExpressionAccess() {
		return (pPostopExpression != null) ? pPostopExpression : (pPostopExpression = new PostopExpressionElements());
	}
	
	public ParserRule getPostopExpressionRule() {
		return getPostopExpressionAccess().getRule();
	}

	//InfixExpression returns Expression:
	//  CallExpression ({OperationCall.target=current} "." name=ID "(" (params+=Parameter (","
	//  params+=Parameter)*)? ")"|{AtCall.target=current} "[" index=Expression "]" ("(" (
	//  params+=Parameter ("," params+=Parameter)*)? ")")?|{FeatureCall.target=current} "."
	//  type=ID)*;
	public InfixExpressionElements getInfixExpressionAccess() {
		return (pInfixExpression != null) ? pInfixExpression : (pInfixExpression = new InfixExpressionElements());
	}
	
	public ParserRule getInfixExpressionRule() {
		return getInfixExpressionAccess().getRule();
	}

	//CallExpression returns Expression:
	//  PrimaryExpression ({OperationCall.target=current} "(" (params+=Parameter ("," params
	//  +=Parameter)*)? ")")*;
	public CallExpressionElements getCallExpressionAccess() {
		return (pCallExpression != null) ? pCallExpression : (pCallExpression = new CallExpressionElements());
	}
	
	public ParserRule getCallExpressionRule() {
		return getCallExpressionAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//  Literal|ConstructorCallExpression|VariableValue|PropertyValue|KeywordVariables|
	//  ParanthesizedExpression; 
	//		
	//    
	//	   
	////	| FeatureCall
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//PropertyValue returns Expression:
	//  {PropertyValue} name=PID;
	public PropertyValueElements getPropertyValueAccess() {
		return (pPropertyValue != null) ? pPropertyValue : (pPropertyValue = new PropertyValueElements());
	}
	
	public ParserRule getPropertyValueRule() {
		return getPropertyValueAccess().getRule();
	}

	//VariableValue returns Expression:
	//  {VariableValue} name=ID;
	public VariableValueElements getVariableValueAccess() {
		return (pVariableValue != null) ? pVariableValue : (pVariableValue = new VariableValueElements());
	}
	
	public ParserRule getVariableValueRule() {
		return getVariableValueAccess().getRule();
	}

	//KeywordVariables returns Expression:
	//  {KeywordVariable} name=( GroupKeyword | LayoutKeyword | "properties" ); 
	//                       
	//
	////FeatureCall:
	////	OperationCall
	////	;
	////	
	////OperationCall 
	////	: name=(ID|PID) "(" (params+=Parameter ("," params+=Parameter)*)? ")" 
	////	;
	public KeywordVariablesElements getKeywordVariablesAccess() {
		return (pKeywordVariables != null) ? pKeywordVariables : (pKeywordVariables = new KeywordVariablesElements());
	}
	
	public ParserRule getKeywordVariablesRule() {
		return getKeywordVariablesAccess().getRule();
	}

	//ConstructorCallExpression returns Expression:
	//  {CreatorCall} name="new" target=QualifiedName "(" (params+=Parameter ("," params+=
	//  Parameter)*)? ")"; 
	//
	////FeatureCall:
	////	OperationCall
	////	;
	////	
	////OperationCall 
	////	: name=(ID|PID) "(" (params+=Parameter ("," params+=Parameter)*)? ")" 
	////	;
	public ConstructorCallExpressionElements getConstructorCallExpressionAccess() {
		return (pConstructorCallExpression != null) ? pConstructorCallExpression : (pConstructorCallExpression = new ConstructorCallExpressionElements());
	}
	
	public ParserRule getConstructorCallExpressionRule() {
		return getConstructorCallExpressionAccess().getRule();
	}

	//Literal returns Expression:
	//  ValueLiteral|RegexpLiteral|LiteralArray|LiteralObject|LiteralFunction;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//LiteralArray returns Expression:
	//  {LiteralArray} "[" (element+=Expression ("," element+=Expression)*)? "]";
	public LiteralArrayElements getLiteralArrayAccess() {
		return (pLiteralArray != null) ? pLiteralArray : (pLiteralArray = new LiteralArrayElements());
	}
	
	public ParserRule getLiteralArrayRule() {
		return getLiteralArrayAccess().getRule();
	}

	//LiteralObject returns Expression:
	//  {LiteralObject} "{" (features+=Feature ("," features+=Feature)*)? "}";
	public LiteralObjectElements getLiteralObjectAccess() {
		return (pLiteralObject != null) ? pLiteralObject : (pLiteralObject = new LiteralObjectElements());
	}
	
	public ParserRule getLiteralObjectRule() {
		return getLiteralObjectAccess().getRule();
	}

	//LiteralFunction returns Expression:
	//  {LiteralFunction} ("function"|"fun") "(" (parameters+=ID ("," parameters+=ID)*) ")" "{"
	//  statements=Statements "}";
	public LiteralFunctionElements getLiteralFunctionAccess() {
		return (pLiteralFunction != null) ? pLiteralFunction : (pLiteralFunction = new LiteralFunctionElements());
	}
	
	public ParserRule getLiteralFunctionRule() {
		return getLiteralFunctionAccess().getRule();
	}

	//Feature:
	//  {Feature} name=( ID | PID | STRING ) ":" value=Expression;
	public FeatureElements getFeatureAccess() {
		return (pFeature != null) ? pFeature : (pFeature = new FeatureElements());
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//ValueLiteral returns Expression:
	//  BooleanLiteral|IntegerLiteral|NullLiteral|UndefinedLiteral|StringLiteral|
	//  RealLiteral|QueryLiteral;
	public ValueLiteralElements getValueLiteralAccess() {
		return (pValueLiteral != null) ? pValueLiteral : (pValueLiteral = new ValueLiteralElements());
	}
	
	public ParserRule getValueLiteralRule() {
		return getValueLiteralAccess().getRule();
	}

	//BooleanLiteral returns Expression:
	//  {BooleanLiteral} val=( "true" | "false" ); 
	//	
	//             
	//// TODO: Hex is a string until an int converter is written for it
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return (pBooleanLiteral != null) ? pBooleanLiteral : (pBooleanLiteral = new BooleanLiteralElements());
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//IntegerLiteral returns Expression:
	//  {IntegerLiteral} ival=INT|sval=HEX; 
	//// TODO: Hex is a string until an int converter is written for it
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return (pIntegerLiteral != null) ? pIntegerLiteral : (pIntegerLiteral = new IntegerLiteralElements());
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}

	//NullLiteral returns Expression:
	//  {NullLiteral} val="null"; 
	//	        
	//// Not a keyword in JS, but prevention of reassignment is wanted.
	public NullLiteralElements getNullLiteralAccess() {
		return (pNullLiteral != null) ? pNullLiteral : (pNullLiteral = new NullLiteralElements());
	}
	
	public ParserRule getNullLiteralRule() {
		return getNullLiteralAccess().getRule();
	}

	//UndefinedLiteral returns Expression:
	//  {UndefinedLiteral} val="undefined"; 
	//// Not a keyword in JS, but prevention of reassignment is wanted.
	public UndefinedLiteralElements getUndefinedLiteralAccess() {
		return (pUndefinedLiteral != null) ? pUndefinedLiteral : (pUndefinedLiteral = new UndefinedLiteralElements());
	}
	
	public ParserRule getUndefinedLiteralRule() {
		return getUndefinedLiteralAccess().getRule();
	}

	//StringLiteral returns Expression:
	//  {StringLiteral} val=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//RealLiteral returns Expression:
	//  {RealLiteral} val=RealValue;
	public RealLiteralElements getRealLiteralAccess() {
		return (pRealLiteral != null) ? pRealLiteral : (pRealLiteral = new RealLiteralElements());
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}

	//RealValue returns ecore::EDouble:
	//  REAL;
	public RealValueElements getRealValueAccess() {
		return (pRealValue != null) ? pRealValue : (pRealValue = new RealValueElements());
	}
	
	public ParserRule getRealValueRule() {
		return getRealValueAccess().getRule();
	}

	//RegexpLiteral returns Expression:
	//  {RegexpLiteral} val=REGEX;
	public RegexpLiteralElements getRegexpLiteralAccess() {
		return (pRegexpLiteral != null) ? pRegexpLiteral : (pRegexpLiteral = new RegexpLiteralElements());
	}
	
	public ParserRule getRegexpLiteralRule() {
		return getRegexpLiteralAccess().getRule();
	}

	//QueryLiteral returns Expression:
	//  {QueryLiteral} "query" "{" val=AdvicePath "}";
	public QueryLiteralElements getQueryLiteralAccess() {
		return (pQueryLiteral != null) ? pQueryLiteral : (pQueryLiteral = new QueryLiteralElements());
	}
	
	public ParserRule getQueryLiteralRule() {
		return getQueryLiteralAccess().getRule();
	}

	//ParanthesizedExpression returns Expression:
	//  "(" Expression ")";
	public ParanthesizedExpressionElements getParanthesizedExpressionAccess() {
		return (pParanthesizedExpression != null) ? pParanthesizedExpression : (pParanthesizedExpression = new ParanthesizedExpressionElements());
	}
	
	public ParserRule getParanthesizedExpressionRule() {
		return getParanthesizedExpressionAccess().getRule();
	}

	//Version:
	//  original=STRING|original=AlfanumSym; 	
	//
	//    
	//	    
	//	  
	//	
	//
	/// *
	// ** VersionRange TODO: Uses two instances of Version. This works because use of [ ]  ( ) in Version must be 
	// ** escaped with " ". Omni
	// ** version uses version strings with \[ when a range is presented/parsed in string format.
	// * /
	public VersionElements getVersionAccess() {
		return (pVersion != null) ? pVersion : (pVersion = new VersionElements());
	}
	
	public ParserRule getVersionRule() {
		return getVersionAccess().getRule();
	}

	//VersionRange:
	//  minLimit=( "[" | "(" ) min=Version ("," max=Version)? maxLimit=( "]" | ")" )|min=Version; 
	//
	/// *
	// ** VersionRange TODO: Uses two instances of Version. This works because use of [ ]  ( ) in Version must be 
	// ** escaped with " ". Omni
	// ** version uses version strings with \[ when a range is presented/parsed in string format.
	// * /
	//    
	//	              
	//	  
	//	
	//
	//// Qualified name
	//// TODO: Needs to disallow whie space between ID and '.', and no embedded comments. A bug in xtext prevents using hidden() here.
	////
	public VersionRangeElements getVersionRangeAccess() {
		return (pVersionRange != null) ? pVersionRange : (pVersionRange = new VersionRangeElements());
	}
	
	public ParserRule getVersionRangeRule() {
		return getVersionRangeAccess().getRule();
	}

	//QualifiedName returns ecore::EString hidden ( ):
	//  ID (INT|HEX|ID)* ("." ID (INT|HEX|ID)*)* HIDDENBUG; 
	//
	//// Qualified name
	//// TODO: Needs to disallow whie space between ID and '.', and no embedded comments. A bug in xtext prevents using hidden() here.
	////
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//HIDDENBUG returns ecore::EString hidden ( WS , SL_COMMENT , ML_COMMENT ):
	//  "~~~~~"?; 
	//            // TODO: REPLACE HACK WHEN HIDDEN WORKS.
	//
	//
	//// Declare Property ID to include '.'
	public HIDDENBUGElements getHIDDENBUGAccess() {
		return (pHIDDENBUG != null) ? pHIDDENBUG : (pHIDDENBUG = new HIDDENBUGElements());
	}
	
	public ParserRule getHIDDENBUGRule() {
		return getHIDDENBUGAccess().getRule();
	}

	//PROP returns ecore::EString hidden ( ):
	//  "$" "{" QualifiedName "}";   // TODO: REPLACE HACK WHEN HIDDEN WORKS.
	//
	//
	//// Declare Property ID to include '.'
	public PROPElements getPROPAccess() {
		return (pPROP != null) ? pPROP : (pPROP = new PROPElements());
	}
	
	public ParserRule getPROPRule() {
		return getPROPAccess().getRule();
	}

	//PropertyName returns ecore::EString:
	//  PID;
	public PropertyNameElements getPropertyNameAccess() {
		return (pPropertyName != null) ? pPropertyName : (pPropertyName = new PropertyNameElements());
	}
	
	public ParserRule getPropertyNameRule() {
		return getPropertyNameAccess().getRule();
	}

	//EscapedQualifiedName returns ecore::EString:
	//  STRING|QualifiedName;
	public EscapedQualifiedNameElements getEscapedQualifiedNameAccess() {
		return (pEscapedQualifiedName != null) ? pEscapedQualifiedName : (pEscapedQualifiedName = new EscapedQualifiedNameElements());
	}
	
	public ParserRule getEscapedQualifiedNameRule() {
		return getEscapedQualifiedNameAccess().getRule();
	}

	//InterfaceName returns ecore::EString:
	//  QualifiedName; 
	//    
	//
	//// CompoundName (whitespace and comments allowed, as sequence can be very long. name parts
	//// do not allow being broken across lines.
	////
	public InterfaceNameElements getInterfaceNameAccess() {
		return (pInterfaceName != null) ? pInterfaceName : (pInterfaceName = new InterfaceNameElements());
	}
	
	public ParserRule getInterfaceNameRule() {
		return getInterfaceNameAccess().getRule();
	}

	//CompoundName returns ecore::EString:
	//  EscapedQualifiedName "/" EscapedQualifiedName; 
	//
	//// CompoundName (whitespace and comments allowed, as sequence can be very long. name parts
	//// do not allow being broken across lines.
	////
	//          
	//
	//// Aliases that help with unified naming (good for experiments - the indirection can be removed later)
	public CompoundNameElements getCompoundNameAccess() {
		return (pCompoundName != null) ? pCompoundName : (pCompoundName = new CompoundNameElements());
	}
	
	public ParserRule getCompoundNameRule() {
		return getCompoundNameAccess().getRule();
	}

	//UnitName returns ecore::EString:
	//  EscapedQualifiedName; 
	//
	//// Aliases that help with unified naming (good for experiments - the indirection can be removed later)
	public UnitNameElements getUnitNameAccess() {
		return (pUnitName != null) ? pUnitName : (pUnitName = new UnitNameElements());
	}
	
	public ParserRule getUnitNameRule() {
		return getUnitNameAccess().getRule();
	}

	//PartName returns ecore::EString:
	//  EscapedQualifiedName;
	public PartNameElements getPartNameAccess() {
		return (pPartName != null) ? pPartName : (pPartName = new PartNameElements());
	}
	
	public ParserRule getPartNameRule() {
		return getPartNameAccess().getRule();
	}

	//enum Visibility:
	//  public | private;
	public VisibilityElements getVisibilityAccess() {
		return (unknownRuleVisibility != null) ? unknownRuleVisibility : (unknownRuleVisibility = new VisibilityElements());
	}
	
	public EnumRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}

	//enum ExecutionMode:
	//  parallel | sequential; 
	//   	         
	//
	//
	//// Version, and VersionRange
	//// TODO: make it into a datatype and have better rules, syntax coloring (now integer parts are colored grey, other parts are not colored), etc.
	//// TODO: uncertain if the set of allowed chars is definitive.
	////
	public ExecutionModeElements getExecutionModeAccess() {
		return (unknownRuleExecutionMode != null) ? unknownRuleExecutionMode : (unknownRuleExecutionMode = new ExecutionModeElements());
	}
	
	public EnumRule getExecutionModeRule() {
		return getExecutionModeAccess().getRule();
	}

	//Separator returns ecore::EString:
	//  "."|"-"|"!"|"@"|"$"|"%"|"&"|"+"|"="|"*"|"<"|">"|":"|"?"; 
	//
	//
	//// Version, and VersionRange
	//// TODO: make it into a datatype and have better rules, syntax coloring (now integer parts are colored grey, other parts are not colored), etc.
	//// TODO: uncertain if the set of allowed chars is definitive.
	////
	public SeparatorElements getSeparatorAccess() {
		return (pSeparator != null) ? pSeparator : (pSeparator = new SeparatorElements());
	}
	
	public ParserRule getSeparatorRule() {
		return getSeparatorAccess().getRule();
	}

	//AlfanumSym returns ecore::EString:
	//  (ID|INT|HEX|REAL) (Separator|ID|INT|HEX|REAL)*; 
	//              
	//
	//
	//// Redeclare the default ID without the ^ keyword escape mechanism, and including
	//// the JS $ char which is allowed in the first position.
	////
	public AlfanumSymElements getAlfanumSymAccess() {
		return (pAlfanumSym != null) ? pAlfanumSym : (pAlfanumSym = new AlfanumSymElements());
	}
	
	public ParserRule getAlfanumSymRule() {
		return getAlfanumSymAccess().getRule();
	}

	//terminal ID:
	//  ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "0".."9" | "_")*; 
	//
	//
	//// Redeclare the default ID without the ^ keyword escape mechanism, and including
	//// the JS $ char which is allowed in the first position.
	////
	//          
	//
	//// Property Names start with $ and are qualified. Must be handled by lexer as
	//// a.b.c is otherwise ambigous in expressions.
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal PID:
	//  "$" ID ("." ID)*; 
	//
	//// Property Names start with $ and are qualified. Must be handled by lexer as
	//// a.b.c is otherwise ambigous in expressions.
	//
	//              
	//
	//// JS Regexp - but cheating by using @ instead of / because of inability to push back terminators
	//// and / clashes with / in math.
	////
	public TerminalRule getPIDRule() {
		return (tPID != null) ? tPID : (tPID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PID"));
	} 

	//terminal REGEX returns types::RegularExpression:
	//  "~/" ("\\" ("/" | "f" | "n" | "r" | "t" | "v" | "\\" | "." | "*" | "+" | "?" | "w" | "W" | "s" | "S" | "d" | "D" |
	//  "b" | "|" | "{" | "}" | "[" | "]" | "(" | ")" | "0".."7" "0".."7" "0".."7" | "x" ("0".."9" | "a".."f" |
	//  "A".."F") ("0".."9" | "a".."f" | "A".."F") | "c" "A".."Z") | !("\\" | "/" | " " | "\t" | "\r" | "\n"
	//  ))* "/" ("g" | "m" | "i")?; 
	//
	//// JS Regexp - but cheating by using @ instead of / because of inability to push back terminators
	//// and / clashes with / in math.
	////
	//      
	//	        
	//					  
	//					
	//					   
	//					       
	//					    
	//				
	//			      
	//			
	//
	//// JS String support escaped b,t,n,f,r, and u HEX*4, x HEX*2, and (deprecated (0-7)), 
	//// A string converter may need to handle the u, x, and octal escapes.
	//// Regular java string handles XXXX , and gives syntax error if
	//// format is not ok, the other two remains, and possibly the null.
	public TerminalRule getREGEXRule() {
		return (tREGEX != null) ? tREGEX : (tREGEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REGEX"));
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "x" | "0" | "\"" | "\'" | "\\") | !("\\" | "\"" | "\r" | "\n")
	//  )* "\"" | "\'" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "x" | "0" | "\"" | "\'" | "\\") | !("\\" | "\'" |
	//  "\r" | "\n"))* "\'"; 
	//
	//// JS String support escaped b,t,n,f,r, and u HEX*4, x HEX*2, and (deprecated (0-7)), 
	//// A string converter may need to handle the u, x, and octal escapes.
	//// Regular java string handles XXXX , and gives syntax error if
	//// format is not ok, the other two remains, and possibly the null.
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+; 
	//        
	//
	//// TODO: Should return EHex, but this requires a separate model, as EHex can not be infered.
	////
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal HEX returns types::HexInteger:
	//  "0" ("x" | "X") ("0".."9" | "a".."f" | "A".."F")+; 
	//
	//// TODO: Should return EHex, but this requires a separate model, as EHex can not be infered.
	////
	//            
	//
	//// A JS integer is one of
	//// 0
	//// 0(0..7)*
	//// 0(x|X)(0-91-fA-F)*
	//// Validation can handle the octal case, and illegal 08, 09 00 sequencese
	//// TODO: converter must handle octal case if we want to support it.
	////
	public TerminalRule getHEXRule() {
		return (tHEX != null) ? tHEX : (tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX"));
	} 

	//terminal INT returns ecore::EInt:
	//  "0".."9"+; 
	//
	//// A JS integer is one of
	//// 0
	//// 0(0..7)*
	//// 0(x|X)(0-91-fA-F)*
	//// Validation can handle the octal case, and illegal 08, 09 00 sequencese
	//// TODO: converter must handle octal case if we want to support it.
	////
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal REAL:
	//  (INT "." INT | INT "." | "." INT | INT) (("e" | "E") ("-" | "+") INT)?;
	public TerminalRule getREALRule() {
		return (tREAL != null) ? tREAL : (tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REAL"));
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
