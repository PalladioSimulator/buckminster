/*
* generated by Xtext
*/
package org.eclipse.b3.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.b3.services.BeeLangGrammarAccess;

import com.google.inject.Inject;

public class BeeLangParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private BeeLangGrammarAccess grammarAccess;
		
	public BeeLangGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BeeModel_Group(this, this, 0, inst);
			case 1: return new Import_Group(this, this, 1, inst);
			case 2: return new JavaImporter_Group(this, this, 2, inst);
			case 3: return new NativeImporter_UriStringAssignment(this, this, 3, inst);
			case 4: return new Unit_Group(this, this, 4, inst);
			case 5: return new ProvidedCapability_Group(this, this, 5, inst);
			case 6: return new RequiredCapability_Group(this, this, 6, inst);
			case 7: return new NamedPropertyStatements_Group(this, this, 7, inst);
			case 8: return new CompoundPropertyOperation_Group(this, this, 8, inst);
			case 9: return new PropertyOperation_Alternatives(this, this, 9, inst);
			case 10: return new FilteredPropertyOperation_Group(this, this, 10, inst);
			case 11: return new SetPropertyOperation_Group(this, this, 11, inst);
			case 12: return new UnsetPropertyOperation_Group(this, this, 12, inst);
			case 13: return new Synchronization_Group(this, this, 13, inst);
			case 14: return new PathGroup_Group(this, this, 14, inst);
			case 15: return new PathVectorElement_Alternatives(this, this, 15, inst);
			case 16: return new FilteredPathVector_Group(this, this, 16, inst);
			case 17: return new BasePathVector_Group(this, this, 17, inst);
			case 18: return new UnbasedPathVector_Group(this, this, 18, inst);
			case 19: return new CompoundPathVector_Group(this, this, 19, inst);
			case 20: return new Prerequisite_Group(this, this, 20, inst);
			case 21: return new Closure_Group(this, this, 21, inst);
			case 22: return new PrerequisiteEntry_Alternatives(this, this, 22, inst);
			case 23: return new PartInSelf_PartNameAssignment(this, this, 23, inst);
			case 24: return new CapabilityReferencedPart_Alternatives(this, this, 24, inst);
			case 25: return new CompoundReferences_Group(this, this, 25, inst);
			case 26: return new BuildMethod_Group(this, this, 26, inst);
			case 27: return new Parameter_ValAssignment(this, this, 27, inst);
			case 28: return new Layout_Group(this, this, 28, inst);
			case 29: return new Group_Group(this, this, 29, inst);
			case 30: return new RepositoryConfiguration_Group(this, this, 30, inst);
			case 31: return new NamedAdvice_Group(this, this, 31, inst);
			case 32: return new Advice_Group(this, this, 32, inst);
			case 33: return new CompoundAdvice_Group(this, this, 33, inst);
			case 34: return new AdviceStatement_Group(this, this, 34, inst);
			case 35: return new AdvicePath_Group(this, this, 35, inst);
			case 36: return new Selector_Alternatives(this, this, 36, inst);
			case 37: return new MultiNodeSelector_Alternatives(this, this, 37, inst);
			case 38: return new DiscriminatingSelector_Group(this, this, 38, inst);
			case 39: return new NodeSelector_ParentSelectorParserRuleCall(this, this, 39, inst);
			case 40: return new NameSelector_NameAssignment(this, this, 40, inst);
			case 41: return new ThisSelector_Group(this, this, 41, inst);
			case 42: return new ParentSelector_Group(this, this, 42, inst);
			case 43: return new ChildrenSelector_Group(this, this, 43, inst);
			case 44: return new AncestorSelector_Group(this, this, 44, inst);
			case 45: return new RegexpSelector_Group(this, this, 45, inst);
			case 46: return new Filter_Group(this, this, 46, inst);
			case 47: return new PreCondition_Group(this, this, 47, inst);
			case 48: return new PostCondition_Group(this, this, 48, inst);
			case 49: return new AssertionExpression_Group(this, this, 49, inst);
			case 50: return new Statement_Alternatives(this, this, 50, inst);
			case 51: return new BreakStatement_Group(this, this, 51, inst);
			case 52: return new ContinueStatement_Group(this, this, 52, inst);
			case 53: return new CompoundStatement_Group(this, this, 53, inst);
			case 54: return new Statements_StatementsAssignment(this, this, 54, inst);
			case 55: return new WhileStatement_Group(this, this, 55, inst);
			case 56: return new SwitchStatement_Group(this, this, 56, inst);
			case 57: return new Case_Group(this, this, 57, inst);
			case 58: return new ForStatement_Group(this, this, 58, inst);
			case 59: return new DoWhileStatement_Group(this, this, 59, inst);
			case 60: return new ReturnStatement_Group(this, this, 60, inst);
			case 61: return new FunctionStatement_Group(this, this, 61, inst);
			case 62: return new IfStatement_Group(this, this, 62, inst);
			case 63: return new LabelStatement_Group(this, this, 63, inst);
			case 64: return new ThrowStatement_Group(this, this, 64, inst);
			case 65: return new TryCatchStatement_Group(this, this, 65, inst);
			case 66: return new CatchBlock_Group(this, this, 66, inst);
			case 67: return new FinallyBlock_Group(this, this, 67, inst);
			case 68: return new WithStatement_Group(this, this, 68, inst);
			case 69: return new VarExpressionList_Group(this, this, 69, inst);
			case 70: return new ExpressionList_Group(this, this, 70, inst);
			case 71: return new VarExpression_Alternatives(this, this, 71, inst);
			case 72: return new Expression_AssignmentExpressionParserRuleCall(this, this, 72, inst);
			case 73: return new AssignmentExpression_Group(this, this, 73, inst);
			case 74: return new ChainedExpression_IfExpressionParserRuleCall(this, this, 74, inst);
			case 75: return new IfExpression_Group(this, this, 75, inst);
			case 76: return new OrExpression_Group(this, this, 76, inst);
			case 77: return new AndExpression_Group(this, this, 77, inst);
			case 78: return new BitwiseExpression_Group(this, this, 78, inst);
			case 79: return new RelationalExpression_Group(this, this, 79, inst);
			case 80: return new ShiftExpression_Group(this, this, 80, inst);
			case 81: return new AdditiveExpression_Group(this, this, 81, inst);
			case 82: return new MultiplicativeExpression_Group(this, this, 82, inst);
			case 83: return new SetExpression_Group(this, this, 83, inst);
			case 84: return new UnaryOrInfixExpression_Alternatives(this, this, 84, inst);
			case 85: return new UnaryExpression_Group(this, this, 85, inst);
			case 86: return new PostopExpression_Group(this, this, 86, inst);
			case 87: return new InfixExpression_Group(this, this, 87, inst);
			case 88: return new CallExpression_Group(this, this, 88, inst);
			case 89: return new PrimaryExpression_Alternatives(this, this, 89, inst);
			case 90: return new PropertyValue_Group(this, this, 90, inst);
			case 91: return new VariableValue_Group(this, this, 91, inst);
			case 92: return new KeywordVariables_Group(this, this, 92, inst);
			case 93: return new ConstructorCallExpression_Group(this, this, 93, inst);
			case 94: return new Literal_Alternatives(this, this, 94, inst);
			case 95: return new LiteralArray_Group(this, this, 95, inst);
			case 96: return new LiteralObject_Group(this, this, 96, inst);
			case 97: return new LiteralFunction_Group(this, this, 97, inst);
			case 98: return new Feature_Group(this, this, 98, inst);
			case 99: return new ValueLiteral_Alternatives(this, this, 99, inst);
			case 100: return new BooleanLiteral_Group(this, this, 100, inst);
			case 101: return new IntegerLiteral_Alternatives(this, this, 101, inst);
			case 102: return new NullLiteral_Group(this, this, 102, inst);
			case 103: return new UndefinedLiteral_Group(this, this, 103, inst);
			case 104: return new StringLiteral_Group(this, this, 104, inst);
			case 105: return new RealLiteral_Group(this, this, 105, inst);
			case 106: return new RegexpLiteral_Group(this, this, 106, inst);
			case 107: return new QueryLiteral_Group(this, this, 107, inst);
			case 108: return new ParanthesizedExpression_Group(this, this, 108, inst);
			case 109: return new Version_Alternatives(this, this, 109, inst);
			case 110: return new VersionRange_Alternatives(this, this, 110, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule BeeModel ****************
 *
 * BeeModel:
 *   imports+=Import* body=Unit;
 *
 **/

// imports+=Import* body=Unit
protected class BeeModel_Group extends GroupToken {
	
	public BeeModel_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBeeModelAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BeeModel_BodyAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBeeModelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// imports+=Import*
protected class BeeModel_ImportsAssignment_0 extends AssignmentToken  {
	
	public BeeModel_ImportsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBeeModelAccess().getImportsAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("imports",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("imports");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBeeModelAccess().getImportsImportParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BeeModel_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// body=Unit
protected class BeeModel_BodyAssignment_1 extends AssignmentToken  {
	
	public BeeModel_BodyAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBeeModelAccess().getBodyAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("body",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUnitRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBeeModelAccess().getBodyUnitParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BeeModel_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}


/************ end Rule BeeModel ****************/


/************ begin Rule Import ****************
 *
 * Import:
 *   reexport?="reexport"? "import" importer=( JavaImporter | NativeImporter ) ("as"
 *   nameSpace=ID)? ";";
 *
 **/

// reexport?="reexport"? "import" importer=( JavaImporter | NativeImporter ) ("as"
// nameSpace=ID)? ";"
protected class Import_Group extends GroupToken {
	
	public Import_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getImportAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_SemicolonKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// reexport?="reexport"?
protected class Import_ReexportAssignment_0 extends AssignmentToken  {
	
	public Import_ReexportAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getImportAccess().getReexportAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("reexport",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("reexport");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getImportAccess().getReexportReexportKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// "import"
protected class Import_ImportKeyword_1 extends KeywordToken  {
	
	public Import_ImportKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getImportAccess().getImportKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_ReexportAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// importer=( JavaImporter | NativeImporter )
protected class Import_ImporterAssignment_2 extends AssignmentToken  {
	
	public Import_ImporterAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getImportAccess().getImporterAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new JavaImporter_Group(this, this, 0, inst);
			case 1: return new NativeImporter_UriStringAssignment(this, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("importer",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("importer");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getJavaImporterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getImportAccess().getImporterJavaImporterParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNativeImporterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getImportAccess().getImporterNativeImporterParserRuleCall_2_0_1(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Import_ImportKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("as" nameSpace=ID)?
protected class Import_Group_3 extends GroupToken {
	
	public Import_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getImportAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_NameSpaceAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "as"
protected class Import_AsKeyword_3_0 extends KeywordToken  {
	
	public Import_AsKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getImportAccess().getAsKeyword_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_ImporterAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// nameSpace=ID
protected class Import_NameSpaceAssignment_3_1 extends AssignmentToken  {
	
	public Import_NameSpaceAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getImportAccess().getNameSpaceAssignment_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_AsKeyword_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("nameSpace",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("nameSpace");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getImportAccess().getNameSpaceIDTerminalRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}


// ";"
protected class Import_SemicolonKeyword_4 extends KeywordToken  {
	
	public Import_SemicolonKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getImportAccess().getSemicolonKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_Group_3(parent, this, 0, inst);
			case 1: return new Import_ImporterAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Import ****************/


/************ begin Rule JavaImporter ****************
 *
 * JavaImporter:
 *   name=QualifiedName package?=".*"?;
 *
 **/

// name=QualifiedName package?=".*"?
protected class JavaImporter_Group extends GroupToken {
	
	public JavaImporter_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getJavaImporterAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new JavaImporter_PackageAssignment_1(parent, this, 0, inst);
			case 1: return new JavaImporter_NameAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getJavaImporterRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=QualifiedName
protected class JavaImporter_NameAssignment_0 extends AssignmentToken  {
	
	public JavaImporter_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getJavaImporterAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getJavaImporterAccess().getNameQualifiedNameParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// package?=".*"?
protected class JavaImporter_PackageAssignment_1 extends AssignmentToken  {
	
	public JavaImporter_PackageAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getJavaImporterAccess().getPackageAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new JavaImporter_NameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("package",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("package");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getJavaImporterAccess().getPackageFullStopAsteriskKeyword_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule JavaImporter ****************/


/************ begin Rule NativeImporter ****************
 *
 * NativeImporter:
 *   uriString=STRING; 
 *           
 * 		
 * / * UNIT - the body (compare to java class)
 * * /
 *
 **/

// uriString=STRING
protected class NativeImporter_UriStringAssignment extends AssignmentToken  {
	
	public NativeImporter_UriStringAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNativeImporterAccess().getUriStringAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getNativeImporterRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("uriString",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("uriString");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getNativeImporterAccess().getUriStringSTRINGTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule NativeImporter ****************/


/************ begin Rule Unit ****************
 *
 * Unit returns BuildUnit hidden ( WS , ML_COMMENT , SL_COMMENT ):
 *   executionMode=ExecutionMode? "unit" name=UnitName? ("version" version=Version)? (
 *   "implements" implements+=InterfaceName ("," implements+=InterfaceName)*)? "{" (
 *   "properties" CompoundPropertyOperation+=NamedPropertyStatements)* ("provides" "{" (
 *   providedCapabilities+=ProvidedCapability ";")+ "}"|"provides" providedCapabilities
 *   +=ProvidedCapability ";"|"requires" "{" (requiredCapabilities+=RequiredCapability
 *   ";")+ "}"|"requires" requiredCapabilities+=RequiredCapability ";"|"meta" "requires"
 *   "{" (metaRequiredCapabilities+=RequiredCapability ";")+ "}"|"meta" "requires"
 *   metaRequiredCapabilities+=RequiredCapability ";"|"advice" advice+=NamedAdvice|
 *   "sequential" "{" synchronizations+=Synchronization+ "}"|"sequential"
 *   synchronizations+=Synchronization|buildMethods+=BuildMethod|"repositories" "{"
 *   repositoryConfigurations+=RepositoryConfiguration* "}")* "}"; 
 * 		
 * / * UNIT - the body (compare to java class)
 * * /	
 *             
 * 	    
 * 	          
 * 		           
 * 	
 * 			 //-- PROPERTIES
 * 			 // goes first, because they may be used in the other clauses.
 * 			 //
 * 			          
 * 		
 * 		 	 //-- PROVIDES
 * 			               
 * 			          
 * 			//-- REQUIRES & META REQUIRES
 * 			               
 * 			          
 * 			                  
 * 			            
 * 			//--ADVICE
 * 			       
 * 			//--SYNCHRONIZE
 * 			                  
 * 			           
 * 			//--BUILD METHODS
 * 			         			
 * 			//-- REPOSITORIES
 *
 **/

// executionMode=ExecutionMode? "unit" name=UnitName? ("version" version=Version)? (
// "implements" implements+=InterfaceName ("," implements+=InterfaceName)*)? "{" (
// "properties" CompoundPropertyOperation+=NamedPropertyStatements)* ("provides" "{" (
// providedCapabilities+=ProvidedCapability ";")+ "}"|"provides" providedCapabilities
// +=ProvidedCapability ";"|"requires" "{" (requiredCapabilities+=RequiredCapability
// ";")+ "}"|"requires" requiredCapabilities+=RequiredCapability ";"|"meta" "requires"
// "{" (metaRequiredCapabilities+=RequiredCapability ";")+ "}"|"meta" "requires"
// metaRequiredCapabilities+=RequiredCapability ";"|"advice" advice+=NamedAdvice|
// "sequential" "{" synchronizations+=Synchronization+ "}"|"sequential"
// synchronizations+=Synchronization|buildMethods+=BuildMethod|"repositories" "{"
// repositoryConfigurations+=RepositoryConfiguration* "}")* "}" 
// 	    
// 	          
// 		           
// 	
// 			 //-- PROPERTIES
// 			 // goes first, because they may be used in the other clauses.
// 			 //
// 			          
// 		
// 		 	 //-- PROVIDES
// 			               
// 			          
// 			//-- REQUIRES & META REQUIRES
// 			               
// 			          
// 			                  
// 			            
// 			//--ADVICE
// 			       
// 			//--SYNCHRONIZE
// 			                  
// 			           
// 			//--BUILD METHODS
// 			         			
// 			//-- REPOSITORIES
protected class Unit_Group extends GroupToken {
	
	public Unit_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RightCurlyBracketKeyword_8(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnitRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// executionMode=ExecutionMode?
protected class Unit_ExecutionModeAssignment_0 extends AssignmentToken  {
	
	public Unit_ExecutionModeAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getExecutionModeAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("executionMode",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("executionMode");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getUnitAccess().getExecutionModeExecutionModeEnumRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "unit"
protected class Unit_UnitKeyword_1 extends KeywordToken  {
	
	public Unit_UnitKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getUnitKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_ExecutionModeAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=UnitName?
protected class Unit_NameAssignment_2 extends AssignmentToken  {
	
	public Unit_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_UnitKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getUnitAccess().getNameUnitNameParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ("version" version=Version)?
protected class Unit_Group_3 extends GroupToken {
	
	public Unit_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_VersionAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "version"
protected class Unit_VersionKeyword_3_0 extends KeywordToken  {
	
	public Unit_VersionKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getVersionKeyword_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_NameAssignment_2(parent, this, 0, inst);
			case 1: return new Unit_UnitKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// version=Version
protected class Unit_VersionAssignment_3_1 extends AssignmentToken  {
	
	public Unit_VersionAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getVersionAssignment_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Version_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("version",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("version");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVersionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getVersionVersionParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_VersionKeyword_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("implements" implements+=InterfaceName ("," implements+=InterfaceName)*)?
protected class Unit_Group_4 extends GroupToken {
	
	public Unit_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_4_2(parent, this, 0, inst);
			case 1: return new Unit_ImplementsAssignment_4_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "implements"
protected class Unit_ImplementsKeyword_4_0 extends KeywordToken  {
	
	public Unit_ImplementsKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getImplementsKeyword_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_3(parent, this, 0, inst);
			case 1: return new Unit_NameAssignment_2(parent, this, 1, inst);
			case 2: return new Unit_UnitKeyword_1(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// implements+=InterfaceName
protected class Unit_ImplementsAssignment_4_1 extends AssignmentToken  {
	
	public Unit_ImplementsAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getImplementsAssignment_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_ImplementsKeyword_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("implements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("implements");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getUnitAccess().getImplementsInterfaceNameParserRuleCall_4_1_0();
			return obj;
		}
		return null;
	}

}

// ("," implements+=InterfaceName)*
protected class Unit_Group_4_2 extends GroupToken {
	
	public Unit_Group_4_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_4_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_ImplementsAssignment_4_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Unit_CommaKeyword_4_2_0 extends KeywordToken  {
	
	public Unit_CommaKeyword_4_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getCommaKeyword_4_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_4_2(parent, this, 0, inst);
			case 1: return new Unit_ImplementsAssignment_4_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// implements+=InterfaceName
protected class Unit_ImplementsAssignment_4_2_1 extends AssignmentToken  {
	
	public Unit_ImplementsAssignment_4_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getImplementsAssignment_4_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_CommaKeyword_4_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("implements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("implements");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getUnitAccess().getImplementsInterfaceNameParserRuleCall_4_2_1_0();
			return obj;
		}
		return null;
	}

}



// "{"
protected class Unit_LeftCurlyBracketKeyword_5 extends KeywordToken  {
	
	public Unit_LeftCurlyBracketKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_4(parent, this, 0, inst);
			case 1: return new Unit_Group_3(parent, this, 1, inst);
			case 2: return new Unit_NameAssignment_2(parent, this, 2, inst);
			case 3: return new Unit_UnitKeyword_1(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}

// ("properties" CompoundPropertyOperation+=NamedPropertyStatements)*
protected class Unit_Group_6 extends GroupToken {
	
	public Unit_Group_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_CompoundPropertyOperationAssignment_6_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "properties"
protected class Unit_PropertiesKeyword_6_0 extends KeywordToken  {
	
	public Unit_PropertiesKeyword_6_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getPropertiesKeyword_6_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_6(parent, this, 0, inst);
			case 1: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// CompoundPropertyOperation+=NamedPropertyStatements
protected class Unit_CompoundPropertyOperationAssignment_6_1 extends AssignmentToken  {
	
	public Unit_CompoundPropertyOperationAssignment_6_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getCompoundPropertyOperationAssignment_6_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NamedPropertyStatements_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("CompoundPropertyOperation",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("CompoundPropertyOperation");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNamedPropertyStatementsRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getCompoundPropertyOperationNamedPropertyStatementsParserRuleCall_6_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_PropertiesKeyword_6_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("provides" "{" (providedCapabilities+=ProvidedCapability ";")+ "}"|"provides"
// providedCapabilities+=ProvidedCapability ";"|"requires" "{" (requiredCapabilities+=
// RequiredCapability ";")+ "}"|"requires" requiredCapabilities+=RequiredCapability ";"
// |"meta" "requires" "{" (metaRequiredCapabilities+=RequiredCapability ";")+ "}"|"meta"
// "requires" metaRequiredCapabilities+=RequiredCapability ";"|"advice" advice+=
// NamedAdvice|"sequential" "{" synchronizations+=Synchronization+ "}"|"sequential"
// synchronizations+=Synchronization|buildMethods+=BuildMethod|"repositories" "{"
// repositoryConfigurations+=RepositoryConfiguration* "}")* 
// 		 	 //-- PROVIDES
// 			               
// 			          
// 			//-- REQUIRES & META REQUIRES
// 			               
// 			          
// 			                  
// 			            
// 			//--ADVICE
// 			       
// 			//--SYNCHRONIZE
// 			                  
// 			           
// 			//--BUILD METHODS
// 			         			
// 			//-- REPOSITORIES
protected class Unit_Alternatives_7 extends AlternativesToken {

	public Unit_Alternatives_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getUnitAccess().getAlternatives_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_7_0(parent, this, 0, inst);
			case 1: return new Unit_Group_7_1(parent, this, 1, inst);
			case 2: return new Unit_Group_7_2(parent, this, 2, inst);
			case 3: return new Unit_Group_7_3(parent, this, 3, inst);
			case 4: return new Unit_Group_7_4(parent, this, 4, inst);
			case 5: return new Unit_Group_7_5(parent, this, 5, inst);
			case 6: return new Unit_Group_7_6(parent, this, 6, inst);
			case 7: return new Unit_Group_7_7(parent, this, 7, inst);
			case 8: return new Unit_Group_7_8(parent, this, 8, inst);
			case 9: return new Unit_BuildMethodsAssignment_7_9(parent, this, 9, inst);
			case 10: return new Unit_Group_7_10(parent, this, 10, inst);
			default: return null;
		}	
	}	
		
}

// "provides" "{" (providedCapabilities+=ProvidedCapability ";")+ "}"
protected class Unit_Group_7_0 extends GroupToken {
	
	public Unit_Group_7_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_7_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RightCurlyBracketKeyword_7_0_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "provides"
protected class Unit_ProvidesKeyword_7_0_0 extends KeywordToken  {
	
	public Unit_ProvidesKeyword_7_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getProvidesKeyword_7_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_7(parent, this, 0, inst);
			case 1: return new Unit_Group_6(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Unit_LeftCurlyBracketKeyword_7_0_1 extends KeywordToken  {
	
	public Unit_LeftCurlyBracketKeyword_7_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_7_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_ProvidesKeyword_7_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (providedCapabilities+=ProvidedCapability ";")+
protected class Unit_Group_7_0_2 extends GroupToken {
	
	public Unit_Group_7_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_7_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SemicolonKeyword_7_0_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// providedCapabilities+=ProvidedCapability
protected class Unit_ProvidedCapabilitiesAssignment_7_0_2_0 extends AssignmentToken  {
	
	public Unit_ProvidedCapabilitiesAssignment_7_0_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getProvidedCapabilitiesAssignment_7_0_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("providedCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("providedCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProvidedCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_7_0_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_Group_7_0_2(parent, next, actIndex, consumed);
			case 1: return new Unit_LeftCurlyBracketKeyword_7_0_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Unit_SemicolonKeyword_7_0_2_1 extends KeywordToken  {
	
	public Unit_SemicolonKeyword_7_0_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSemicolonKeyword_7_0_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_ProvidedCapabilitiesAssignment_7_0_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "}"
protected class Unit_RightCurlyBracketKeyword_7_0_3 extends KeywordToken  {
	
	public Unit_RightCurlyBracketKeyword_7_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_7_0_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_7_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "provides" providedCapabilities+=ProvidedCapability ";"
protected class Unit_Group_7_1 extends GroupToken {
	
	public Unit_Group_7_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_7_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SemicolonKeyword_7_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "provides"
protected class Unit_ProvidesKeyword_7_1_0 extends KeywordToken  {
	
	public Unit_ProvidesKeyword_7_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getProvidesKeyword_7_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_7(parent, this, 0, inst);
			case 1: return new Unit_Group_6(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// providedCapabilities+=ProvidedCapability
protected class Unit_ProvidedCapabilitiesAssignment_7_1_1 extends AssignmentToken  {
	
	public Unit_ProvidedCapabilitiesAssignment_7_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getProvidedCapabilitiesAssignment_7_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("providedCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("providedCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProvidedCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_7_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_ProvidesKeyword_7_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Unit_SemicolonKeyword_7_1_2 extends KeywordToken  {
	
	public Unit_SemicolonKeyword_7_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSemicolonKeyword_7_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_ProvidedCapabilitiesAssignment_7_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "requires" "{" (requiredCapabilities+=RequiredCapability ";")+ "}"
protected class Unit_Group_7_2 extends GroupToken {
	
	public Unit_Group_7_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_7_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RightCurlyBracketKeyword_7_2_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "requires"
protected class Unit_RequiresKeyword_7_2_0 extends KeywordToken  {
	
	public Unit_RequiresKeyword_7_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRequiresKeyword_7_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_7(parent, this, 0, inst);
			case 1: return new Unit_Group_6(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Unit_LeftCurlyBracketKeyword_7_2_1 extends KeywordToken  {
	
	public Unit_LeftCurlyBracketKeyword_7_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_7_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RequiresKeyword_7_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (requiredCapabilities+=RequiredCapability ";")+
protected class Unit_Group_7_2_2 extends GroupToken {
	
	public Unit_Group_7_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_7_2_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SemicolonKeyword_7_2_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// requiredCapabilities+=RequiredCapability
protected class Unit_RequiredCapabilitiesAssignment_7_2_2_0 extends AssignmentToken  {
	
	public Unit_RequiredCapabilitiesAssignment_7_2_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getRequiredCapabilitiesAssignment_7_2_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("requiredCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("requiredCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRequiredCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_2_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_Group_7_2_2(parent, next, actIndex, consumed);
			case 1: return new Unit_LeftCurlyBracketKeyword_7_2_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Unit_SemicolonKeyword_7_2_2_1 extends KeywordToken  {
	
	public Unit_SemicolonKeyword_7_2_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSemicolonKeyword_7_2_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RequiredCapabilitiesAssignment_7_2_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "}"
protected class Unit_RightCurlyBracketKeyword_7_2_3 extends KeywordToken  {
	
	public Unit_RightCurlyBracketKeyword_7_2_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_7_2_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_7_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "requires" requiredCapabilities+=RequiredCapability ";"
protected class Unit_Group_7_3 extends GroupToken {
	
	public Unit_Group_7_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_7_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SemicolonKeyword_7_3_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "requires"
protected class Unit_RequiresKeyword_7_3_0 extends KeywordToken  {
	
	public Unit_RequiresKeyword_7_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRequiresKeyword_7_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_7(parent, this, 0, inst);
			case 1: return new Unit_Group_6(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// requiredCapabilities+=RequiredCapability
protected class Unit_RequiredCapabilitiesAssignment_7_3_1 extends AssignmentToken  {
	
	public Unit_RequiredCapabilitiesAssignment_7_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getRequiredCapabilitiesAssignment_7_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("requiredCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("requiredCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRequiredCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_RequiresKeyword_7_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Unit_SemicolonKeyword_7_3_2 extends KeywordToken  {
	
	public Unit_SemicolonKeyword_7_3_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSemicolonKeyword_7_3_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RequiredCapabilitiesAssignment_7_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "meta" "requires" "{" (metaRequiredCapabilities+=RequiredCapability ";")+ "}"
protected class Unit_Group_7_4 extends GroupToken {
	
	public Unit_Group_7_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_7_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RightCurlyBracketKeyword_7_4_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "meta"
protected class Unit_MetaKeyword_7_4_0 extends KeywordToken  {
	
	public Unit_MetaKeyword_7_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getMetaKeyword_7_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_7(parent, this, 0, inst);
			case 1: return new Unit_Group_6(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "requires"
protected class Unit_RequiresKeyword_7_4_1 extends KeywordToken  {
	
	public Unit_RequiresKeyword_7_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRequiresKeyword_7_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_MetaKeyword_7_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Unit_LeftCurlyBracketKeyword_7_4_2 extends KeywordToken  {
	
	public Unit_LeftCurlyBracketKeyword_7_4_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_7_4_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RequiresKeyword_7_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (metaRequiredCapabilities+=RequiredCapability ";")+
protected class Unit_Group_7_4_3 extends GroupToken {
	
	public Unit_Group_7_4_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_7_4_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SemicolonKeyword_7_4_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// metaRequiredCapabilities+=RequiredCapability
protected class Unit_MetaRequiredCapabilitiesAssignment_7_4_3_0 extends AssignmentToken  {
	
	public Unit_MetaRequiredCapabilitiesAssignment_7_4_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getMetaRequiredCapabilitiesAssignment_7_4_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("metaRequiredCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("metaRequiredCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRequiredCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getMetaRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_4_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_Group_7_4_3(parent, next, actIndex, consumed);
			case 1: return new Unit_LeftCurlyBracketKeyword_7_4_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Unit_SemicolonKeyword_7_4_3_1 extends KeywordToken  {
	
	public Unit_SemicolonKeyword_7_4_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSemicolonKeyword_7_4_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_MetaRequiredCapabilitiesAssignment_7_4_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "}"
protected class Unit_RightCurlyBracketKeyword_7_4_4 extends KeywordToken  {
	
	public Unit_RightCurlyBracketKeyword_7_4_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_7_4_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_7_4_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "meta" "requires" metaRequiredCapabilities+=RequiredCapability ";"
protected class Unit_Group_7_5 extends GroupToken {
	
	public Unit_Group_7_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_7_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SemicolonKeyword_7_5_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "meta"
protected class Unit_MetaKeyword_7_5_0 extends KeywordToken  {
	
	public Unit_MetaKeyword_7_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getMetaKeyword_7_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_7(parent, this, 0, inst);
			case 1: return new Unit_Group_6(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "requires"
protected class Unit_RequiresKeyword_7_5_1 extends KeywordToken  {
	
	public Unit_RequiresKeyword_7_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRequiresKeyword_7_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_MetaKeyword_7_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// metaRequiredCapabilities+=RequiredCapability
protected class Unit_MetaRequiredCapabilitiesAssignment_7_5_2 extends AssignmentToken  {
	
	public Unit_MetaRequiredCapabilitiesAssignment_7_5_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getMetaRequiredCapabilitiesAssignment_7_5_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("metaRequiredCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("metaRequiredCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRequiredCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getMetaRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_5_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_RequiresKeyword_7_5_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Unit_SemicolonKeyword_7_5_3 extends KeywordToken  {
	
	public Unit_SemicolonKeyword_7_5_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSemicolonKeyword_7_5_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_MetaRequiredCapabilitiesAssignment_7_5_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "advice" advice+=NamedAdvice
protected class Unit_Group_7_6 extends GroupToken {
	
	public Unit_Group_7_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_7_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_AdviceAssignment_7_6_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "advice"
protected class Unit_AdviceKeyword_7_6_0 extends KeywordToken  {
	
	public Unit_AdviceKeyword_7_6_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getAdviceKeyword_7_6_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_7(parent, this, 0, inst);
			case 1: return new Unit_Group_6(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// advice+=NamedAdvice
protected class Unit_AdviceAssignment_7_6_1 extends AssignmentToken  {
	
	public Unit_AdviceAssignment_7_6_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getAdviceAssignment_7_6_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NamedAdvice_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("advice",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("advice");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNamedAdviceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getAdviceNamedAdviceParserRuleCall_7_6_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_AdviceKeyword_7_6_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "sequential" "{" synchronizations+=Synchronization+ "}"
protected class Unit_Group_7_7 extends GroupToken {
	
	public Unit_Group_7_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_7_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RightCurlyBracketKeyword_7_7_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "sequential"
protected class Unit_SequentialKeyword_7_7_0 extends KeywordToken  {
	
	public Unit_SequentialKeyword_7_7_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSequentialKeyword_7_7_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_7(parent, this, 0, inst);
			case 1: return new Unit_Group_6(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Unit_LeftCurlyBracketKeyword_7_7_1 extends KeywordToken  {
	
	public Unit_LeftCurlyBracketKeyword_7_7_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_7_7_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SequentialKeyword_7_7_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// synchronizations+=Synchronization+
protected class Unit_SynchronizationsAssignment_7_7_2 extends AssignmentToken  {
	
	public Unit_SynchronizationsAssignment_7_7_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getSynchronizationsAssignment_7_7_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("synchronizations",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("synchronizations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSynchronizationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getSynchronizationsSynchronizationParserRuleCall_7_7_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_SynchronizationsAssignment_7_7_2(parent, next, actIndex, consumed);
			case 1: return new Unit_LeftCurlyBracketKeyword_7_7_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Unit_RightCurlyBracketKeyword_7_7_3 extends KeywordToken  {
	
	public Unit_RightCurlyBracketKeyword_7_7_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_7_7_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SynchronizationsAssignment_7_7_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "sequential" synchronizations+=Synchronization
protected class Unit_Group_7_8 extends GroupToken {
	
	public Unit_Group_7_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_7_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SynchronizationsAssignment_7_8_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "sequential"
protected class Unit_SequentialKeyword_7_8_0 extends KeywordToken  {
	
	public Unit_SequentialKeyword_7_8_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSequentialKeyword_7_8_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_7(parent, this, 0, inst);
			case 1: return new Unit_Group_6(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// synchronizations+=Synchronization
protected class Unit_SynchronizationsAssignment_7_8_1 extends AssignmentToken  {
	
	public Unit_SynchronizationsAssignment_7_8_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getSynchronizationsAssignment_7_8_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("synchronizations",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("synchronizations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSynchronizationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getSynchronizationsSynchronizationParserRuleCall_7_8_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_SequentialKeyword_7_8_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// buildMethods+=BuildMethod
protected class Unit_BuildMethodsAssignment_7_9 extends AssignmentToken  {
	
	public Unit_BuildMethodsAssignment_7_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getBuildMethodsAssignment_7_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BuildMethod_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("buildMethods",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("buildMethods");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBuildMethodRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getBuildMethodsBuildMethodParserRuleCall_7_9_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_Alternatives_7(parent, next, actIndex, consumed);
			case 1: return new Unit_Group_6(parent, next, actIndex, consumed);
			case 2: return new Unit_LeftCurlyBracketKeyword_5(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "repositories" "{" repositoryConfigurations+=RepositoryConfiguration* "}"
protected class Unit_Group_7_10 extends GroupToken {
	
	public Unit_Group_7_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_7_10();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RightCurlyBracketKeyword_7_10_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "repositories"
protected class Unit_RepositoriesKeyword_7_10_0 extends KeywordToken  {
	
	public Unit_RepositoriesKeyword_7_10_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRepositoriesKeyword_7_10_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_7(parent, this, 0, inst);
			case 1: return new Unit_Group_6(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Unit_LeftCurlyBracketKeyword_7_10_1 extends KeywordToken  {
	
	public Unit_LeftCurlyBracketKeyword_7_10_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_7_10_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RepositoriesKeyword_7_10_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// repositoryConfigurations+=RepositoryConfiguration*
protected class Unit_RepositoryConfigurationsAssignment_7_10_2 extends AssignmentToken  {
	
	public Unit_RepositoryConfigurationsAssignment_7_10_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getRepositoryConfigurationsAssignment_7_10_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryConfiguration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("repositoryConfigurations",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("repositoryConfigurations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRepositoryConfigurationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getRepositoryConfigurationsRepositoryConfigurationParserRuleCall_7_10_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_RepositoryConfigurationsAssignment_7_10_2(parent, next, actIndex, consumed);
			case 1: return new Unit_LeftCurlyBracketKeyword_7_10_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Unit_RightCurlyBracketKeyword_7_10_3 extends KeywordToken  {
	
	public Unit_RightCurlyBracketKeyword_7_10_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_7_10_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RepositoryConfigurationsAssignment_7_10_2(parent, this, 0, inst);
			case 1: return new Unit_LeftCurlyBracketKeyword_7_10_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



// "}"
protected class Unit_RightCurlyBracketKeyword_8 extends KeywordToken  {
	
	public Unit_RightCurlyBracketKeyword_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_7(parent, this, 0, inst);
			case 1: return new Unit_Group_6(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Unit ****************/


/************ begin Rule ProvidedCapability ****************
 *
 * ProvidedCapability:
 *   ("when" filter=Filter)? interface=QualifiedName "/" name=QualifiedName ("/" version=
 *   Version)?;
 *
 **/

// ("when" filter=Filter)? interface=QualifiedName "/" name=QualifiedName ("/" version=
// Version)?
protected class ProvidedCapability_Group extends GroupToken {
	
	public ProvidedCapability_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group_4(parent, this, 0, inst);
			case 1: return new ProvidedCapability_NameAssignment_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getProvidedCapabilityRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ("when" filter=Filter)?
protected class ProvidedCapability_Group_0 extends GroupToken {
	
	public ProvidedCapability_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_FilterAssignment_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "when"
protected class ProvidedCapability_WhenKeyword_0_0 extends KeywordToken  {
	
	public ProvidedCapability_WhenKeyword_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getWhenKeyword_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// filter=Filter
protected class ProvidedCapability_FilterAssignment_0_1 extends AssignmentToken  {
	
	public ProvidedCapability_FilterAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getFilterAssignment_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Filter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("filter",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("filter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFilterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getProvidedCapabilityAccess().getFilterFilterParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProvidedCapability_WhenKeyword_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// interface=QualifiedName
protected class ProvidedCapability_InterfaceAssignment_1 extends AssignmentToken  {
	
	public ProvidedCapability_InterfaceAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getInterfaceAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("interface",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("interface");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getProvidedCapabilityAccess().getInterfaceQualifiedNameParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "/"
protected class ProvidedCapability_SolidusKeyword_2 extends KeywordToken  {
	
	public ProvidedCapability_SolidusKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getSolidusKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_InterfaceAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=QualifiedName
protected class ProvidedCapability_NameAssignment_3 extends AssignmentToken  {
	
	public ProvidedCapability_NameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getNameAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_SolidusKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getProvidedCapabilityAccess().getNameQualifiedNameParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ("/" version=Version)?
protected class ProvidedCapability_Group_4 extends GroupToken {
	
	public ProvidedCapability_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getGroup_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_VersionAssignment_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "/"
protected class ProvidedCapability_SolidusKeyword_4_0 extends KeywordToken  {
	
	public ProvidedCapability_SolidusKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getSolidusKeyword_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_NameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// version=Version
protected class ProvidedCapability_VersionAssignment_4_1 extends AssignmentToken  {
	
	public ProvidedCapability_VersionAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getVersionAssignment_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Version_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("version",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("version");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVersionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getProvidedCapabilityAccess().getVersionVersionParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProvidedCapability_SolidusKeyword_4_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ProvidedCapability ****************/


/************ begin Rule RequiredCapability ****************
 *
 * RequiredCapability:
 *   ("when" filter=Filter)? interface=QualifiedName "/" name=QualifiedName ("/" range=
 *   VersionRange)?; 
 *                    
 * 
 * // An optionally named sequence of property statements
 *
 **/

// ("when" filter=Filter)? interface=QualifiedName "/" name=QualifiedName ("/" range=
// VersionRange)?
protected class RequiredCapability_Group extends GroupToken {
	
	public RequiredCapability_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_Group_4(parent, this, 0, inst);
			case 1: return new RequiredCapability_NameAssignment_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRequiredCapabilityRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ("when" filter=Filter)?
protected class RequiredCapability_Group_0 extends GroupToken {
	
	public RequiredCapability_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_FilterAssignment_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "when"
protected class RequiredCapability_WhenKeyword_0_0 extends KeywordToken  {
	
	public RequiredCapability_WhenKeyword_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getWhenKeyword_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// filter=Filter
protected class RequiredCapability_FilterAssignment_0_1 extends AssignmentToken  {
	
	public RequiredCapability_FilterAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getFilterAssignment_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Filter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("filter",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("filter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFilterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRequiredCapabilityAccess().getFilterFilterParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RequiredCapability_WhenKeyword_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// interface=QualifiedName
protected class RequiredCapability_InterfaceAssignment_1 extends AssignmentToken  {
	
	public RequiredCapability_InterfaceAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getInterfaceAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_Group_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("interface",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("interface");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getRequiredCapabilityAccess().getInterfaceQualifiedNameParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "/"
protected class RequiredCapability_SolidusKeyword_2 extends KeywordToken  {
	
	public RequiredCapability_SolidusKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getSolidusKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_InterfaceAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=QualifiedName
protected class RequiredCapability_NameAssignment_3 extends AssignmentToken  {
	
	public RequiredCapability_NameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getNameAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_SolidusKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getRequiredCapabilityAccess().getNameQualifiedNameParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ("/" range=VersionRange)?
protected class RequiredCapability_Group_4 extends GroupToken {
	
	public RequiredCapability_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getGroup_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_RangeAssignment_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "/"
protected class RequiredCapability_SolidusKeyword_4_0 extends KeywordToken  {
	
	public RequiredCapability_SolidusKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getSolidusKeyword_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_NameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// range=VersionRange
protected class RequiredCapability_RangeAssignment_4_1 extends AssignmentToken  {
	
	public RequiredCapability_RangeAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getRangeAssignment_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VersionRange_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("range",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("range");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVersionRangeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRequiredCapabilityAccess().getRangeVersionRangeParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RequiredCapability_SolidusKeyword_4_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule RequiredCapability ****************/


/************ begin Rule NamedPropertyStatements ****************
 *
 * NamedPropertyStatements returns NamedProperties:
 *   name=ID? body=CompoundPropertyOperation; 
 * 
 * // An optionally named sequence of property statements
 *     
 * 	             
 * 	
 * 
 * // Sequence of possibly filtered property statements
 *
 **/

// name=ID? body=CompoundPropertyOperation
protected class NamedPropertyStatements_Group extends GroupToken {
	
	public NamedPropertyStatements_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getNamedPropertyStatementsAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NamedPropertyStatements_BodyAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getNamedPropertyStatementsRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=ID?
protected class NamedPropertyStatements_NameAssignment_0 extends AssignmentToken  {
	
	public NamedPropertyStatements_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNamedPropertyStatementsAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getNamedPropertyStatementsAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// body=CompoundPropertyOperation
protected class NamedPropertyStatements_BodyAssignment_1 extends AssignmentToken  {
	
	public NamedPropertyStatements_BodyAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNamedPropertyStatementsAccess().getBodyAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundPropertyOperation_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("body",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompoundPropertyOperationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getNamedPropertyStatementsAccess().getBodyCompoundPropertyOperationParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NamedPropertyStatements_NameAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}


/************ end Rule NamedPropertyStatements ****************/


/************ begin Rule CompoundPropertyOperation ****************
 *
 * CompoundPropertyOperation:
 *   "{" operations+=PropertyOperation* "}"; 
 * 
 * // Sequence of possibly filtered property statements	
 *     
 * 	           
 * 	
 * 
 * // For model generation, to get supertype correct
 *
 **/

// "{" operations+=PropertyOperation* "}"
protected class CompoundPropertyOperation_Group extends GroupToken {
	
	public CompoundPropertyOperation_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCompoundPropertyOperationAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundPropertyOperation_RightCurlyBracketKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCompoundPropertyOperationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "{"
protected class CompoundPropertyOperation_LeftCurlyBracketKeyword_0 extends KeywordToken  {
	
	public CompoundPropertyOperation_LeftCurlyBracketKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundPropertyOperationAccess().getLeftCurlyBracketKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// operations+=PropertyOperation*
protected class CompoundPropertyOperation_OperationsAssignment_1 extends AssignmentToken  {
	
	public CompoundPropertyOperation_OperationsAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundPropertyOperationAccess().getOperationsAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyOperation_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("operations",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("operations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyOperationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompoundPropertyOperationAccess().getOperationsPropertyOperationParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompoundPropertyOperation_OperationsAssignment_1(parent, next, actIndex, consumed);
			case 1: return new CompoundPropertyOperation_LeftCurlyBracketKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class CompoundPropertyOperation_RightCurlyBracketKeyword_2 extends KeywordToken  {
	
	public CompoundPropertyOperation_RightCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundPropertyOperationAccess().getRightCurlyBracketKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundPropertyOperation_OperationsAssignment_1(parent, this, 0, inst);
			case 1: return new CompoundPropertyOperation_LeftCurlyBracketKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule CompoundPropertyOperation ****************/


/************ begin Rule PropertyOperation ****************
 *
 * PropertyOperation:
 *   FilteredPropertyOperation|SetPropertyOperation|UnsetPropertyOperation|
 *   CompoundPropertyOperation; 
 * 
 * // For model generation, to get supertype correct
 *
 **/

// FilteredPropertyOperation|SetPropertyOperation|UnsetPropertyOperation|
// CompoundPropertyOperation 
// 
// // For model generation, to get supertype correct
protected class PropertyOperation_Alternatives extends AlternativesToken {

	public PropertyOperation_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getPropertyOperationAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyOperation_FilteredPropertyOperationParserRuleCall_0(parent, this, 0, inst);
			case 1: return new PropertyOperation_SetPropertyOperationParserRuleCall_1(parent, this, 1, inst);
			case 2: return new PropertyOperation_UnsetPropertyOperationParserRuleCall_2(parent, this, 2, inst);
			case 3: return new PropertyOperation_CompoundPropertyOperationParserRuleCall_3(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPropertyOperationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// FilteredPropertyOperation
protected class PropertyOperation_FilteredPropertyOperationParserRuleCall_0 extends RuleCallToken {
	
	public PropertyOperation_FilteredPropertyOperationParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPropertyOperationAccess().getFilteredPropertyOperationParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FilteredPropertyOperation_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(FilteredPropertyOperation_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getFilteredPropertyOperationRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// SetPropertyOperation
protected class PropertyOperation_SetPropertyOperationParserRuleCall_1 extends RuleCallToken {
	
	public PropertyOperation_SetPropertyOperationParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPropertyOperationAccess().getSetPropertyOperationParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SetPropertyOperation_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(SetPropertyOperation_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSetPropertyOperationRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// UnsetPropertyOperation
protected class PropertyOperation_UnsetPropertyOperationParserRuleCall_2 extends RuleCallToken {
	
	public PropertyOperation_UnsetPropertyOperationParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPropertyOperationAccess().getUnsetPropertyOperationParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnsetPropertyOperation_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UnsetPropertyOperation_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUnsetPropertyOperationRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// CompoundPropertyOperation
protected class PropertyOperation_CompoundPropertyOperationParserRuleCall_3 extends RuleCallToken {
	
	public PropertyOperation_CompoundPropertyOperationParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPropertyOperationAccess().getCompoundPropertyOperationParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundPropertyOperation_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CompoundPropertyOperation_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCompoundPropertyOperationRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule PropertyOperation ****************/


/************ begin Rule FilteredPropertyOperation ****************
 *
 * FilteredPropertyOperation:
 *   "when" filter=Filter body=( SetPropertyOperation | UnsetPropertyOperation |
 *   CompoundPropertyOperation );
 *
 **/

// "when" filter=Filter body=( SetPropertyOperation | UnsetPropertyOperation |
// CompoundPropertyOperation )
protected class FilteredPropertyOperation_Group extends GroupToken {
	
	public FilteredPropertyOperation_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFilteredPropertyOperationAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FilteredPropertyOperation_BodyAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFilteredPropertyOperationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "when"
protected class FilteredPropertyOperation_WhenKeyword_0 extends KeywordToken  {
	
	public FilteredPropertyOperation_WhenKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFilteredPropertyOperationAccess().getWhenKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// filter=Filter
protected class FilteredPropertyOperation_FilterAssignment_1 extends AssignmentToken  {
	
	public FilteredPropertyOperation_FilterAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFilteredPropertyOperationAccess().getFilterAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Filter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("filter",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("filter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFilterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFilteredPropertyOperationAccess().getFilterFilterParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FilteredPropertyOperation_WhenKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// body=( SetPropertyOperation | UnsetPropertyOperation | CompoundPropertyOperation )
protected class FilteredPropertyOperation_BodyAssignment_2 extends AssignmentToken  {
	
	public FilteredPropertyOperation_BodyAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFilteredPropertyOperationAccess().getBodyAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SetPropertyOperation_Group(this, this, 0, inst);
			case 1: return new UnsetPropertyOperation_Group(this, this, 1, inst);
			case 2: return new CompoundPropertyOperation_Group(this, this, 2, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("body",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSetPropertyOperationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFilteredPropertyOperationAccess().getBodySetPropertyOperationParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUnsetPropertyOperationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFilteredPropertyOperationAccess().getBodyUnsetPropertyOperationParserRuleCall_2_0_1(); 
				consumed = obj;
				return param;
			}
		}
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompoundPropertyOperationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFilteredPropertyOperationAccess().getBodyCompoundPropertyOperationParserRuleCall_2_0_2(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FilteredPropertyOperation_FilterAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule FilteredPropertyOperation ****************/


/************ begin Rule SetPropertyOperation ****************
 *
 * SetPropertyOperation:
 *   immutable?="immutable"? key=PropertyName op=AssignmentOperator value=Expression ";";
 *
 **/

// immutable?="immutable"? key=PropertyName op=AssignmentOperator value=Expression ";"
protected class SetPropertyOperation_Group extends GroupToken {
	
	public SetPropertyOperation_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSetPropertyOperationAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SetPropertyOperation_SemicolonKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSetPropertyOperationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// immutable?="immutable"?
protected class SetPropertyOperation_ImmutableAssignment_0 extends AssignmentToken  {
	
	public SetPropertyOperation_ImmutableAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSetPropertyOperationAccess().getImmutableAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("immutable",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("immutable");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getSetPropertyOperationAccess().getImmutableImmutableKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// key=PropertyName
protected class SetPropertyOperation_KeyAssignment_1 extends AssignmentToken  {
	
	public SetPropertyOperation_KeyAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSetPropertyOperationAccess().getKeyAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SetPropertyOperation_ImmutableAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("key",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("key");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getSetPropertyOperationAccess().getKeyPropertyNameParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// op=AssignmentOperator
protected class SetPropertyOperation_OpAssignment_2 extends AssignmentToken  {
	
	public SetPropertyOperation_OpAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSetPropertyOperationAccess().getOpAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SetPropertyOperation_KeyAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("op",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("op");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getSetPropertyOperationAccess().getOpAssignmentOperatorEnumRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// value=Expression
protected class SetPropertyOperation_ValueAssignment_3 extends AssignmentToken  {
	
	public SetPropertyOperation_ValueAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSetPropertyOperationAccess().getValueAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSetPropertyOperationAccess().getValueExpressionParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SetPropertyOperation_OpAssignment_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class SetPropertyOperation_SemicolonKeyword_4 extends KeywordToken  {
	
	public SetPropertyOperation_SemicolonKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSetPropertyOperationAccess().getSemicolonKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SetPropertyOperation_ValueAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule SetPropertyOperation ****************/


/************ begin Rule UnsetPropertyOperation ****************
 *
 * UnsetPropertyOperation:
 *   "unset" key=PropertyName ";";
 *
 **/

// "unset" key=PropertyName ";"
protected class UnsetPropertyOperation_Group extends GroupToken {
	
	public UnsetPropertyOperation_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnsetPropertyOperationAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnsetPropertyOperation_SemicolonKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnsetPropertyOperationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "unset"
protected class UnsetPropertyOperation_UnsetKeyword_0 extends KeywordToken  {
	
	public UnsetPropertyOperation_UnsetKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnsetPropertyOperationAccess().getUnsetKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// key=PropertyName
protected class UnsetPropertyOperation_KeyAssignment_1 extends AssignmentToken  {
	
	public UnsetPropertyOperation_KeyAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnsetPropertyOperationAccess().getKeyAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnsetPropertyOperation_UnsetKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("key",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("key");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getUnsetPropertyOperationAccess().getKeyPropertyNameParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class UnsetPropertyOperation_SemicolonKeyword_2 extends KeywordToken  {
	
	public UnsetPropertyOperation_SemicolonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnsetPropertyOperationAccess().getSemicolonKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnsetPropertyOperation_KeyAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule UnsetPropertyOperation ****************/


/************ begin Rule Synchronization ****************
 *
 * Synchronization:
 *   partrefs+=SynchronizedPart ("," partrefs+=SynchronizedPart)+ ";"; 
 * 
 *  
 * 	                // at least 2
 *
 **/

// partrefs+=SynchronizedPart ("," partrefs+=SynchronizedPart)+ ";"                 // at least 2
protected class Synchronization_Group extends GroupToken {
	
	public Synchronization_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSynchronizationAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_SemicolonKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSynchronizationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// partrefs+=SynchronizedPart
protected class Synchronization_PartrefsAssignment_0 extends AssignmentToken  {
	
	public Synchronization_PartrefsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSynchronizationAccess().getPartrefsAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("partrefs",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("partrefs");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getSynchronizationAccess().getPartrefsSynchronizedPartParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ("," partrefs+=SynchronizedPart)+
protected class Synchronization_Group_1 extends GroupToken {
	
	public Synchronization_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSynchronizationAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_PartrefsAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Synchronization_CommaKeyword_1_0 extends KeywordToken  {
	
	public Synchronization_CommaKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSynchronizationAccess().getCommaKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_Group_1(parent, this, 0, inst);
			case 1: return new Synchronization_PartrefsAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// partrefs+=SynchronizedPart
protected class Synchronization_PartrefsAssignment_1_1 extends AssignmentToken  {
	
	public Synchronization_PartrefsAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSynchronizationAccess().getPartrefsAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_CommaKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("partrefs",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("partrefs");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getSynchronizationAccess().getPartrefsSynchronizedPartParserRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}


// ";"     // at least 2
protected class Synchronization_SemicolonKeyword_2 extends KeywordToken  {
	
	public Synchronization_SemicolonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSynchronizationAccess().getSemicolonKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_Group_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Synchronization ****************/



/************ begin Rule PathGroup ****************
 *
 * PathGroup:
 *   paths+=PathVectorElement* ("annotations" annotations=CompoundPropertyOperation)?; 
 * 	
 * / * PATH GROUP * /
 *
 **/

// paths+=PathVectorElement* ("annotations" annotations=CompoundPropertyOperation)?
protected class PathGroup_Group extends GroupToken {
	
	public PathGroup_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_Group_1(parent, this, 0, inst);
			case 1: return new PathGroup_PathsAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPathGroupRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// paths+=PathVectorElement*
protected class PathGroup_PathsAssignment_0 extends AssignmentToken  {
	
	public PathGroup_PathsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getPathsAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathVectorElement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("paths",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("paths");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPathVectorElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPathGroupAccess().getPathsPathVectorElementParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PathGroup_PathsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// ("annotations" annotations=CompoundPropertyOperation)?
protected class PathGroup_Group_1 extends GroupToken {
	
	public PathGroup_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_AnnotationsAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "annotations"
protected class PathGroup_AnnotationsKeyword_1_0 extends KeywordToken  {
	
	public PathGroup_AnnotationsKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getAnnotationsKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_PathsAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// annotations=CompoundPropertyOperation
protected class PathGroup_AnnotationsAssignment_1_1 extends AssignmentToken  {
	
	public PathGroup_AnnotationsAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getAnnotationsAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundPropertyOperation_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("annotations",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("annotations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompoundPropertyOperationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPathGroupAccess().getAnnotationsCompoundPropertyOperationParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PathGroup_AnnotationsKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule PathGroup ****************/


/************ begin Rule PathVectorElement ****************
 *
 * PathVectorElement:
 *   FilteredPathVector|BasePathVector|UnbasedPathVector;
 *
 **/

// FilteredPathVector|BasePathVector|UnbasedPathVector
protected class PathVectorElement_Alternatives extends AlternativesToken {

	public PathVectorElement_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getPathVectorElementAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathVectorElement_FilteredPathVectorParserRuleCall_0(parent, this, 0, inst);
			case 1: return new PathVectorElement_BasePathVectorParserRuleCall_1(parent, this, 1, inst);
			case 2: return new PathVectorElement_UnbasedPathVectorParserRuleCall_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPathVectorElementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// FilteredPathVector
protected class PathVectorElement_FilteredPathVectorParserRuleCall_0 extends RuleCallToken {
	
	public PathVectorElement_FilteredPathVectorParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPathVectorElementAccess().getFilteredPathVectorParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FilteredPathVector_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(FilteredPathVector_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getFilteredPathVectorRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// BasePathVector
protected class PathVectorElement_BasePathVectorParserRuleCall_1 extends RuleCallToken {
	
	public PathVectorElement_BasePathVectorParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPathVectorElementAccess().getBasePathVectorParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasePathVector_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(BasePathVector_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBasePathVectorRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// UnbasedPathVector
protected class PathVectorElement_UnbasedPathVectorParserRuleCall_2 extends RuleCallToken {
	
	public PathVectorElement_UnbasedPathVectorParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPathVectorElementAccess().getUnbasedPathVectorParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnbasedPathVector_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UnbasedPathVector_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUnbasedPathVectorRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule PathVectorElement ****************/


/************ begin Rule FilteredPathVector ****************
 *
 * FilteredPathVector:
 *   "when" filter=Filter body=( BasePathVector | UnbasedPathVector | CompoundPathVector );
 *
 **/

// "when" filter=Filter body=( BasePathVector | UnbasedPathVector | CompoundPathVector )
protected class FilteredPathVector_Group extends GroupToken {
	
	public FilteredPathVector_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFilteredPathVectorAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FilteredPathVector_BodyAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFilteredPathVectorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "when"
protected class FilteredPathVector_WhenKeyword_0 extends KeywordToken  {
	
	public FilteredPathVector_WhenKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFilteredPathVectorAccess().getWhenKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// filter=Filter
protected class FilteredPathVector_FilterAssignment_1 extends AssignmentToken  {
	
	public FilteredPathVector_FilterAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFilteredPathVectorAccess().getFilterAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Filter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("filter",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("filter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFilterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFilteredPathVectorAccess().getFilterFilterParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FilteredPathVector_WhenKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// body=( BasePathVector | UnbasedPathVector | CompoundPathVector )
protected class FilteredPathVector_BodyAssignment_2 extends AssignmentToken  {
	
	public FilteredPathVector_BodyAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFilteredPathVectorAccess().getBodyAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasePathVector_Group(this, this, 0, inst);
			case 1: return new UnbasedPathVector_Group(this, this, 1, inst);
			case 2: return new CompoundPathVector_Group(this, this, 2, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("body",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBasePathVectorRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFilteredPathVectorAccess().getBodyBasePathVectorParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUnbasedPathVectorRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFilteredPathVectorAccess().getBodyUnbasedPathVectorParserRuleCall_2_0_1(); 
				consumed = obj;
				return param;
			}
		}
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompoundPathVectorRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFilteredPathVectorAccess().getBodyCompoundPathVectorParserRuleCall_2_0_2(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FilteredPathVector_FilterAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule FilteredPathVector ****************/


/************ begin Rule BasePathVector ****************
 *
 * BasePathVector returns PathVector:
 *   basePath=Path "[" (paths+=Path ("," paths+=Path)*)? "]" ";";
 *
 **/

// basePath=Path "[" (paths+=Path ("," paths+=Path)*)? "]" ";"
protected class BasePathVector_Group extends GroupToken {
	
	public BasePathVector_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBasePathVectorAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasePathVector_SemicolonKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBasePathVectorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// basePath=Path
protected class BasePathVector_BasePathAssignment_0 extends AssignmentToken  {
	
	public BasePathVector_BasePathAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBasePathVectorAccess().getBasePathAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("basePath",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("basePath");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getBasePathVectorAccess().getBasePathPathParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "["
protected class BasePathVector_LeftSquareBracketKeyword_1 extends KeywordToken  {
	
	public BasePathVector_LeftSquareBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBasePathVectorAccess().getLeftSquareBracketKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasePathVector_BasePathAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (paths+=Path ("," paths+=Path)*)?
protected class BasePathVector_Group_2 extends GroupToken {
	
	public BasePathVector_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBasePathVectorAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasePathVector_Group_2_1(parent, this, 0, inst);
			case 1: return new BasePathVector_PathsAssignment_2_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// paths+=Path
protected class BasePathVector_PathsAssignment_2_0 extends AssignmentToken  {
	
	public BasePathVector_PathsAssignment_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBasePathVectorAccess().getPathsAssignment_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasePathVector_LeftSquareBracketKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("paths",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("paths");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getBasePathVectorAccess().getPathsPathParserRuleCall_2_0_0();
			return obj;
		}
		return null;
	}

}

// ("," paths+=Path)*
protected class BasePathVector_Group_2_1 extends GroupToken {
	
	public BasePathVector_Group_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBasePathVectorAccess().getGroup_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasePathVector_PathsAssignment_2_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class BasePathVector_CommaKeyword_2_1_0 extends KeywordToken  {
	
	public BasePathVector_CommaKeyword_2_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBasePathVectorAccess().getCommaKeyword_2_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasePathVector_Group_2_1(parent, this, 0, inst);
			case 1: return new BasePathVector_PathsAssignment_2_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// paths+=Path
protected class BasePathVector_PathsAssignment_2_1_1 extends AssignmentToken  {
	
	public BasePathVector_PathsAssignment_2_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBasePathVectorAccess().getPathsAssignment_2_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasePathVector_CommaKeyword_2_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("paths",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("paths");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getBasePathVectorAccess().getPathsPathParserRuleCall_2_1_1_0();
			return obj;
		}
		return null;
	}

}



// "]"
protected class BasePathVector_RightSquareBracketKeyword_3 extends KeywordToken  {
	
	public BasePathVector_RightSquareBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBasePathVectorAccess().getRightSquareBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasePathVector_Group_2(parent, this, 0, inst);
			case 1: return new BasePathVector_LeftSquareBracketKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ";"
protected class BasePathVector_SemicolonKeyword_4 extends KeywordToken  {
	
	public BasePathVector_SemicolonKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBasePathVectorAccess().getSemicolonKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasePathVector_RightSquareBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule BasePathVector ****************/


/************ begin Rule UnbasedPathVector ****************
 *
 * UnbasedPathVector returns PathVector:
 *   paths+=Path ("," paths+=Path)* ";";
 *
 **/

// paths+=Path ("," paths+=Path)* ";"
protected class UnbasedPathVector_Group extends GroupToken {
	
	public UnbasedPathVector_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnbasedPathVectorAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnbasedPathVector_SemicolonKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnbasedPathVectorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// paths+=Path
protected class UnbasedPathVector_PathsAssignment_0 extends AssignmentToken  {
	
	public UnbasedPathVector_PathsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnbasedPathVectorAccess().getPathsAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("paths",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("paths");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getUnbasedPathVectorAccess().getPathsPathParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ("," paths+=Path)*
protected class UnbasedPathVector_Group_1 extends GroupToken {
	
	public UnbasedPathVector_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnbasedPathVectorAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnbasedPathVector_PathsAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class UnbasedPathVector_CommaKeyword_1_0 extends KeywordToken  {
	
	public UnbasedPathVector_CommaKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnbasedPathVectorAccess().getCommaKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnbasedPathVector_Group_1(parent, this, 0, inst);
			case 1: return new UnbasedPathVector_PathsAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// paths+=Path
protected class UnbasedPathVector_PathsAssignment_1_1 extends AssignmentToken  {
	
	public UnbasedPathVector_PathsAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnbasedPathVectorAccess().getPathsAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnbasedPathVector_CommaKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("paths",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("paths");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getUnbasedPathVectorAccess().getPathsPathParserRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}


// ";"
protected class UnbasedPathVector_SemicolonKeyword_2 extends KeywordToken  {
	
	public UnbasedPathVector_SemicolonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnbasedPathVectorAccess().getSemicolonKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnbasedPathVector_Group_1(parent, this, 0, inst);
			case 1: return new UnbasedPathVector_PathsAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule UnbasedPathVector ****************/


/************ begin Rule CompoundPathVector ****************
 *
 * CompoundPathVector:
 *   "{" body+=PathVectorElement* "}"; 
 * 	
 *             
 * 
 * / *
 * * A path can be written without quotes if it consists of safe chars 
 * * TODO: repace use of ID with better definition.
 * * TODO: Validation of path syntax (MS, n*x) ?
 * * /
 *
 **/

// "{" body+=PathVectorElement* "}"
protected class CompoundPathVector_Group extends GroupToken {
	
	public CompoundPathVector_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCompoundPathVectorAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundPathVector_RightCurlyBracketKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCompoundPathVectorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "{"
protected class CompoundPathVector_LeftCurlyBracketKeyword_0 extends KeywordToken  {
	
	public CompoundPathVector_LeftCurlyBracketKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundPathVectorAccess().getLeftCurlyBracketKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// body+=PathVectorElement*
protected class CompoundPathVector_BodyAssignment_1 extends AssignmentToken  {
	
	public CompoundPathVector_BodyAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundPathVectorAccess().getBodyAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathVectorElement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("body",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPathVectorElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompoundPathVectorAccess().getBodyPathVectorElementParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompoundPathVector_BodyAssignment_1(parent, next, actIndex, consumed);
			case 1: return new CompoundPathVector_LeftCurlyBracketKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class CompoundPathVector_RightCurlyBracketKeyword_2 extends KeywordToken  {
	
	public CompoundPathVector_RightCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundPathVectorAccess().getRightCurlyBracketKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundPathVector_BodyAssignment_1(parent, this, 0, inst);
			case 1: return new CompoundPathVector_LeftCurlyBracketKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule CompoundPathVector ****************/



/************ begin Rule Prerequisite ****************
 *
 * Prerequisite:
 *   (("when" filter=Filter)? (alias=ID "=")? (partReference=PrerequisiteEntry closure=
 *   Closure?)) ";";
 *
 **/

// (("when" filter=Filter)? (alias=ID "=")? (partReference=PrerequisiteEntry closure=
// Closure?)) ";"
protected class Prerequisite_Group extends GroupToken {
	
	public Prerequisite_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_SemicolonKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPrerequisiteRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ("when" filter=Filter)? (alias=ID "=")? (partReference=PrerequisiteEntry closure=
// Closure?)
protected class Prerequisite_Group_0 extends GroupToken {
	
	public Prerequisite_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_Group_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("when" filter=Filter)?
protected class Prerequisite_Group_0_0 extends GroupToken {
	
	public Prerequisite_Group_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getGroup_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_FilterAssignment_0_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "when"
protected class Prerequisite_WhenKeyword_0_0_0 extends KeywordToken  {
	
	public Prerequisite_WhenKeyword_0_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getWhenKeyword_0_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// filter=Filter
protected class Prerequisite_FilterAssignment_0_0_1 extends AssignmentToken  {
	
	public Prerequisite_FilterAssignment_0_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getFilterAssignment_0_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Filter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("filter",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("filter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFilterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPrerequisiteAccess().getFilterFilterParserRuleCall_0_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Prerequisite_WhenKeyword_0_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// (alias=ID "=")?
protected class Prerequisite_Group_0_1 extends GroupToken {
	
	public Prerequisite_Group_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getGroup_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_EqualsSignKeyword_0_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// alias=ID
protected class Prerequisite_AliasAssignment_0_1_0 extends AssignmentToken  {
	
	public Prerequisite_AliasAssignment_0_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getAliasAssignment_0_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_Group_0_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("alias",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("alias");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPrerequisiteAccess().getAliasIDTerminalRuleCall_0_1_0_0();
			return obj;
		}
		return null;
	}

}

// "="
protected class Prerequisite_EqualsSignKeyword_0_1_1 extends KeywordToken  {
	
	public Prerequisite_EqualsSignKeyword_0_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getEqualsSignKeyword_0_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_AliasAssignment_0_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// partReference=PrerequisiteEntry closure=Closure?
protected class Prerequisite_Group_0_2 extends GroupToken {
	
	public Prerequisite_Group_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getGroup_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_ClosureAssignment_0_2_1(parent, this, 0, inst);
			case 1: return new Prerequisite_PartReferenceAssignment_0_2_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// partReference=PrerequisiteEntry
protected class Prerequisite_PartReferenceAssignment_0_2_0 extends AssignmentToken  {
	
	public Prerequisite_PartReferenceAssignment_0_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getPartReferenceAssignment_0_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrerequisiteEntry_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("partReference",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("partReference");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrerequisiteEntryRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPrerequisiteAccess().getPartReferencePrerequisiteEntryParserRuleCall_0_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Prerequisite_Group_0_1(parent, next, actIndex, consumed);
			case 1: return new Prerequisite_Group_0_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 2, consumed);
		}	
	}	
}

// closure=Closure?
protected class Prerequisite_ClosureAssignment_0_2_1 extends AssignmentToken  {
	
	public Prerequisite_ClosureAssignment_0_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getClosureAssignment_0_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("closure",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("closure");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getClosureRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPrerequisiteAccess().getClosureClosureParserRuleCall_0_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Prerequisite_PartReferenceAssignment_0_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ";"
protected class Prerequisite_SemicolonKeyword_1 extends KeywordToken  {
	
	public Prerequisite_SemicolonKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getSemicolonKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_Group_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Prerequisite ****************/


/************ begin Rule Closure ****************
 *
 * Closure:
 *   "with" "{" ("properties" properties=CompoundPropertyOperation)? ("advice" advice=
 *   CompoundAdvice)? "}";
 *
 **/

// "with" "{" ("properties" properties=CompoundPropertyOperation)? ("advice" advice=
// CompoundAdvice)? "}"
protected class Closure_Group extends GroupToken {
	
	public Closure_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getClosureAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_RightCurlyBracketKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getClosureRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "with"
protected class Closure_WithKeyword_0 extends KeywordToken  {
	
	public Closure_WithKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureAccess().getWithKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "{"
protected class Closure_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public Closure_LeftCurlyBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureAccess().getLeftCurlyBracketKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_WithKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("properties" properties=CompoundPropertyOperation)?
protected class Closure_Group_2 extends GroupToken {
	
	public Closure_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getClosureAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_PropertiesAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "properties"
protected class Closure_PropertiesKeyword_2_0 extends KeywordToken  {
	
	public Closure_PropertiesKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureAccess().getPropertiesKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_LeftCurlyBracketKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// properties=CompoundPropertyOperation
protected class Closure_PropertiesAssignment_2_1 extends AssignmentToken  {
	
	public Closure_PropertiesAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClosureAccess().getPropertiesAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundPropertyOperation_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("properties",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("properties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompoundPropertyOperationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClosureAccess().getPropertiesCompoundPropertyOperationParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Closure_PropertiesKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("advice" advice=CompoundAdvice)?
protected class Closure_Group_3 extends GroupToken {
	
	public Closure_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getClosureAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_AdviceAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "advice"
protected class Closure_AdviceKeyword_3_0 extends KeywordToken  {
	
	public Closure_AdviceKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureAccess().getAdviceKeyword_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_Group_2(parent, this, 0, inst);
			case 1: return new Closure_LeftCurlyBracketKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// advice=CompoundAdvice
protected class Closure_AdviceAssignment_3_1 extends AssignmentToken  {
	
	public Closure_AdviceAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClosureAccess().getAdviceAssignment_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundAdvice_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("advice",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("advice");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompoundAdviceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClosureAccess().getAdviceCompoundAdviceParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Closure_AdviceKeyword_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class Closure_RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public Closure_RightCurlyBracketKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureAccess().getRightCurlyBracketKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_Group_3(parent, this, 0, inst);
			case 1: return new Closure_Group_2(parent, this, 1, inst);
			case 2: return new Closure_LeftCurlyBracketKeyword_1(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Closure ****************/


/************ begin Rule PrerequisiteEntry ****************
 *
 * PrerequisiteEntry:
 *   PartInSelf|CapabilityReferencedPart|CompoundReferences;
 *
 **/

// PartInSelf|CapabilityReferencedPart|CompoundReferences
protected class PrerequisiteEntry_Alternatives extends AlternativesToken {

	public PrerequisiteEntry_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getPrerequisiteEntryAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrerequisiteEntry_PartInSelfParserRuleCall_0(parent, this, 0, inst);
			case 1: return new PrerequisiteEntry_CapabilityReferencedPartParserRuleCall_1(parent, this, 1, inst);
			case 2: return new PrerequisiteEntry_CompoundReferencesParserRuleCall_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPrerequisiteEntryRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// PartInSelf
protected class PrerequisiteEntry_PartInSelfParserRuleCall_0 extends RuleCallToken {
	
	public PrerequisiteEntry_PartInSelfParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrerequisiteEntryAccess().getPartInSelfParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PartInSelf_PartNameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(PartInSelf_PartNameAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPartInSelfRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// CapabilityReferencedPart
protected class PrerequisiteEntry_CapabilityReferencedPartParserRuleCall_1 extends RuleCallToken {
	
	public PrerequisiteEntry_CapabilityReferencedPartParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrerequisiteEntryAccess().getCapabilityReferencedPartParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CapabilityReferencedPart_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCapabilityReferencedPartRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// CompoundReferences
protected class PrerequisiteEntry_CompoundReferencesParserRuleCall_2 extends RuleCallToken {
	
	public PrerequisiteEntry_CompoundReferencesParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrerequisiteEntryAccess().getCompoundReferencesParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundReferences_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CompoundReferences_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCompoundReferencesRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule PrerequisiteEntry ****************/


/************ begin Rule PartInSelf ****************
 *
 * PartInSelf:
 *   partName=PartName; 
 * 	
 * 	      // i.e. self#partName
 *
 **/

// partName=PartName      // i.e. self#partName
protected class PartInSelf_PartNameAssignment extends AssignmentToken  {
	
	public PartInSelf_PartNameAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPartInSelfAccess().getPartNameAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPartInSelfRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("partName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("partName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getPartInSelfAccess().getPartNamePartNameParserRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule PartInSelf ****************/


/************ begin Rule CapabilityReferencedPart ****************
 *
 * CapabilityReferencedPart:
 *   interface=InterfaceName "/" name=UnitName ("/" range=VersionRange)? "#" partName=
 *   PartName|interface=InterfaceName "/" name=UnitName ("/" range=VersionRange)?;
 *
 **/

// interface=InterfaceName "/" name=UnitName ("/" range=VersionRange)? "#" partName=
// PartName|interface=InterfaceName "/" name=UnitName ("/" range=VersionRange)?
protected class CapabilityReferencedPart_Alternatives extends AlternativesToken {

	public CapabilityReferencedPart_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_Group_0(parent, this, 0, inst);
			case 1: return new CapabilityReferencedPart_Group_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCapabilityReferencedPartRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// interface=InterfaceName "/" name=UnitName ("/" range=VersionRange)? "#" partName=
// PartName
protected class CapabilityReferencedPart_Group_0 extends GroupToken {
	
	public CapabilityReferencedPart_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_PartNameAssignment_0_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// interface=InterfaceName
protected class CapabilityReferencedPart_InterfaceAssignment_0_0 extends AssignmentToken  {
	
	public CapabilityReferencedPart_InterfaceAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getInterfaceAssignment_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("interface",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("interface");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getCapabilityReferencedPartAccess().getInterfaceInterfaceNameParserRuleCall_0_0_0();
			return obj;
		}
		return null;
	}

}

// "/"
protected class CapabilityReferencedPart_SolidusKeyword_0_1 extends KeywordToken  {
	
	public CapabilityReferencedPart_SolidusKeyword_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getSolidusKeyword_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_InterfaceAssignment_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=UnitName
protected class CapabilityReferencedPart_NameAssignment_0_2 extends AssignmentToken  {
	
	public CapabilityReferencedPart_NameAssignment_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getNameAssignment_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_SolidusKeyword_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getCapabilityReferencedPartAccess().getNameUnitNameParserRuleCall_0_2_0();
			return obj;
		}
		return null;
	}

}

// ("/" range=VersionRange)?
protected class CapabilityReferencedPart_Group_0_3 extends GroupToken {
	
	public CapabilityReferencedPart_Group_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getGroup_0_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_RangeAssignment_0_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "/"
protected class CapabilityReferencedPart_SolidusKeyword_0_3_0 extends KeywordToken  {
	
	public CapabilityReferencedPart_SolidusKeyword_0_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getSolidusKeyword_0_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_NameAssignment_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// range=VersionRange
protected class CapabilityReferencedPart_RangeAssignment_0_3_1 extends AssignmentToken  {
	
	public CapabilityReferencedPart_RangeAssignment_0_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getRangeAssignment_0_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VersionRange_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("range",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("range");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVersionRangeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCapabilityReferencedPartAccess().getRangeVersionRangeParserRuleCall_0_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CapabilityReferencedPart_SolidusKeyword_0_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "#"
protected class CapabilityReferencedPart_NumberSignKeyword_0_4 extends KeywordToken  {
	
	public CapabilityReferencedPart_NumberSignKeyword_0_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getNumberSignKeyword_0_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_Group_0_3(parent, this, 0, inst);
			case 1: return new CapabilityReferencedPart_NameAssignment_0_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// partName=PartName
protected class CapabilityReferencedPart_PartNameAssignment_0_5 extends AssignmentToken  {
	
	public CapabilityReferencedPart_PartNameAssignment_0_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getPartNameAssignment_0_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_NumberSignKeyword_0_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("partName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("partName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getCapabilityReferencedPartAccess().getPartNamePartNameParserRuleCall_0_5_0();
			return obj;
		}
		return null;
	}

}


// interface=InterfaceName "/" name=UnitName ("/" range=VersionRange)?
protected class CapabilityReferencedPart_Group_1 extends GroupToken {
	
	public CapabilityReferencedPart_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_Group_1_3(parent, this, 0, inst);
			case 1: return new CapabilityReferencedPart_NameAssignment_1_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// interface=InterfaceName
protected class CapabilityReferencedPart_InterfaceAssignment_1_0 extends AssignmentToken  {
	
	public CapabilityReferencedPart_InterfaceAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getInterfaceAssignment_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("interface",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("interface");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getCapabilityReferencedPartAccess().getInterfaceInterfaceNameParserRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// "/"
protected class CapabilityReferencedPart_SolidusKeyword_1_1 extends KeywordToken  {
	
	public CapabilityReferencedPart_SolidusKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getSolidusKeyword_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_InterfaceAssignment_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=UnitName
protected class CapabilityReferencedPart_NameAssignment_1_2 extends AssignmentToken  {
	
	public CapabilityReferencedPart_NameAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getNameAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_SolidusKeyword_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getCapabilityReferencedPartAccess().getNameUnitNameParserRuleCall_1_2_0();
			return obj;
		}
		return null;
	}

}

// ("/" range=VersionRange)?
protected class CapabilityReferencedPart_Group_1_3 extends GroupToken {
	
	public CapabilityReferencedPart_Group_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getGroup_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_RangeAssignment_1_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "/"
protected class CapabilityReferencedPart_SolidusKeyword_1_3_0 extends KeywordToken  {
	
	public CapabilityReferencedPart_SolidusKeyword_1_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getSolidusKeyword_1_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_NameAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// range=VersionRange
protected class CapabilityReferencedPart_RangeAssignment_1_3_1 extends AssignmentToken  {
	
	public CapabilityReferencedPart_RangeAssignment_1_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getRangeAssignment_1_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VersionRange_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("range",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("range");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVersionRangeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCapabilityReferencedPartAccess().getRangeVersionRangeParserRuleCall_1_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CapabilityReferencedPart_SolidusKeyword_1_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule CapabilityReferencedPart ****************/


/************ begin Rule CompoundReferences ****************
 *
 * CompoundReferences:
 *   "{" prerequisites+=Prerequisite* "}";
 *
 **/

// "{" prerequisites+=Prerequisite* "}"
protected class CompoundReferences_Group extends GroupToken {
	
	public CompoundReferences_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCompoundReferencesAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundReferences_RightCurlyBracketKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCompoundReferencesRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "{"
protected class CompoundReferences_LeftCurlyBracketKeyword_0 extends KeywordToken  {
	
	public CompoundReferences_LeftCurlyBracketKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundReferencesAccess().getLeftCurlyBracketKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// prerequisites+=Prerequisite*
protected class CompoundReferences_PrerequisitesAssignment_1 extends AssignmentToken  {
	
	public CompoundReferences_PrerequisitesAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundReferencesAccess().getPrerequisitesAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("prerequisites",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("prerequisites");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrerequisiteRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompoundReferencesAccess().getPrerequisitesPrerequisiteParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompoundReferences_PrerequisitesAssignment_1(parent, next, actIndex, consumed);
			case 1: return new CompoundReferences_LeftCurlyBracketKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class CompoundReferences_RightCurlyBracketKeyword_2 extends KeywordToken  {
	
	public CompoundReferences_RightCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundReferencesAccess().getRightCurlyBracketKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundReferences_PrerequisitesAssignment_1(parent, this, 0, inst);
			case 1: return new CompoundReferences_LeftCurlyBracketKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule CompoundReferences ****************/


/************ begin Rule BuildMethod ****************
 *
 * BuildMethod:
 *   visibility=Visibility? executionMode=ExecutionMode? name=PartName ("provides"
 *   providedCapabilities+=ProvidedCapability ("," providedCapabilities+=
 *   ProvidedCapability)*)? preCondition=PreCondition? postCondition=PostCondition? "{" (
 *   "properties" properties=CompoundPropertyOperation)? advice=Advice? group=Group?
 *   layout=Layout? statements=Statements? "}";
 *
 **/

// visibility=Visibility? executionMode=ExecutionMode? name=PartName ("provides"
// providedCapabilities+=ProvidedCapability ("," providedCapabilities+=
// ProvidedCapability)*)? preCondition=PreCondition? postCondition=PostCondition? "{" (
// "properties" properties=CompoundPropertyOperation)? advice=Advice? group=Group?
// layout=Layout? statements=Statements? "}"
protected class BuildMethod_Group extends GroupToken {
	
	public BuildMethod_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBuildMethodAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BuildMethod_RightCurlyBracketKeyword_12(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBuildMethodRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// visibility=Visibility?
protected class BuildMethod_VisibilityAssignment_0 extends AssignmentToken  {
	
	public BuildMethod_VisibilityAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBuildMethodAccess().getVisibilityAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("visibility",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("visibility");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getBuildMethodAccess().getVisibilityVisibilityEnumRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// executionMode=ExecutionMode?
protected class BuildMethod_ExecutionModeAssignment_1 extends AssignmentToken  {
	
	public BuildMethod_ExecutionModeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBuildMethodAccess().getExecutionModeAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BuildMethod_VisibilityAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("executionMode",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("executionMode");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getBuildMethodAccess().getExecutionModeExecutionModeEnumRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// name=PartName
protected class BuildMethod_NameAssignment_2 extends AssignmentToken  {
	
	public BuildMethod_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBuildMethodAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BuildMethod_ExecutionModeAssignment_1(parent, this, 0, inst);
			case 1: return new BuildMethod_VisibilityAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getBuildMethodAccess().getNamePartNameParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ("provides" providedCapabilities+=ProvidedCapability ("," providedCapabilities+=
// ProvidedCapability)*)?
protected class BuildMethod_Group_3 extends GroupToken {
	
	public BuildMethod_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBuildMethodAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BuildMethod_Group_3_2(parent, this, 0, inst);
			case 1: return new BuildMethod_ProvidedCapabilitiesAssignment_3_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "provides"
protected class BuildMethod_ProvidesKeyword_3_0 extends KeywordToken  {
	
	public BuildMethod_ProvidesKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBuildMethodAccess().getProvidesKeyword_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BuildMethod_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// providedCapabilities+=ProvidedCapability
protected class BuildMethod_ProvidedCapabilitiesAssignment_3_1 extends AssignmentToken  {
	
	public BuildMethod_ProvidedCapabilitiesAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBuildMethodAccess().getProvidedCapabilitiesAssignment_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("providedCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("providedCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProvidedCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuildMethodAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BuildMethod_ProvidesKeyword_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," providedCapabilities+=ProvidedCapability)*
protected class BuildMethod_Group_3_2 extends GroupToken {
	
	public BuildMethod_Group_3_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBuildMethodAccess().getGroup_3_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BuildMethod_ProvidedCapabilitiesAssignment_3_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class BuildMethod_CommaKeyword_3_2_0 extends KeywordToken  {
	
	public BuildMethod_CommaKeyword_3_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBuildMethodAccess().getCommaKeyword_3_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BuildMethod_Group_3_2(parent, this, 0, inst);
			case 1: return new BuildMethod_ProvidedCapabilitiesAssignment_3_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// providedCapabilities+=ProvidedCapability
protected class BuildMethod_ProvidedCapabilitiesAssignment_3_2_1 extends AssignmentToken  {
	
	public BuildMethod_ProvidedCapabilitiesAssignment_3_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBuildMethodAccess().getProvidedCapabilitiesAssignment_3_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("providedCapabilities",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("providedCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProvidedCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuildMethodAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_3_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BuildMethod_CommaKeyword_3_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// preCondition=PreCondition?
protected class BuildMethod_PreConditionAssignment_4 extends AssignmentToken  {
	
	public BuildMethod_PreConditionAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBuildMethodAccess().getPreConditionAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PreCondition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("preCondition",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("preCondition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPreConditionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuildMethodAccess().getPreConditionPreConditionParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BuildMethod_Group_3(parent, next, actIndex, consumed);
			case 1: return new BuildMethod_NameAssignment_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// postCondition=PostCondition?
protected class BuildMethod_PostConditionAssignment_5 extends AssignmentToken  {
	
	public BuildMethod_PostConditionAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBuildMethodAccess().getPostConditionAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostCondition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("postCondition",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("postCondition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPostConditionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuildMethodAccess().getPostConditionPostConditionParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BuildMethod_PreConditionAssignment_4(parent, next, actIndex, consumed);
			case 1: return new BuildMethod_Group_3(parent, next, actIndex, consumed);
			case 2: return new BuildMethod_NameAssignment_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class BuildMethod_LeftCurlyBracketKeyword_6 extends KeywordToken  {
	
	public BuildMethod_LeftCurlyBracketKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBuildMethodAccess().getLeftCurlyBracketKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BuildMethod_PostConditionAssignment_5(parent, this, 0, inst);
			case 1: return new BuildMethod_PreConditionAssignment_4(parent, this, 1, inst);
			case 2: return new BuildMethod_Group_3(parent, this, 2, inst);
			case 3: return new BuildMethod_NameAssignment_2(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}

// ("properties" properties=CompoundPropertyOperation)?
protected class BuildMethod_Group_7 extends GroupToken {
	
	public BuildMethod_Group_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBuildMethodAccess().getGroup_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BuildMethod_PropertiesAssignment_7_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "properties"
protected class BuildMethod_PropertiesKeyword_7_0 extends KeywordToken  {
	
	public BuildMethod_PropertiesKeyword_7_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBuildMethodAccess().getPropertiesKeyword_7_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BuildMethod_LeftCurlyBracketKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// properties=CompoundPropertyOperation
protected class BuildMethod_PropertiesAssignment_7_1 extends AssignmentToken  {
	
	public BuildMethod_PropertiesAssignment_7_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBuildMethodAccess().getPropertiesAssignment_7_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundPropertyOperation_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("properties",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("properties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompoundPropertyOperationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuildMethodAccess().getPropertiesCompoundPropertyOperationParserRuleCall_7_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BuildMethod_PropertiesKeyword_7_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// advice=Advice?
protected class BuildMethod_AdviceAssignment_8 extends AssignmentToken  {
	
	public BuildMethod_AdviceAssignment_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBuildMethodAccess().getAdviceAssignment_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Advice_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("advice",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("advice");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAdviceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuildMethodAccess().getAdviceAdviceParserRuleCall_8_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BuildMethod_Group_7(parent, next, actIndex, consumed);
			case 1: return new BuildMethod_LeftCurlyBracketKeyword_6(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// group=Group?
protected class BuildMethod_GroupAssignment_9 extends AssignmentToken  {
	
	public BuildMethod_GroupAssignment_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBuildMethodAccess().getGroupAssignment_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("group",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("group");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGroupRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuildMethodAccess().getGroupGroupParserRuleCall_9_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BuildMethod_AdviceAssignment_8(parent, next, actIndex, consumed);
			case 1: return new BuildMethod_Group_7(parent, next, actIndex, consumed);
			case 2: return new BuildMethod_LeftCurlyBracketKeyword_6(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// layout=Layout?
protected class BuildMethod_LayoutAssignment_10 extends AssignmentToken  {
	
	public BuildMethod_LayoutAssignment_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBuildMethodAccess().getLayoutAssignment_10();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Layout_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("layout",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("layout");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLayoutRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuildMethodAccess().getLayoutLayoutParserRuleCall_10_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BuildMethod_GroupAssignment_9(parent, next, actIndex, consumed);
			case 1: return new BuildMethod_AdviceAssignment_8(parent, next, actIndex, consumed);
			case 2: return new BuildMethod_Group_7(parent, next, actIndex, consumed);
			case 3: return new BuildMethod_LeftCurlyBracketKeyword_6(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// statements=Statements?
protected class BuildMethod_StatementsAssignment_11 extends AssignmentToken  {
	
	public BuildMethod_StatementsAssignment_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBuildMethodAccess().getStatementsAssignment_11();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statements_StatementsAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementsRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuildMethodAccess().getStatementsStatementsParserRuleCall_11_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BuildMethod_LayoutAssignment_10(parent, next, actIndex, consumed);
			case 1: return new BuildMethod_GroupAssignment_9(parent, next, actIndex, consumed);
			case 2: return new BuildMethod_AdviceAssignment_8(parent, next, actIndex, consumed);
			case 3: return new BuildMethod_Group_7(parent, next, actIndex, consumed);
			case 4: return new BuildMethod_LeftCurlyBracketKeyword_6(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class BuildMethod_RightCurlyBracketKeyword_12 extends KeywordToken  {
	
	public BuildMethod_RightCurlyBracketKeyword_12(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBuildMethodAccess().getRightCurlyBracketKeyword_12();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BuildMethod_StatementsAssignment_11(parent, this, 0, inst);
			case 1: return new BuildMethod_LayoutAssignment_10(parent, this, 1, inst);
			case 2: return new BuildMethod_GroupAssignment_9(parent, this, 2, inst);
			case 3: return new BuildMethod_AdviceAssignment_8(parent, this, 3, inst);
			case 4: return new BuildMethod_Group_7(parent, this, 4, inst);
			case 5: return new BuildMethod_LeftCurlyBracketKeyword_6(parent, this, 5, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule BuildMethod ****************/


/************ begin Rule Parameter ****************
 *
 * Parameter:
 *   val=Expression;
 *
 **/

// val=Expression
protected class Parameter_ValAssignment extends AssignmentToken  {
	
	public Parameter_ValAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterAccess().getValAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getParameterRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getParameterAccess().getValExpressionParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule Parameter ****************/




/************ begin Rule Layout ****************
 *
 * Layout:
 *   LayoutKeyword postCondition=PostCondition? "{" body=PathGroup? "}";   // used to be 'layout'
 *
 **/

// LayoutKeyword postCondition=PostCondition? "{" body=PathGroup? "}"
protected class Layout_Group extends GroupToken {
	
	public Layout_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLayoutAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Layout_RightCurlyBracketKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLayoutRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// LayoutKeyword
protected class Layout_LayoutKeywordParserRuleCall_0 extends UnassignedTextToken {

	public Layout_LayoutKeywordParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getLayoutAccess().getLayoutKeywordParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// postCondition=PostCondition?
protected class Layout_PostConditionAssignment_1 extends AssignmentToken  {
	
	public Layout_PostConditionAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLayoutAccess().getPostConditionAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostCondition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("postCondition",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("postCondition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPostConditionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLayoutAccess().getPostConditionPostConditionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Layout_LayoutKeywordParserRuleCall_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class Layout_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public Layout_LeftCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLayoutAccess().getLeftCurlyBracketKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Layout_PostConditionAssignment_1(parent, this, 0, inst);
			case 1: return new Layout_LayoutKeywordParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// body=PathGroup?
protected class Layout_BodyAssignment_3 extends AssignmentToken  {
	
	public Layout_BodyAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLayoutAccess().getBodyAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("body",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPathGroupRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLayoutAccess().getBodyPathGroupParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Layout_LeftCurlyBracketKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Layout_RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public Layout_RightCurlyBracketKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLayoutAccess().getRightCurlyBracketKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Layout_BodyAssignment_3(parent, this, 0, inst);
			case 1: return new Layout_LeftCurlyBracketKeyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Layout ****************/


/************ begin Rule Group ****************
 *
 * Group:
 *   GroupKeyword preCondition=PreCondition? postCondition=PostCondition? "{"
 *   prerequisites+=Prerequisite* "}";
 *
 **/

// GroupKeyword preCondition=PreCondition? postCondition=PostCondition? "{"
// prerequisites+=Prerequisite* "}"
protected class Group_Group extends GroupToken {
	
	public Group_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getGroupAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_RightCurlyBracketKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getGroupRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// GroupKeyword
protected class Group_GroupKeywordParserRuleCall_0 extends UnassignedTextToken {

	public Group_GroupKeywordParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getGroupAccess().getGroupKeywordParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// preCondition=PreCondition?
protected class Group_PreConditionAssignment_1 extends AssignmentToken  {
	
	public Group_PreConditionAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupAccess().getPreConditionAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PreCondition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("preCondition",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("preCondition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPreConditionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getGroupAccess().getPreConditionPreConditionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Group_GroupKeywordParserRuleCall_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// postCondition=PostCondition?
protected class Group_PostConditionAssignment_2 extends AssignmentToken  {
	
	public Group_PostConditionAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupAccess().getPostConditionAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostCondition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("postCondition",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("postCondition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPostConditionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getGroupAccess().getPostConditionPostConditionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Group_PreConditionAssignment_1(parent, next, actIndex, consumed);
			case 1: return new Group_GroupKeywordParserRuleCall_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class Group_LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public Group_LeftCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupAccess().getLeftCurlyBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_PostConditionAssignment_2(parent, this, 0, inst);
			case 1: return new Group_PreConditionAssignment_1(parent, this, 1, inst);
			case 2: return new Group_GroupKeywordParserRuleCall_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// prerequisites+=Prerequisite*
protected class Group_PrerequisitesAssignment_4 extends AssignmentToken  {
	
	public Group_PrerequisitesAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupAccess().getPrerequisitesAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("prerequisites",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("prerequisites");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrerequisiteRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getGroupAccess().getPrerequisitesPrerequisiteParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Group_PrerequisitesAssignment_4(parent, next, actIndex, consumed);
			case 1: return new Group_LeftCurlyBracketKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Group_RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public Group_RightCurlyBracketKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupAccess().getRightCurlyBracketKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_PrerequisitesAssignment_4(parent, this, 0, inst);
			case 1: return new Group_LeftCurlyBracketKeyword_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Group ****************/


/************ begin Rule RepositoryConfiguration ****************
 *
 * RepositoryConfiguration:
 *   (location=URI|"resolver" resolverClass=QualifiedName) advice=CompoundAdvice? ";"; 
 * 
 * 
 * 	              
 * 	
 * 
 * / *
 * ** URI TODO: Would like to have better parsing of URL - don't know if possible to push this to lexer
 * ** as we may want to support namespaces (using 'ns:' prefix) (for importing b3 files, common advice, rules etc.).
 * ** The ':' clashes with 'scheme:' which is the only known BuildMethod in an opaque URI. 
 * * /
 *
 **/

// (location=URI|"resolver" resolverClass=QualifiedName) advice=CompoundAdvice? ";"
protected class RepositoryConfiguration_Group extends GroupToken {
	
	public RepositoryConfiguration_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRepositoryConfigurationAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryConfiguration_SemicolonKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRepositoryConfigurationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// location=URI|"resolver" resolverClass=QualifiedName
protected class RepositoryConfiguration_Alternatives_0 extends AlternativesToken {

	public RepositoryConfiguration_Alternatives_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getRepositoryConfigurationAccess().getAlternatives_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryConfiguration_LocationAssignment_0_0(parent, this, 0, inst);
			case 1: return new RepositoryConfiguration_Group_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// location=URI
protected class RepositoryConfiguration_LocationAssignment_0_0 extends AssignmentToken  {
	
	public RepositoryConfiguration_LocationAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRepositoryConfigurationAccess().getLocationAssignment_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("location",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("location");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getRepositoryConfigurationAccess().getLocationURIParserRuleCall_0_0_0();
			return obj;
		}
		return null;
	}

}

// "resolver" resolverClass=QualifiedName
protected class RepositoryConfiguration_Group_0_1 extends GroupToken {
	
	public RepositoryConfiguration_Group_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRepositoryConfigurationAccess().getGroup_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryConfiguration_ResolverClassAssignment_0_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "resolver"
protected class RepositoryConfiguration_ResolverKeyword_0_1_0 extends KeywordToken  {
	
	public RepositoryConfiguration_ResolverKeyword_0_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRepositoryConfigurationAccess().getResolverKeyword_0_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// resolverClass=QualifiedName
protected class RepositoryConfiguration_ResolverClassAssignment_0_1_1 extends AssignmentToken  {
	
	public RepositoryConfiguration_ResolverClassAssignment_0_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRepositoryConfigurationAccess().getResolverClassAssignment_0_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryConfiguration_ResolverKeyword_0_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("resolverClass",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("resolverClass");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getRepositoryConfigurationAccess().getResolverClassQualifiedNameParserRuleCall_0_1_1_0();
			return obj;
		}
		return null;
	}

}



// advice=CompoundAdvice?
protected class RepositoryConfiguration_AdviceAssignment_1 extends AssignmentToken  {
	
	public RepositoryConfiguration_AdviceAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRepositoryConfigurationAccess().getAdviceAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundAdvice_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("advice",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("advice");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompoundAdviceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRepositoryConfigurationAccess().getAdviceCompoundAdviceParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RepositoryConfiguration_Alternatives_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class RepositoryConfiguration_SemicolonKeyword_2 extends KeywordToken  {
	
	public RepositoryConfiguration_SemicolonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRepositoryConfigurationAccess().getSemicolonKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryConfiguration_AdviceAssignment_1(parent, this, 0, inst);
			case 1: return new RepositoryConfiguration_Alternatives_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule RepositoryConfiguration ****************/



/************ begin Rule NamedAdvice ****************
 *
 * NamedAdvice:
 *   name=ID? advice=CompoundAdvice; 
 * 
 * / * ADVICE
 * ** TODO: Had to use '?' instead if '*', and '??' intead of '**' as these operators are intermixed with / which sometimes
 * ** makes them look like comments. (Forbidding // comments is not the wanted sollution). 
 * **
 * * /
 *
 **/

// name=ID? advice=CompoundAdvice
protected class NamedAdvice_Group extends GroupToken {
	
	public NamedAdvice_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getNamedAdviceAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NamedAdvice_AdviceAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getNamedAdviceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=ID?
protected class NamedAdvice_NameAssignment_0 extends AssignmentToken  {
	
	public NamedAdvice_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNamedAdviceAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getNamedAdviceAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// advice=CompoundAdvice
protected class NamedAdvice_AdviceAssignment_1 extends AssignmentToken  {
	
	public NamedAdvice_AdviceAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNamedAdviceAccess().getAdviceAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundAdvice_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("advice",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("advice");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompoundAdviceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getNamedAdviceAccess().getAdviceCompoundAdviceParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NamedAdvice_NameAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}


/************ end Rule NamedAdvice ****************/


/************ begin Rule Advice ****************
 *
 * Advice:
 *   "advice" CompoundAdvice;
 *
 **/

// "advice" CompoundAdvice
protected class Advice_Group extends GroupToken {
	
	public Advice_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAdviceAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Advice_CompoundAdviceParserRuleCall_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAdviceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "advice"
protected class Advice_AdviceKeyword_0 extends KeywordToken  {
	
	public Advice_AdviceKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAdviceAccess().getAdviceKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// CompoundAdvice
protected class Advice_CompoundAdviceParserRuleCall_1 extends RuleCallToken {
	
	public Advice_CompoundAdviceParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAdviceAccess().getCompoundAdviceParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundAdvice_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CompoundAdvice_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCompoundAdviceRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Advice_AdviceKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}


/************ end Rule Advice ****************/


/************ begin Rule CompoundAdvice ****************
 *
 * CompoundAdvice:
 *   "{" (advice+=AdviceStatement ";")* "}";
 *
 **/

// "{" (advice+=AdviceStatement ";")* "}"
protected class CompoundAdvice_Group extends GroupToken {
	
	public CompoundAdvice_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCompoundAdviceAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundAdvice_RightCurlyBracketKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCompoundAdviceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "{"
protected class CompoundAdvice_LeftCurlyBracketKeyword_0 extends KeywordToken  {
	
	public CompoundAdvice_LeftCurlyBracketKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundAdviceAccess().getLeftCurlyBracketKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// (advice+=AdviceStatement ";")*
protected class CompoundAdvice_Group_1 extends GroupToken {
	
	public CompoundAdvice_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCompoundAdviceAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundAdvice_SemicolonKeyword_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// advice+=AdviceStatement
protected class CompoundAdvice_AdviceAssignment_1_0 extends AssignmentToken  {
	
	public CompoundAdvice_AdviceAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundAdviceAccess().getAdviceAssignment_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdviceStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("advice",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("advice");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAdviceStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompoundAdviceAccess().getAdviceAdviceStatementParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompoundAdvice_Group_1(parent, next, actIndex, consumed);
			case 1: return new CompoundAdvice_LeftCurlyBracketKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class CompoundAdvice_SemicolonKeyword_1_1 extends KeywordToken  {
	
	public CompoundAdvice_SemicolonKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundAdviceAccess().getSemicolonKeyword_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundAdvice_AdviceAssignment_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "}"
protected class CompoundAdvice_RightCurlyBracketKeyword_2 extends KeywordToken  {
	
	public CompoundAdvice_RightCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundAdviceAccess().getRightCurlyBracketKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundAdvice_Group_1(parent, this, 0, inst);
			case 1: return new CompoundAdvice_LeftCurlyBracketKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule CompoundAdvice ****************/


/************ begin Rule AdviceStatement ****************
 *
 * AdviceStatement:
 *   path=AdvicePath (op=AssignmentOperator value=Expression|advice=CompoundAdvice); 
 * 
 *                    
 * 
 * // a | ** | [foo==bar] | .. | a 
 * // a:**:[foo==bar]:..:a
 *
 **/

// path=AdvicePath (op=AssignmentOperator value=Expression|advice=CompoundAdvice)
protected class AdviceStatement_Group extends GroupToken {
	
	public AdviceStatement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAdviceStatementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdviceStatement_Alternatives_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAdviceStatementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// path=AdvicePath
protected class AdviceStatement_PathAssignment_0 extends AssignmentToken  {
	
	public AdviceStatement_PathAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdviceStatementAccess().getPathAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePath_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("path",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("path");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAdvicePathRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAdviceStatementAccess().getPathAdvicePathParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// op=AssignmentOperator value=Expression|advice=CompoundAdvice
protected class AdviceStatement_Alternatives_1 extends AlternativesToken {

	public AdviceStatement_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getAdviceStatementAccess().getAlternatives_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdviceStatement_Group_1_0(parent, this, 0, inst);
			case 1: return new AdviceStatement_AdviceAssignment_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// op=AssignmentOperator value=Expression
protected class AdviceStatement_Group_1_0 extends GroupToken {
	
	public AdviceStatement_Group_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAdviceStatementAccess().getGroup_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdviceStatement_ValueAssignment_1_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// op=AssignmentOperator
protected class AdviceStatement_OpAssignment_1_0_0 extends AssignmentToken  {
	
	public AdviceStatement_OpAssignment_1_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdviceStatementAccess().getOpAssignment_1_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdviceStatement_PathAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("op",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("op");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getAdviceStatementAccess().getOpAssignmentOperatorEnumRuleCall_1_0_0_0();
			return obj;
		}
		return null;
	}

}

// value=Expression
protected class AdviceStatement_ValueAssignment_1_0_1 extends AssignmentToken  {
	
	public AdviceStatement_ValueAssignment_1_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdviceStatementAccess().getValueAssignment_1_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAdviceStatementAccess().getValueExpressionParserRuleCall_1_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AdviceStatement_OpAssignment_1_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// advice=CompoundAdvice
protected class AdviceStatement_AdviceAssignment_1_1 extends AssignmentToken  {
	
	public AdviceStatement_AdviceAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdviceStatementAccess().getAdviceAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundAdvice_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("advice",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("advice");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompoundAdviceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAdviceStatementAccess().getAdviceCompoundAdviceParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AdviceStatement_PathAssignment_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AdviceStatement ****************/


/************ begin Rule AdvicePath ****************
 *
 * AdvicePath:
 *   absolute?=":"? selectors+=Selector (":" selectors+=Selector)*; 
 * 
 * // a | ** | [foo==bar] | .. | a 
 * // a:**:[foo==bar]:..:a
 *
 **/

// absolute?=":"? selectors+=Selector (":" selectors+=Selector)*
protected class AdvicePath_Group extends GroupToken {
	
	public AdvicePath_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAdvicePathAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePath_Group_2(parent, this, 0, inst);
			case 1: return new AdvicePath_SelectorsAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAdvicePathRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// absolute?=":"?
protected class AdvicePath_AbsoluteAssignment_0 extends AssignmentToken  {
	
	public AdvicePath_AbsoluteAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdvicePathAccess().getAbsoluteAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("absolute",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("absolute");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAdvicePathAccess().getAbsoluteColonKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// selectors+=Selector
protected class AdvicePath_SelectorsAssignment_1 extends AssignmentToken  {
	
	public AdvicePath_SelectorsAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdvicePathAccess().getSelectorsAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Selector_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("selectors",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("selectors");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSelectorRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAdvicePathAccess().getSelectorsSelectorParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AdvicePath_AbsoluteAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// (":" selectors+=Selector)*
protected class AdvicePath_Group_2 extends GroupToken {
	
	public AdvicePath_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAdvicePathAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePath_SelectorsAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ":"
protected class AdvicePath_ColonKeyword_2_0 extends KeywordToken  {
	
	public AdvicePath_ColonKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAdvicePathAccess().getColonKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePath_Group_2(parent, this, 0, inst);
			case 1: return new AdvicePath_SelectorsAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// selectors+=Selector
protected class AdvicePath_SelectorsAssignment_2_1 extends AssignmentToken  {
	
	public AdvicePath_SelectorsAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdvicePathAccess().getSelectorsAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Selector_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("selectors",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("selectors");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSelectorRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAdvicePathAccess().getSelectorsSelectorParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AdvicePath_ColonKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AdvicePath ****************/


/************ begin Rule Selector ****************
 *
 * Selector:
 *   DiscriminatingSelector|MultiNodeSelector|NodeSelector;
 *
 **/

// DiscriminatingSelector|MultiNodeSelector|NodeSelector
protected class Selector_Alternatives extends AlternativesToken {

	public Selector_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getSelectorAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Selector_DiscriminatingSelectorParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Selector_MultiNodeSelectorParserRuleCall_1(parent, this, 1, inst);
			case 2: return new Selector_NodeSelectorParserRuleCall_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSelectorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// DiscriminatingSelector
protected class Selector_DiscriminatingSelectorParserRuleCall_0 extends RuleCallToken {
	
	public Selector_DiscriminatingSelectorParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getSelectorAccess().getDiscriminatingSelectorParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DiscriminatingSelector_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DiscriminatingSelector_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDiscriminatingSelectorRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// MultiNodeSelector
protected class Selector_MultiNodeSelectorParserRuleCall_1 extends RuleCallToken {
	
	public Selector_MultiNodeSelectorParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getSelectorAccess().getMultiNodeSelectorParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MultiNodeSelector_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(MultiNodeSelector_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getMultiNodeSelectorRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// NodeSelector
protected class Selector_NodeSelectorParserRuleCall_2 extends RuleCallToken {
	
	public Selector_NodeSelectorParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getSelectorAccess().getNodeSelectorParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NodeSelector_ParentSelectorParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(NodeSelector_ParentSelectorParserRuleCall.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getNodeSelectorRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Selector ****************/


/************ begin Rule MultiNodeSelector ****************
 *
 * MultiNodeSelector returns Selector:
 *   NameSelector|ThisSelector|ChildrenSelector|AncestorSelector|RegexpSelector;
 *
 **/

// NameSelector|ThisSelector|ChildrenSelector|AncestorSelector|RegexpSelector
protected class MultiNodeSelector_Alternatives extends AlternativesToken {

	public MultiNodeSelector_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getMultiNodeSelectorAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MultiNodeSelector_NameSelectorParserRuleCall_0(parent, this, 0, inst);
			case 1: return new MultiNodeSelector_ThisSelectorParserRuleCall_1(parent, this, 1, inst);
			case 2: return new MultiNodeSelector_ChildrenSelectorParserRuleCall_2(parent, this, 2, inst);
			case 3: return new MultiNodeSelector_AncestorSelectorParserRuleCall_3(parent, this, 3, inst);
			case 4: return new MultiNodeSelector_RegexpSelectorParserRuleCall_4(parent, this, 4, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getMultiNodeSelectorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// NameSelector
protected class MultiNodeSelector_NameSelectorParserRuleCall_0 extends RuleCallToken {
	
	public MultiNodeSelector_NameSelectorParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getMultiNodeSelectorAccess().getNameSelectorParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NameSelector_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(NameSelector_NameAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getNameSelectorRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ThisSelector
protected class MultiNodeSelector_ThisSelectorParserRuleCall_1 extends RuleCallToken {
	
	public MultiNodeSelector_ThisSelectorParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getMultiNodeSelectorAccess().getThisSelectorParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThisSelector_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ThisSelector_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getThisSelectorRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ChildrenSelector
protected class MultiNodeSelector_ChildrenSelectorParserRuleCall_2 extends RuleCallToken {
	
	public MultiNodeSelector_ChildrenSelectorParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getMultiNodeSelectorAccess().getChildrenSelectorParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ChildrenSelector_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ChildrenSelector_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getChildrenSelectorRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// AncestorSelector
protected class MultiNodeSelector_AncestorSelectorParserRuleCall_3 extends RuleCallToken {
	
	public MultiNodeSelector_AncestorSelectorParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getMultiNodeSelectorAccess().getAncestorSelectorParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AncestorSelector_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AncestorSelector_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAncestorSelectorRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// RegexpSelector
protected class MultiNodeSelector_RegexpSelectorParserRuleCall_4 extends RuleCallToken {
	
	public MultiNodeSelector_RegexpSelectorParserRuleCall_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getMultiNodeSelectorAccess().getRegexpSelectorParserRuleCall_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RegexpSelector_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RegexpSelector_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRegexpSelectorRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule MultiNodeSelector ****************/


/************ begin Rule DiscriminatingSelector ****************
 *
 * DiscriminatingSelector returns Selector:
 *   selector=MultiNodeSelector "[" predicate=Expression "]";
 *
 **/

// selector=MultiNodeSelector "[" predicate=Expression "]"
protected class DiscriminatingSelector_Group extends GroupToken {
	
	public DiscriminatingSelector_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDiscriminatingSelectorAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DiscriminatingSelector_RightSquareBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDiscriminatingSelectorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// selector=MultiNodeSelector
protected class DiscriminatingSelector_SelectorAssignment_0 extends AssignmentToken  {
	
	public DiscriminatingSelector_SelectorAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDiscriminatingSelectorAccess().getSelectorAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MultiNodeSelector_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("selector",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("selector");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMultiNodeSelectorRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDiscriminatingSelectorAccess().getSelectorMultiNodeSelectorParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// "["
protected class DiscriminatingSelector_LeftSquareBracketKeyword_1 extends KeywordToken  {
	
	public DiscriminatingSelector_LeftSquareBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDiscriminatingSelectorAccess().getLeftSquareBracketKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DiscriminatingSelector_SelectorAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// predicate=Expression
protected class DiscriminatingSelector_PredicateAssignment_2 extends AssignmentToken  {
	
	public DiscriminatingSelector_PredicateAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDiscriminatingSelectorAccess().getPredicateAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("predicate",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("predicate");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDiscriminatingSelectorAccess().getPredicateExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DiscriminatingSelector_LeftSquareBracketKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class DiscriminatingSelector_RightSquareBracketKeyword_3 extends KeywordToken  {
	
	public DiscriminatingSelector_RightSquareBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDiscriminatingSelectorAccess().getRightSquareBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DiscriminatingSelector_PredicateAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule DiscriminatingSelector ****************/


/************ begin Rule NodeSelector ****************
 *
 * NodeSelector returns Selector:
 *   ParentSelector;
 *
 **/

// ParentSelector
protected class NodeSelector_ParentSelectorParserRuleCall extends RuleCallToken {
	
	public NodeSelector_ParentSelectorParserRuleCall(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getNodeSelectorAccess().getParentSelectorParserRuleCall();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParentSelector_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getNodeSelectorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ParentSelector_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getParentSelectorRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule NodeSelector ****************/


/************ begin Rule NameSelector ****************
 *
 * NameSelector:
 *   name=QualifiedName;
 *
 **/

// name=QualifiedName
protected class NameSelector_NameAssignment extends AssignmentToken  {
	
	public NameSelector_NameAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNameSelectorAccess().getNameAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getNameSelectorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getNameSelectorAccess().getNameQualifiedNameParserRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule NameSelector ****************/


/************ begin Rule ThisSelector ****************
 *
 * ThisSelector:
 *   {ThisSelector} ".";
 *
 **/

// {ThisSelector} "."
protected class ThisSelector_Group extends GroupToken {
	
	public ThisSelector_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getThisSelectorAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThisSelector_FullStopKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getThisSelectorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {ThisSelector}
protected class ThisSelector_ThisSelectorAction_0 extends ActionToken  {

	public ThisSelector_ThisSelectorAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getThisSelectorAccess().getThisSelectorAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getThisSelectorAccess().getThisSelectorAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "."
protected class ThisSelector_FullStopKeyword_1 extends KeywordToken  {
	
	public ThisSelector_FullStopKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getThisSelectorAccess().getFullStopKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThisSelector_ThisSelectorAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ThisSelector ****************/


/************ begin Rule ParentSelector ****************
 *
 * ParentSelector:
 *   {ParentSelector} "..";
 *
 **/

// {ParentSelector} ".."
protected class ParentSelector_Group extends GroupToken {
	
	public ParentSelector_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getParentSelectorAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParentSelector_FullStopFullStopKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getParentSelectorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {ParentSelector}
protected class ParentSelector_ParentSelectorAction_0 extends ActionToken  {

	public ParentSelector_ParentSelectorAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getParentSelectorAccess().getParentSelectorAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getParentSelectorAccess().getParentSelectorAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// ".."
protected class ParentSelector_FullStopFullStopKeyword_1 extends KeywordToken  {
	
	public ParentSelector_FullStopFullStopKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getParentSelectorAccess().getFullStopFullStopKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParentSelector_ParentSelectorAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ParentSelector ****************/


/************ begin Rule ChildrenSelector ****************
 *
 * ChildrenSelector:
 *   {ChildrenSelector} "*";
 *
 **/

// {ChildrenSelector} "*"
protected class ChildrenSelector_Group extends GroupToken {
	
	public ChildrenSelector_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getChildrenSelectorAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ChildrenSelector_AsteriskKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getChildrenSelectorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {ChildrenSelector}
protected class ChildrenSelector_ChildrenSelectorAction_0 extends ActionToken  {

	public ChildrenSelector_ChildrenSelectorAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getChildrenSelectorAccess().getChildrenSelectorAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getChildrenSelectorAccess().getChildrenSelectorAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "*"
protected class ChildrenSelector_AsteriskKeyword_1 extends KeywordToken  {
	
	public ChildrenSelector_AsteriskKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getChildrenSelectorAccess().getAsteriskKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ChildrenSelector_ChildrenSelectorAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ChildrenSelector ****************/


/************ begin Rule AncestorSelector ****************
 *
 * AncestorSelector:
 *   {AncestorSelector} "**";
 *
 **/

// {AncestorSelector} "**"
protected class AncestorSelector_Group extends GroupToken {
	
	public AncestorSelector_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAncestorSelectorAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AncestorSelector_AsteriskAsteriskKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAncestorSelectorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {AncestorSelector}
protected class AncestorSelector_AncestorSelectorAction_0 extends ActionToken  {

	public AncestorSelector_AncestorSelectorAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getAncestorSelectorAccess().getAncestorSelectorAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getAncestorSelectorAccess().getAncestorSelectorAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "**"
protected class AncestorSelector_AsteriskAsteriskKeyword_1 extends KeywordToken  {
	
	public AncestorSelector_AsteriskAsteriskKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAncestorSelectorAccess().getAsteriskAsteriskKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AncestorSelector_AncestorSelectorAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule AncestorSelector ****************/


/************ begin Rule RegexpSelector ****************
 *
 * RegexpSelector:
 *   {RegexpSelector} pattern=REGEX;
 *
 **/

// {RegexpSelector} pattern=REGEX
protected class RegexpSelector_Group extends GroupToken {
	
	public RegexpSelector_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRegexpSelectorAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RegexpSelector_PatternAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRegexpSelectorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {RegexpSelector}
protected class RegexpSelector_RegexpSelectorAction_0 extends ActionToken  {

	public RegexpSelector_RegexpSelectorAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getRegexpSelectorAccess().getRegexpSelectorAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getRegexpSelectorAccess().getRegexpSelectorAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// pattern=REGEX
protected class RegexpSelector_PatternAssignment_1 extends AssignmentToken  {
	
	public RegexpSelector_PatternAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRegexpSelectorAccess().getPatternAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RegexpSelector_RegexpSelectorAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("pattern",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("pattern");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getRegexpSelectorAccess().getPatternREGEXTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule RegexpSelector ****************/



/************ begin Rule Filter ****************
 *
 * Filter:
 *   "(" predicate=Expression ")"; 
 * 
 *               
 * 
 * / * ASSERTS * /
 *
 **/

// "(" predicate=Expression ")"
protected class Filter_Group extends GroupToken {
	
	public Filter_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFilterAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Filter_RightParenthesisKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFilterRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "("
protected class Filter_LeftParenthesisKeyword_0 extends KeywordToken  {
	
	public Filter_LeftParenthesisKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFilterAccess().getLeftParenthesisKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// predicate=Expression
protected class Filter_PredicateAssignment_1 extends AssignmentToken  {
	
	public Filter_PredicateAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFilterAccess().getPredicateAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("predicate",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("predicate");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFilterAccess().getPredicateExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Filter_LeftParenthesisKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class Filter_RightParenthesisKeyword_2 extends KeywordToken  {
	
	public Filter_RightParenthesisKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFilterAccess().getRightParenthesisKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Filter_PredicateAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Filter ****************/


/************ begin Rule PreCondition ****************
 *
 * PreCondition:
 *   "precondition" "{" asserts+=AssertionExpression* "}"; 
 * 
 * / * ASSERTS * /
 *
 **/

// "precondition" "{" asserts+=AssertionExpression* "}"
protected class PreCondition_Group extends GroupToken {
	
	public PreCondition_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPreConditionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PreCondition_RightCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPreConditionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "precondition"
protected class PreCondition_PreconditionKeyword_0 extends KeywordToken  {
	
	public PreCondition_PreconditionKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPreConditionAccess().getPreconditionKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "{"
protected class PreCondition_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public PreCondition_LeftCurlyBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPreConditionAccess().getLeftCurlyBracketKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PreCondition_PreconditionKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// asserts+=AssertionExpression*
protected class PreCondition_AssertsAssignment_2 extends AssignmentToken  {
	
	public PreCondition_AssertsAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPreConditionAccess().getAssertsAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssertionExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("asserts",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("asserts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssertionExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPreConditionAccess().getAssertsAssertionExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PreCondition_AssertsAssignment_2(parent, next, actIndex, consumed);
			case 1: return new PreCondition_LeftCurlyBracketKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class PreCondition_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public PreCondition_RightCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPreConditionAccess().getRightCurlyBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PreCondition_AssertsAssignment_2(parent, this, 0, inst);
			case 1: return new PreCondition_LeftCurlyBracketKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule PreCondition ****************/


/************ begin Rule PostCondition ****************
 *
 * PostCondition:
 *   "postcondition" "{" asserts+=AssertionExpression* "}";
 *
 **/

// "postcondition" "{" asserts+=AssertionExpression* "}"
protected class PostCondition_Group extends GroupToken {
	
	public PostCondition_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPostConditionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostCondition_RightCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPostConditionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "postcondition"
protected class PostCondition_PostconditionKeyword_0 extends KeywordToken  {
	
	public PostCondition_PostconditionKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPostConditionAccess().getPostconditionKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "{"
protected class PostCondition_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public PostCondition_LeftCurlyBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPostConditionAccess().getLeftCurlyBracketKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostCondition_PostconditionKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// asserts+=AssertionExpression*
protected class PostCondition_AssertsAssignment_2 extends AssignmentToken  {
	
	public PostCondition_AssertsAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPostConditionAccess().getAssertsAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssertionExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("asserts",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("asserts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssertionExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPostConditionAccess().getAssertsAssertionExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PostCondition_AssertsAssignment_2(parent, next, actIndex, consumed);
			case 1: return new PostCondition_LeftCurlyBracketKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class PostCondition_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public PostCondition_RightCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPostConditionAccess().getRightCurlyBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostCondition_AssertsAssignment_2(parent, this, 0, inst);
			case 1: return new PostCondition_LeftCurlyBracketKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule PostCondition ****************/


/************ begin Rule AssertionExpression ****************
 *
 * AssertionExpression:
 *   "assert" expr=Expression ("," message=STRING)? ";"; 
 * 
 *              
 * 
 * 
 * / * STATEMENTS * /
 *
 **/

// "assert" expr=Expression ("," message=STRING)? ";"
protected class AssertionExpression_Group extends GroupToken {
	
	public AssertionExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAssertionExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssertionExpression_SemicolonKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAssertionExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "assert"
protected class AssertionExpression_AssertKeyword_0 extends KeywordToken  {
	
	public AssertionExpression_AssertKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAssertionExpressionAccess().getAssertKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// expr=Expression
protected class AssertionExpression_ExprAssignment_1 extends AssignmentToken  {
	
	public AssertionExpression_ExprAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssertionExpressionAccess().getExprAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAssertionExpressionAccess().getExprExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AssertionExpression_AssertKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," message=STRING)?
protected class AssertionExpression_Group_2 extends GroupToken {
	
	public AssertionExpression_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAssertionExpressionAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssertionExpression_MessageAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class AssertionExpression_CommaKeyword_2_0 extends KeywordToken  {
	
	public AssertionExpression_CommaKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAssertionExpressionAccess().getCommaKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssertionExpression_ExprAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// message=STRING
protected class AssertionExpression_MessageAssignment_2_1 extends AssignmentToken  {
	
	public AssertionExpression_MessageAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssertionExpressionAccess().getMessageAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssertionExpression_CommaKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("message",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("message");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAssertionExpressionAccess().getMessageSTRINGTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}


// ";"
protected class AssertionExpression_SemicolonKeyword_3 extends KeywordToken  {
	
	public AssertionExpression_SemicolonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAssertionExpressionAccess().getSemicolonKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssertionExpression_Group_2(parent, this, 0, inst);
			case 1: return new AssertionExpression_ExprAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule AssertionExpression ****************/


/************ begin Rule Statement ****************
 *
 * Statement:
 *   IfStatement|SwitchStatement|WhileStatement|ForStatement|DoWhileStatement|
 *   CompoundStatement|VarExpression? ";"|BreakStatement|ContinueStatement|
 *   ReturnStatement|FunctionStatement|LabelStatement|ThrowStatement|
 *   TryCatchStatement|WithStatement; 
 * 
 * / * STATEMENTS * /
 *
 **/

// IfStatement|SwitchStatement|WhileStatement|ForStatement|DoWhileStatement|
// CompoundStatement|VarExpression? ";"|BreakStatement|ContinueStatement|
// ReturnStatement|FunctionStatement|LabelStatement|ThrowStatement|
// TryCatchStatement|WithStatement 
// 
// / * STATEMENTS * /
protected class Statement_Alternatives extends AlternativesToken {

	public Statement_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getStatementAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_IfStatementParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Statement_SwitchStatementParserRuleCall_1(parent, this, 1, inst);
			case 2: return new Statement_WhileStatementParserRuleCall_2(parent, this, 2, inst);
			case 3: return new Statement_ForStatementParserRuleCall_3(parent, this, 3, inst);
			case 4: return new Statement_DoWhileStatementParserRuleCall_4(parent, this, 4, inst);
			case 5: return new Statement_CompoundStatementParserRuleCall_5(parent, this, 5, inst);
			case 6: return new Statement_Group_6(parent, this, 6, inst);
			case 7: return new Statement_BreakStatementParserRuleCall_7(parent, this, 7, inst);
			case 8: return new Statement_ContinueStatementParserRuleCall_8(parent, this, 8, inst);
			case 9: return new Statement_ReturnStatementParserRuleCall_9(parent, this, 9, inst);
			case 10: return new Statement_FunctionStatementParserRuleCall_10(parent, this, 10, inst);
			case 11: return new Statement_LabelStatementParserRuleCall_11(parent, this, 11, inst);
			case 12: return new Statement_ThrowStatementParserRuleCall_12(parent, this, 12, inst);
			case 13: return new Statement_TryCatchStatementParserRuleCall_13(parent, this, 13, inst);
			case 14: return new Statement_WithStatementParserRuleCall_14(parent, this, 14, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// IfStatement
protected class Statement_IfStatementParserRuleCall_0 extends RuleCallToken {
	
	public Statement_IfStatementParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getIfStatementParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(IfStatement_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getIfStatementRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// SwitchStatement
protected class Statement_SwitchStatementParserRuleCall_1 extends RuleCallToken {
	
	public Statement_SwitchStatementParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getSwitchStatementParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SwitchStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(SwitchStatement_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSwitchStatementRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// WhileStatement
protected class Statement_WhileStatementParserRuleCall_2 extends RuleCallToken {
	
	public Statement_WhileStatementParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WhileStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(WhileStatement_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getWhileStatementRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ForStatement
protected class Statement_ForStatementParserRuleCall_3 extends RuleCallToken {
	
	public Statement_ForStatementParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getForStatementParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ForStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ForStatement_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getForStatementRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// DoWhileStatement
protected class Statement_DoWhileStatementParserRuleCall_4 extends RuleCallToken {
	
	public Statement_DoWhileStatementParserRuleCall_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getDoWhileStatementParserRuleCall_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DoWhileStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DoWhileStatement_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDoWhileStatementRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// CompoundStatement
protected class Statement_CompoundStatementParserRuleCall_5 extends RuleCallToken {
	
	public Statement_CompoundStatementParserRuleCall_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getCompoundStatementParserRuleCall_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CompoundStatement_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCompoundStatementRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// VarExpression? ";"
protected class Statement_Group_6 extends GroupToken {
	
	public Statement_Group_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStatementAccess().getGroup_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_SemicolonKeyword_6_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// VarExpression?
protected class Statement_VarExpressionParserRuleCall_6_0 extends RuleCallToken {
	
	public Statement_VarExpressionParserRuleCall_6_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getVarExpressionParserRuleCall_6_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(VarExpression_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getVarExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class Statement_SemicolonKeyword_6_1 extends KeywordToken  {
	
	public Statement_SemicolonKeyword_6_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStatementAccess().getSemicolonKeyword_6_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_VarExpressionParserRuleCall_6_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}


// BreakStatement
protected class Statement_BreakStatementParserRuleCall_7 extends RuleCallToken {
	
	public Statement_BreakStatementParserRuleCall_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getBreakStatementParserRuleCall_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BreakStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(BreakStatement_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBreakStatementRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ContinueStatement
protected class Statement_ContinueStatementParserRuleCall_8 extends RuleCallToken {
	
	public Statement_ContinueStatementParserRuleCall_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getContinueStatementParserRuleCall_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContinueStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ContinueStatement_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getContinueStatementRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ReturnStatement
protected class Statement_ReturnStatementParserRuleCall_9 extends RuleCallToken {
	
	public Statement_ReturnStatementParserRuleCall_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ReturnStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ReturnStatement_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getReturnStatementRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// FunctionStatement
protected class Statement_FunctionStatementParserRuleCall_10 extends RuleCallToken {
	
	public Statement_FunctionStatementParserRuleCall_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getFunctionStatementParserRuleCall_10();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(FunctionStatement_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getFunctionStatementRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// LabelStatement
protected class Statement_LabelStatementParserRuleCall_11 extends RuleCallToken {
	
	public Statement_LabelStatementParserRuleCall_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getLabelStatementParserRuleCall_11();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LabelStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(LabelStatement_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLabelStatementRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ThrowStatement
protected class Statement_ThrowStatementParserRuleCall_12 extends RuleCallToken {
	
	public Statement_ThrowStatementParserRuleCall_12(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getThrowStatementParserRuleCall_12();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThrowStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ThrowStatement_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getThrowStatementRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// TryCatchStatement
protected class Statement_TryCatchStatementParserRuleCall_13 extends RuleCallToken {
	
	public Statement_TryCatchStatementParserRuleCall_13(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getTryCatchStatementParserRuleCall_13();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TryCatchStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(TryCatchStatement_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getTryCatchStatementRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// WithStatement
protected class Statement_WithStatementParserRuleCall_14 extends RuleCallToken {
	
	public Statement_WithStatementParserRuleCall_14(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getWithStatementParserRuleCall_14();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(WithStatement_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getWithStatementRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Statement ****************/


/************ begin Rule BreakStatement ****************
 *
 * BreakStatement:
 *   {BreakStatement} "break" label=ID? ";";
 *
 **/

// {BreakStatement} "break" label=ID? ";"
protected class BreakStatement_Group extends GroupToken {
	
	public BreakStatement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBreakStatementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BreakStatement_SemicolonKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBreakStatementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {BreakStatement}
protected class BreakStatement_BreakStatementAction_0 extends ActionToken  {

	public BreakStatement_BreakStatementAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getBreakStatementAccess().getBreakStatementAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getBreakStatementAccess().getBreakStatementAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "break"
protected class BreakStatement_BreakKeyword_1 extends KeywordToken  {
	
	public BreakStatement_BreakKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBreakStatementAccess().getBreakKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BreakStatement_BreakStatementAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// label=ID?
protected class BreakStatement_LabelAssignment_2 extends AssignmentToken  {
	
	public BreakStatement_LabelAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBreakStatementAccess().getLabelAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BreakStatement_BreakKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("label",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("label");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getBreakStatementAccess().getLabelIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class BreakStatement_SemicolonKeyword_3 extends KeywordToken  {
	
	public BreakStatement_SemicolonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBreakStatementAccess().getSemicolonKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BreakStatement_LabelAssignment_2(parent, this, 0, inst);
			case 1: return new BreakStatement_BreakKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule BreakStatement ****************/


/************ begin Rule ContinueStatement ****************
 *
 * ContinueStatement:
 *   {ContinueStatement} "continue" label=ID? ";";
 *
 **/

// {ContinueStatement} "continue" label=ID? ";"
protected class ContinueStatement_Group extends GroupToken {
	
	public ContinueStatement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getContinueStatementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContinueStatement_SemicolonKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getContinueStatementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {ContinueStatement}
protected class ContinueStatement_ContinueStatementAction_0 extends ActionToken  {

	public ContinueStatement_ContinueStatementAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getContinueStatementAccess().getContinueStatementAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getContinueStatementAccess().getContinueStatementAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "continue"
protected class ContinueStatement_ContinueKeyword_1 extends KeywordToken  {
	
	public ContinueStatement_ContinueKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContinueStatementAccess().getContinueKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContinueStatement_ContinueStatementAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// label=ID?
protected class ContinueStatement_LabelAssignment_2 extends AssignmentToken  {
	
	public ContinueStatement_LabelAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getContinueStatementAccess().getLabelAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContinueStatement_ContinueKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("label",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("label");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getContinueStatementAccess().getLabelIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class ContinueStatement_SemicolonKeyword_3 extends KeywordToken  {
	
	public ContinueStatement_SemicolonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContinueStatementAccess().getSemicolonKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContinueStatement_LabelAssignment_2(parent, this, 0, inst);
			case 1: return new ContinueStatement_ContinueKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ContinueStatement ****************/


/************ begin Rule CompoundStatement ****************
 *
 * CompoundStatement:
 *   "{" statements=Statements "}";
 *
 **/

// "{" statements=Statements "}"
protected class CompoundStatement_Group extends GroupToken {
	
	public CompoundStatement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCompoundStatementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundStatement_RightCurlyBracketKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCompoundStatementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "{"
protected class CompoundStatement_LeftCurlyBracketKeyword_0 extends KeywordToken  {
	
	public CompoundStatement_LeftCurlyBracketKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundStatementAccess().getLeftCurlyBracketKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// statements=Statements
protected class CompoundStatement_StatementsAssignment_1 extends AssignmentToken  {
	
	public CompoundStatement_StatementsAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundStatementAccess().getStatementsAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statements_StatementsAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementsRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompoundStatementAccess().getStatementsStatementsParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompoundStatement_LeftCurlyBracketKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class CompoundStatement_RightCurlyBracketKeyword_2 extends KeywordToken  {
	
	public CompoundStatement_RightCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundStatementAccess().getRightCurlyBracketKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundStatement_StatementsAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule CompoundStatement ****************/


/************ begin Rule Statements ****************
 *
 * Statements:
 *   statements+=Statement+;
 *
 **/

// statements+=Statement+
protected class Statements_StatementsAssignment extends AssignmentToken  {
	
	public Statements_StatementsAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStatementsAccess().getStatementsAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getStatementsRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getStatementsAccess().getStatementsStatementParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Statements_StatementsAssignment(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

/************ end Rule Statements ****************/


/************ begin Rule WhileStatement ****************
 *
 * WhileStatement:
 *   "while" "(" condition=Expression ")" body=Statement;
 *
 **/

// "while" "(" condition=Expression ")" body=Statement
protected class WhileStatement_Group extends GroupToken {
	
	public WhileStatement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getWhileStatementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WhileStatement_BodyAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getWhileStatementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "while"
protected class WhileStatement_WhileKeyword_0 extends KeywordToken  {
	
	public WhileStatement_WhileKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWhileStatementAccess().getWhileKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "("
protected class WhileStatement_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public WhileStatement_LeftParenthesisKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WhileStatement_WhileKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// condition=Expression
protected class WhileStatement_ConditionAssignment_2 extends AssignmentToken  {
	
	public WhileStatement_ConditionAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getWhileStatementAccess().getConditionAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("condition",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("condition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWhileStatementAccess().getConditionExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WhileStatement_LeftParenthesisKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class WhileStatement_RightParenthesisKeyword_3 extends KeywordToken  {
	
	public WhileStatement_RightParenthesisKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WhileStatement_ConditionAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// body=Statement
protected class WhileStatement_BodyAssignment_4 extends AssignmentToken  {
	
	public WhileStatement_BodyAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getWhileStatementAccess().getBodyAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("body",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWhileStatementAccess().getBodyStatementParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WhileStatement_RightParenthesisKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule WhileStatement ****************/


/************ begin Rule SwitchStatement ****************
 *
 * SwitchStatement:
 *   "switch" "(" switchExpr=VarExpression ")" "{" case+=Case* ("default" ":" statements=
 *   Statements?)? "}";
 *
 **/

// "switch" "(" switchExpr=VarExpression ")" "{" case+=Case* ("default" ":" statements=
// Statements?)? "}"
protected class SwitchStatement_Group extends GroupToken {
	
	public SwitchStatement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSwitchStatementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SwitchStatement_RightCurlyBracketKeyword_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSwitchStatementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "switch"
protected class SwitchStatement_SwitchKeyword_0 extends KeywordToken  {
	
	public SwitchStatement_SwitchKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "("
protected class SwitchStatement_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public SwitchStatement_LeftParenthesisKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SwitchStatement_SwitchKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// switchExpr=VarExpression
protected class SwitchStatement_SwitchExprAssignment_2 extends AssignmentToken  {
	
	public SwitchStatement_SwitchExprAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSwitchStatementAccess().getSwitchExprAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("switchExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("switchExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVarExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSwitchStatementAccess().getSwitchExprVarExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SwitchStatement_LeftParenthesisKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class SwitchStatement_RightParenthesisKeyword_3 extends KeywordToken  {
	
	public SwitchStatement_RightParenthesisKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SwitchStatement_SwitchExprAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class SwitchStatement_LeftCurlyBracketKeyword_4 extends KeywordToken  {
	
	public SwitchStatement_LeftCurlyBracketKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SwitchStatement_RightParenthesisKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// case+=Case*
protected class SwitchStatement_CaseAssignment_5 extends AssignmentToken  {
	
	public SwitchStatement_CaseAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSwitchStatementAccess().getCaseAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Case_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("case",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("case");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCaseRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSwitchStatementAccess().getCaseCaseParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SwitchStatement_CaseAssignment_5(parent, next, actIndex, consumed);
			case 1: return new SwitchStatement_LeftCurlyBracketKeyword_4(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("default" ":" statements=Statements?)?
protected class SwitchStatement_Group_6 extends GroupToken {
	
	public SwitchStatement_Group_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSwitchStatementAccess().getGroup_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SwitchStatement_StatementsAssignment_6_2(parent, this, 0, inst);
			case 1: return new SwitchStatement_ColonKeyword_6_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "default"
protected class SwitchStatement_DefaultKeyword_6_0 extends KeywordToken  {
	
	public SwitchStatement_DefaultKeyword_6_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSwitchStatementAccess().getDefaultKeyword_6_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SwitchStatement_CaseAssignment_5(parent, this, 0, inst);
			case 1: return new SwitchStatement_LeftCurlyBracketKeyword_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ":"
protected class SwitchStatement_ColonKeyword_6_1 extends KeywordToken  {
	
	public SwitchStatement_ColonKeyword_6_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSwitchStatementAccess().getColonKeyword_6_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SwitchStatement_DefaultKeyword_6_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// statements=Statements?
protected class SwitchStatement_StatementsAssignment_6_2 extends AssignmentToken  {
	
	public SwitchStatement_StatementsAssignment_6_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSwitchStatementAccess().getStatementsAssignment_6_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statements_StatementsAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementsRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSwitchStatementAccess().getStatementsStatementsParserRuleCall_6_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SwitchStatement_ColonKeyword_6_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class SwitchStatement_RightCurlyBracketKeyword_7 extends KeywordToken  {
	
	public SwitchStatement_RightCurlyBracketKeyword_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SwitchStatement_Group_6(parent, this, 0, inst);
			case 1: return new SwitchStatement_CaseAssignment_5(parent, this, 1, inst);
			case 2: return new SwitchStatement_LeftCurlyBracketKeyword_4(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule SwitchStatement ****************/


/************ begin Rule Case ****************
 *
 * Case:
 *   "case" condition=ValueLiteral ":" statements=Statements?; 
 * 		
 *         
 * 
 * // TODO: needs validation that expression list only has one entry and is a LHS value
 * // if inLoop == true. Needs validation that RHS is a collection item if inLoop == true.
 * //
 *
 **/

// "case" condition=ValueLiteral ":" statements=Statements?
protected class Case_Group extends GroupToken {
	
	public Case_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCaseAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Case_StatementsAssignment_3(parent, this, 0, inst);
			case 1: return new Case_ColonKeyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCaseRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "case"
protected class Case_CaseKeyword_0 extends KeywordToken  {
	
	public Case_CaseKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCaseAccess().getCaseKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// condition=ValueLiteral
protected class Case_ConditionAssignment_1 extends AssignmentToken  {
	
	public Case_ConditionAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCaseAccess().getConditionAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ValueLiteral_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("condition",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("condition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getValueLiteralRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCaseAccess().getConditionValueLiteralParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Case_CaseKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ":"
protected class Case_ColonKeyword_2 extends KeywordToken  {
	
	public Case_ColonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCaseAccess().getColonKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Case_ConditionAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// statements=Statements?
protected class Case_StatementsAssignment_3 extends AssignmentToken  {
	
	public Case_StatementsAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCaseAccess().getStatementsAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statements_StatementsAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementsRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCaseAccess().getStatementsStatementsParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Case_ColonKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Case ****************/


/************ begin Rule ForStatement ****************
 *
 * ForStatement:
 *   {ForStatement} "for" "(" init=VarExpressionList? (regular?=";" cond=Expression? ";"
 *   iterate=ExpressionList?|"in" iterate=Expression) ")" body=Statement; 
 * 
 * // TODO: needs validation that expression list only has one entry and is a LHS value
 * // if inLoop == true. Needs validation that RHS is a collection item if inLoop == true.
 * //
 *
 **/

// {ForStatement} "for" "(" init=VarExpressionList? (regular?=";" cond=Expression? ";"
// iterate=ExpressionList?|"in" iterate=Expression) ")" body=Statement
protected class ForStatement_Group extends GroupToken {
	
	public ForStatement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getForStatementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ForStatement_BodyAssignment_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getForStatementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {ForStatement}
protected class ForStatement_ForStatementAction_0 extends ActionToken  {

	public ForStatement_ForStatementAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getForStatementAccess().getForStatementAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getForStatementAccess().getForStatementAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "for"
protected class ForStatement_ForKeyword_1 extends KeywordToken  {
	
	public ForStatement_ForKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getForStatementAccess().getForKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ForStatement_ForStatementAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class ForStatement_LeftParenthesisKeyword_2 extends KeywordToken  {
	
	public ForStatement_LeftParenthesisKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ForStatement_ForKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// init=VarExpressionList?
protected class ForStatement_InitAssignment_3 extends AssignmentToken  {
	
	public ForStatement_InitAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getForStatementAccess().getInitAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarExpressionList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("init",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("init");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVarExpressionListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getForStatementAccess().getInitVarExpressionListParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ForStatement_LeftParenthesisKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// regular?=";" cond=Expression? ";" iterate=ExpressionList?|"in" iterate=Expression
protected class ForStatement_Alternatives_4 extends AlternativesToken {

	public ForStatement_Alternatives_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getForStatementAccess().getAlternatives_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ForStatement_Group_4_0(parent, this, 0, inst);
			case 1: return new ForStatement_Group_4_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// regular?=";" cond=Expression? ";" iterate=ExpressionList?
protected class ForStatement_Group_4_0 extends GroupToken {
	
	public ForStatement_Group_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getForStatementAccess().getGroup_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ForStatement_IterateAssignment_4_0_3(parent, this, 0, inst);
			case 1: return new ForStatement_SemicolonKeyword_4_0_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// regular?=";"
protected class ForStatement_RegularAssignment_4_0_0 extends AssignmentToken  {
	
	public ForStatement_RegularAssignment_4_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getForStatementAccess().getRegularAssignment_4_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ForStatement_InitAssignment_3(parent, this, 0, inst);
			case 1: return new ForStatement_LeftParenthesisKeyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("regular",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("regular");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getForStatementAccess().getRegularSemicolonKeyword_4_0_0_0();
			return obj;
		}
		return null;
	}

}

// cond=Expression?
protected class ForStatement_CondAssignment_4_0_1 extends AssignmentToken  {
	
	public ForStatement_CondAssignment_4_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getForStatementAccess().getCondAssignment_4_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("cond",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("cond");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getForStatementAccess().getCondExpressionParserRuleCall_4_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ForStatement_RegularAssignment_4_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class ForStatement_SemicolonKeyword_4_0_2 extends KeywordToken  {
	
	public ForStatement_SemicolonKeyword_4_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getForStatementAccess().getSemicolonKeyword_4_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ForStatement_CondAssignment_4_0_1(parent, this, 0, inst);
			case 1: return new ForStatement_RegularAssignment_4_0_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// iterate=ExpressionList?
protected class ForStatement_IterateAssignment_4_0_3 extends AssignmentToken  {
	
	public ForStatement_IterateAssignment_4_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getForStatementAccess().getIterateAssignment_4_0_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExpressionList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("iterate",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("iterate");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getForStatementAccess().getIterateExpressionListParserRuleCall_4_0_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ForStatement_SemicolonKeyword_4_0_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "in" iterate=Expression
protected class ForStatement_Group_4_1 extends GroupToken {
	
	public ForStatement_Group_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getForStatementAccess().getGroup_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ForStatement_IterateAssignment_4_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "in"
protected class ForStatement_InKeyword_4_1_0 extends KeywordToken  {
	
	public ForStatement_InKeyword_4_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getForStatementAccess().getInKeyword_4_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ForStatement_InitAssignment_3(parent, this, 0, inst);
			case 1: return new ForStatement_LeftParenthesisKeyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// iterate=Expression
protected class ForStatement_IterateAssignment_4_1_1 extends AssignmentToken  {
	
	public ForStatement_IterateAssignment_4_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getForStatementAccess().getIterateAssignment_4_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("iterate",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("iterate");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getForStatementAccess().getIterateExpressionParserRuleCall_4_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ForStatement_InKeyword_4_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class ForStatement_RightParenthesisKeyword_5 extends KeywordToken  {
	
	public ForStatement_RightParenthesisKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getForStatementAccess().getRightParenthesisKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ForStatement_Alternatives_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// body=Statement
protected class ForStatement_BodyAssignment_6 extends AssignmentToken  {
	
	public ForStatement_BodyAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getForStatementAccess().getBodyAssignment_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("body",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getForStatementAccess().getBodyStatementParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ForStatement_RightParenthesisKeyword_5(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ForStatement ****************/


/************ begin Rule DoWhileStatement ****************
 *
 * DoWhileStatement:
 *   "do" statement=Statement "while" "(" condition=Expression ")" ";";
 *
 **/

// "do" statement=Statement "while" "(" condition=Expression ")" ";"
protected class DoWhileStatement_Group extends GroupToken {
	
	public DoWhileStatement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDoWhileStatementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DoWhileStatement_SemicolonKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDoWhileStatementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "do"
protected class DoWhileStatement_DoKeyword_0 extends KeywordToken  {
	
	public DoWhileStatement_DoKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDoWhileStatementAccess().getDoKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// statement=Statement
protected class DoWhileStatement_StatementAssignment_1 extends AssignmentToken  {
	
	public DoWhileStatement_StatementAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDoWhileStatementAccess().getStatementAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statement",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDoWhileStatementAccess().getStatementStatementParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DoWhileStatement_DoKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "while"
protected class DoWhileStatement_WhileKeyword_2 extends KeywordToken  {
	
	public DoWhileStatement_WhileKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDoWhileStatementAccess().getWhileKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DoWhileStatement_StatementAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class DoWhileStatement_LeftParenthesisKeyword_3 extends KeywordToken  {
	
	public DoWhileStatement_LeftParenthesisKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDoWhileStatementAccess().getLeftParenthesisKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DoWhileStatement_WhileKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// condition=Expression
protected class DoWhileStatement_ConditionAssignment_4 extends AssignmentToken  {
	
	public DoWhileStatement_ConditionAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDoWhileStatementAccess().getConditionAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("condition",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("condition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDoWhileStatementAccess().getConditionExpressionParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DoWhileStatement_LeftParenthesisKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class DoWhileStatement_RightParenthesisKeyword_5 extends KeywordToken  {
	
	public DoWhileStatement_RightParenthesisKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDoWhileStatementAccess().getRightParenthesisKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DoWhileStatement_ConditionAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ";"
protected class DoWhileStatement_SemicolonKeyword_6 extends KeywordToken  {
	
	public DoWhileStatement_SemicolonKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDoWhileStatementAccess().getSemicolonKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DoWhileStatement_RightParenthesisKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule DoWhileStatement ****************/


/************ begin Rule ReturnStatement ****************
 *
 * ReturnStatement:
 *   "return" return=Expression? ";";
 *
 **/

// "return" return=Expression? ";"
protected class ReturnStatement_Group extends GroupToken {
	
	public ReturnStatement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getReturnStatementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ReturnStatement_SemicolonKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getReturnStatementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "return"
protected class ReturnStatement_ReturnKeyword_0 extends KeywordToken  {
	
	public ReturnStatement_ReturnKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getReturnStatementAccess().getReturnKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// return=Expression?
protected class ReturnStatement_ReturnAssignment_1 extends AssignmentToken  {
	
	public ReturnStatement_ReturnAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getReturnStatementAccess().getReturnAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("return",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("return");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getReturnStatementAccess().getReturnExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ReturnStatement_ReturnKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class ReturnStatement_SemicolonKeyword_2 extends KeywordToken  {
	
	public ReturnStatement_SemicolonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getReturnStatementAccess().getSemicolonKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ReturnStatement_ReturnAssignment_1(parent, this, 0, inst);
			case 1: return new ReturnStatement_ReturnKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ReturnStatement ****************/


/************ begin Rule FunctionStatement ****************
 *
 * FunctionStatement:
 *   "function" name=ID "(" (params+=ID ("," params+=ID)*) ")" "{" statements=Statements "}";
 *
 **/

// "function" name=ID "(" (params+=ID ("," params+=ID)*) ")" "{" statements=Statements "}"
protected class FunctionStatement_Group extends GroupToken {
	
	public FunctionStatement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFunctionStatementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionStatement_RightCurlyBracketKeyword_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFunctionStatementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "function"
protected class FunctionStatement_FunctionKeyword_0 extends KeywordToken  {
	
	public FunctionStatement_FunctionKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionStatementAccess().getFunctionKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class FunctionStatement_NameAssignment_1 extends AssignmentToken  {
	
	public FunctionStatement_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionStatementAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionStatement_FunctionKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFunctionStatementAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "("
protected class FunctionStatement_LeftParenthesisKeyword_2 extends KeywordToken  {
	
	public FunctionStatement_LeftParenthesisKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionStatementAccess().getLeftParenthesisKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionStatement_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// params+=ID ("," params+=ID)*
protected class FunctionStatement_Group_3 extends GroupToken {
	
	public FunctionStatement_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFunctionStatementAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionStatement_Group_3_1(parent, this, 0, inst);
			case 1: return new FunctionStatement_ParamsAssignment_3_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// params+=ID
protected class FunctionStatement_ParamsAssignment_3_0 extends AssignmentToken  {
	
	public FunctionStatement_ParamsAssignment_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionStatementAccess().getParamsAssignment_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionStatement_LeftParenthesisKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFunctionStatementAccess().getParamsIDTerminalRuleCall_3_0_0();
			return obj;
		}
		return null;
	}

}

// ("," params+=ID)*
protected class FunctionStatement_Group_3_1 extends GroupToken {
	
	public FunctionStatement_Group_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFunctionStatementAccess().getGroup_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionStatement_ParamsAssignment_3_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class FunctionStatement_CommaKeyword_3_1_0 extends KeywordToken  {
	
	public FunctionStatement_CommaKeyword_3_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionStatementAccess().getCommaKeyword_3_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionStatement_Group_3_1(parent, this, 0, inst);
			case 1: return new FunctionStatement_ParamsAssignment_3_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// params+=ID
protected class FunctionStatement_ParamsAssignment_3_1_1 extends AssignmentToken  {
	
	public FunctionStatement_ParamsAssignment_3_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionStatementAccess().getParamsAssignment_3_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionStatement_CommaKeyword_3_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFunctionStatementAccess().getParamsIDTerminalRuleCall_3_1_1_0();
			return obj;
		}
		return null;
	}

}



// ")"
protected class FunctionStatement_RightParenthesisKeyword_4 extends KeywordToken  {
	
	public FunctionStatement_RightParenthesisKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionStatementAccess().getRightParenthesisKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionStatement_Group_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class FunctionStatement_LeftCurlyBracketKeyword_5 extends KeywordToken  {
	
	public FunctionStatement_LeftCurlyBracketKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionStatementAccess().getLeftCurlyBracketKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionStatement_RightParenthesisKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// statements=Statements
protected class FunctionStatement_StatementsAssignment_6 extends AssignmentToken  {
	
	public FunctionStatement_StatementsAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionStatementAccess().getStatementsAssignment_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statements_StatementsAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementsRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFunctionStatementAccess().getStatementsStatementsParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FunctionStatement_LeftCurlyBracketKeyword_5(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class FunctionStatement_RightCurlyBracketKeyword_7 extends KeywordToken  {
	
	public FunctionStatement_RightCurlyBracketKeyword_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionStatementAccess().getRightCurlyBracketKeyword_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionStatement_StatementsAssignment_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule FunctionStatement ****************/


/************ begin Rule IfStatement ****************
 *
 * IfStatement:
 *   "if" "(" cond=Expression ")" then=Statement ("else" else=Statement)?;
 *
 **/

// "if" "(" cond=Expression ")" then=Statement ("else" else=Statement)?
protected class IfStatement_Group extends GroupToken {
	
	public IfStatement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfStatement_Group_5(parent, this, 0, inst);
			case 1: return new IfStatement_ThenAssignment_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getIfStatementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "if"
protected class IfStatement_IfKeyword_0 extends KeywordToken  {
	
	public IfStatement_IfKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getIfKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "("
protected class IfStatement_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public IfStatement_LeftParenthesisKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfStatement_IfKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// cond=Expression
protected class IfStatement_CondAssignment_2 extends AssignmentToken  {
	
	public IfStatement_CondAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getCondAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("cond",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("cond");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getIfStatementAccess().getCondExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfStatement_LeftParenthesisKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class IfStatement_RightParenthesisKeyword_3 extends KeywordToken  {
	
	public IfStatement_RightParenthesisKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfStatement_CondAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// then=Statement
protected class IfStatement_ThenAssignment_4 extends AssignmentToken  {
	
	public IfStatement_ThenAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getThenAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("then",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("then");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getIfStatementAccess().getThenStatementParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfStatement_RightParenthesisKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("else" else=Statement)?
protected class IfStatement_Group_5 extends GroupToken {
	
	public IfStatement_Group_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getGroup_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfStatement_ElseAssignment_5_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "else"
protected class IfStatement_ElseKeyword_5_0 extends KeywordToken  {
	
	public IfStatement_ElseKeyword_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getElseKeyword_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfStatement_ThenAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// else=Statement
protected class IfStatement_ElseAssignment_5_1 extends AssignmentToken  {
	
	public IfStatement_ElseAssignment_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getElseAssignment_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("else",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("else");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getIfStatementAccess().getElseStatementParserRuleCall_5_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfStatement_ElseKeyword_5_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule IfStatement ****************/


/************ begin Rule LabelStatement ****************
 *
 * LabelStatement:
 *   name=ID ":" statement=Statement;
 *
 **/

// name=ID ":" statement=Statement
protected class LabelStatement_Group extends GroupToken {
	
	public LabelStatement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLabelStatementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LabelStatement_StatementAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLabelStatementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=ID
protected class LabelStatement_NameAssignment_0 extends AssignmentToken  {
	
	public LabelStatement_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLabelStatementAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getLabelStatementAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ":"
protected class LabelStatement_ColonKeyword_1 extends KeywordToken  {
	
	public LabelStatement_ColonKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLabelStatementAccess().getColonKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LabelStatement_NameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// statement=Statement
protected class LabelStatement_StatementAssignment_2 extends AssignmentToken  {
	
	public LabelStatement_StatementAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLabelStatementAccess().getStatementAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statement",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLabelStatementAccess().getStatementStatementParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LabelStatement_ColonKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule LabelStatement ****************/


/************ begin Rule ThrowStatement ****************
 *
 * ThrowStatement:
 *   "throw" expr=Expression ";";
 *
 **/

// "throw" expr=Expression ";"
protected class ThrowStatement_Group extends GroupToken {
	
	public ThrowStatement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getThrowStatementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThrowStatement_SemicolonKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getThrowStatementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "throw"
protected class ThrowStatement_ThrowKeyword_0 extends KeywordToken  {
	
	public ThrowStatement_ThrowKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getThrowStatementAccess().getThrowKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// expr=Expression
protected class ThrowStatement_ExprAssignment_1 extends AssignmentToken  {
	
	public ThrowStatement_ExprAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getThrowStatementAccess().getExprAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getThrowStatementAccess().getExprExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ThrowStatement_ThrowKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class ThrowStatement_SemicolonKeyword_2 extends KeywordToken  {
	
	public ThrowStatement_SemicolonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getThrowStatementAccess().getSemicolonKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThrowStatement_ExprAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ThrowStatement ****************/


/************ begin Rule TryCatchStatement ****************
 *
 * TryCatchStatement:
 *   "try" tryBlock=CompoundStatement (catchBlock=CatchBlock finallyBlock=FinallyBlock?|
 *   finally=FinallyBlock);
 *
 **/

// "try" tryBlock=CompoundStatement (catchBlock=CatchBlock finallyBlock=FinallyBlock?|
// finally=FinallyBlock)
protected class TryCatchStatement_Group extends GroupToken {
	
	public TryCatchStatement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTryCatchStatementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TryCatchStatement_Alternatives_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTryCatchStatementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "try"
protected class TryCatchStatement_TryKeyword_0 extends KeywordToken  {
	
	public TryCatchStatement_TryKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTryCatchStatementAccess().getTryKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// tryBlock=CompoundStatement
protected class TryCatchStatement_TryBlockAssignment_1 extends AssignmentToken  {
	
	public TryCatchStatement_TryBlockAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTryCatchStatementAccess().getTryBlockAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("tryBlock",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("tryBlock");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompoundStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTryCatchStatementAccess().getTryBlockCompoundStatementParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TryCatchStatement_TryKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// catchBlock=CatchBlock finallyBlock=FinallyBlock?|finally=FinallyBlock
protected class TryCatchStatement_Alternatives_2 extends AlternativesToken {

	public TryCatchStatement_Alternatives_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getTryCatchStatementAccess().getAlternatives_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TryCatchStatement_Group_2_0(parent, this, 0, inst);
			case 1: return new TryCatchStatement_FinallyAssignment_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// catchBlock=CatchBlock finallyBlock=FinallyBlock?
protected class TryCatchStatement_Group_2_0 extends GroupToken {
	
	public TryCatchStatement_Group_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTryCatchStatementAccess().getGroup_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TryCatchStatement_FinallyBlockAssignment_2_0_1(parent, this, 0, inst);
			case 1: return new TryCatchStatement_CatchBlockAssignment_2_0_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// catchBlock=CatchBlock
protected class TryCatchStatement_CatchBlockAssignment_2_0_0 extends AssignmentToken  {
	
	public TryCatchStatement_CatchBlockAssignment_2_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTryCatchStatementAccess().getCatchBlockAssignment_2_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CatchBlock_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("catchBlock",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("catchBlock");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCatchBlockRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTryCatchStatementAccess().getCatchBlockCatchBlockParserRuleCall_2_0_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TryCatchStatement_TryBlockAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// finallyBlock=FinallyBlock?
protected class TryCatchStatement_FinallyBlockAssignment_2_0_1 extends AssignmentToken  {
	
	public TryCatchStatement_FinallyBlockAssignment_2_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTryCatchStatementAccess().getFinallyBlockAssignment_2_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FinallyBlock_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("finallyBlock",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("finallyBlock");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFinallyBlockRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTryCatchStatementAccess().getFinallyBlockFinallyBlockParserRuleCall_2_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TryCatchStatement_CatchBlockAssignment_2_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// finally=FinallyBlock
protected class TryCatchStatement_FinallyAssignment_2_1 extends AssignmentToken  {
	
	public TryCatchStatement_FinallyAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTryCatchStatementAccess().getFinallyAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FinallyBlock_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("finally",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("finally");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFinallyBlockRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTryCatchStatementAccess().getFinallyFinallyBlockParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TryCatchStatement_TryBlockAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule TryCatchStatement ****************/


/************ begin Rule CatchBlock ****************
 *
 * CatchBlock:
 *   "catch" "(" variable=ID ")" catchBlock=CompoundStatement;
 *
 **/

// "catch" "(" variable=ID ")" catchBlock=CompoundStatement
protected class CatchBlock_Group extends GroupToken {
	
	public CatchBlock_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCatchBlockAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CatchBlock_CatchBlockAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCatchBlockRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "catch"
protected class CatchBlock_CatchKeyword_0 extends KeywordToken  {
	
	public CatchBlock_CatchKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCatchBlockAccess().getCatchKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "("
protected class CatchBlock_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public CatchBlock_LeftParenthesisKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCatchBlockAccess().getLeftParenthesisKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CatchBlock_CatchKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// variable=ID
protected class CatchBlock_VariableAssignment_2 extends AssignmentToken  {
	
	public CatchBlock_VariableAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCatchBlockAccess().getVariableAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CatchBlock_LeftParenthesisKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("variable",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("variable");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCatchBlockAccess().getVariableIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ")"
protected class CatchBlock_RightParenthesisKeyword_3 extends KeywordToken  {
	
	public CatchBlock_RightParenthesisKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCatchBlockAccess().getRightParenthesisKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CatchBlock_VariableAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// catchBlock=CompoundStatement
protected class CatchBlock_CatchBlockAssignment_4 extends AssignmentToken  {
	
	public CatchBlock_CatchBlockAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCatchBlockAccess().getCatchBlockAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("catchBlock",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("catchBlock");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompoundStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCatchBlockAccess().getCatchBlockCompoundStatementParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CatchBlock_RightParenthesisKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule CatchBlock ****************/


/************ begin Rule FinallyBlock ****************
 *
 * FinallyBlock:
 *   "finally" finallyBlock=CompoundStatement;
 *
 **/

// "finally" finallyBlock=CompoundStatement
protected class FinallyBlock_Group extends GroupToken {
	
	public FinallyBlock_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFinallyBlockAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FinallyBlock_FinallyBlockAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFinallyBlockRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "finally"
protected class FinallyBlock_FinallyKeyword_0 extends KeywordToken  {
	
	public FinallyBlock_FinallyKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFinallyBlockAccess().getFinallyKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// finallyBlock=CompoundStatement
protected class FinallyBlock_FinallyBlockAssignment_1 extends AssignmentToken  {
	
	public FinallyBlock_FinallyBlockAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFinallyBlockAccess().getFinallyBlockAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("finallyBlock",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("finallyBlock");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompoundStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFinallyBlockAccess().getFinallyBlockCompoundStatementParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FinallyBlock_FinallyKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule FinallyBlock ****************/


/************ begin Rule WithStatement ****************
 *
 * WithStatement:
 *   "with" "(" expr=Expression ")" statement=Statement; 
 * 		
 *                 
 * 		
 * / * EXPRESSIONS * /
 *
 **/

// "with" "(" expr=Expression ")" statement=Statement
protected class WithStatement_Group extends GroupToken {
	
	public WithStatement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getWithStatementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithStatement_StatementAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getWithStatementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "with"
protected class WithStatement_WithKeyword_0 extends KeywordToken  {
	
	public WithStatement_WithKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWithStatementAccess().getWithKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "("
protected class WithStatement_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public WithStatement_LeftParenthesisKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWithStatementAccess().getLeftParenthesisKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithStatement_WithKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// expr=Expression
protected class WithStatement_ExprAssignment_2 extends AssignmentToken  {
	
	public WithStatement_ExprAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getWithStatementAccess().getExprAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWithStatementAccess().getExprExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WithStatement_LeftParenthesisKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class WithStatement_RightParenthesisKeyword_3 extends KeywordToken  {
	
	public WithStatement_RightParenthesisKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWithStatementAccess().getRightParenthesisKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithStatement_ExprAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// statement=Statement
protected class WithStatement_StatementAssignment_4 extends AssignmentToken  {
	
	public WithStatement_StatementAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getWithStatementAccess().getStatementAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statement",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWithStatementAccess().getStatementStatementParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WithStatement_RightParenthesisKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule WithStatement ****************/


/************ begin Rule VarExpressionList ****************
 *
 * VarExpressionList:
 *   expr+=VarExpression ("," expr+=VarExpression)*;
 *
 **/

// expr+=VarExpression ("," expr+=VarExpression)*
protected class VarExpressionList_Group extends GroupToken {
	
	public VarExpressionList_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getVarExpressionListAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarExpressionList_Group_1(parent, this, 0, inst);
			case 1: return new VarExpressionList_ExprAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getVarExpressionListRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// expr+=VarExpression
protected class VarExpressionList_ExprAssignment_0 extends AssignmentToken  {
	
	public VarExpressionList_ExprAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVarExpressionListAccess().getExprAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVarExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getVarExpressionListAccess().getExprVarExpressionParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// ("," expr+=VarExpression)*
protected class VarExpressionList_Group_1 extends GroupToken {
	
	public VarExpressionList_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getVarExpressionListAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarExpressionList_ExprAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class VarExpressionList_CommaKeyword_1_0 extends KeywordToken  {
	
	public VarExpressionList_CommaKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getVarExpressionListAccess().getCommaKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarExpressionList_Group_1(parent, this, 0, inst);
			case 1: return new VarExpressionList_ExprAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// expr+=VarExpression
protected class VarExpressionList_ExprAssignment_1_1 extends AssignmentToken  {
	
	public VarExpressionList_ExprAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVarExpressionListAccess().getExprAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVarExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getVarExpressionListAccess().getExprVarExpressionParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new VarExpressionList_CommaKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule VarExpressionList ****************/


/************ begin Rule ExpressionList ****************
 *
 * ExpressionList:
 *   expr+=Expression ("," expr+=Expression)*; 
 *                   
 * 
 * // Assignment is optional i JS
 * // Also makes it possible to use VarExpression in a for(var a in xxx) loop
 * //
 *
 **/

// expr+=Expression ("," expr+=Expression)*
protected class ExpressionList_Group extends GroupToken {
	
	public ExpressionList_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getExpressionListAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExpressionList_Group_1(parent, this, 0, inst);
			case 1: return new ExpressionList_ExprAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getExpressionListRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// expr+=Expression
protected class ExpressionList_ExprAssignment_0 extends AssignmentToken  {
	
	public ExpressionList_ExprAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getExpressionListAccess().getExprAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getExpressionListAccess().getExprExpressionParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// ("," expr+=Expression)*
protected class ExpressionList_Group_1 extends GroupToken {
	
	public ExpressionList_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getExpressionListAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExpressionList_ExprAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class ExpressionList_CommaKeyword_1_0 extends KeywordToken  {
	
	public ExpressionList_CommaKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getExpressionListAccess().getCommaKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExpressionList_Group_1(parent, this, 0, inst);
			case 1: return new ExpressionList_ExprAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// expr+=Expression
protected class ExpressionList_ExprAssignment_1_1 extends AssignmentToken  {
	
	public ExpressionList_ExprAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getExpressionListAccess().getExprAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getExpressionListAccess().getExprExpressionParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExpressionList_CommaKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ExpressionList ****************/


/************ begin Rule VarExpression ****************
 *
 * VarExpression returns Expression:
 *   Expression|{VarExpression} "var" name=ID ("=" value=Expression)?; 
 * 
 * // Assignment is optional i JS
 * // Also makes it possible to use VarExpression in a for(var a in xxx) loop
 * //
 *                   
 * 
 * 
 * //Expression returns Expression: value = AssignmentExpression ;
 *
 **/

// Expression|{VarExpression} "var" name=ID ("=" value=Expression)? 
// 
// // Assignment is optional i JS
// // Also makes it possible to use VarExpression in a for(var a in xxx) loop
// //
//                   
// 
// 
// //Expression returns Expression: value = AssignmentExpression ;
protected class VarExpression_Alternatives extends AlternativesToken {

	public VarExpression_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getVarExpressionAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarExpression_ExpressionParserRuleCall_0(parent, this, 0, inst);
			case 1: return new VarExpression_Group_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getVarExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Expression
protected class VarExpression_ExpressionParserRuleCall_0 extends RuleCallToken {
	
	public VarExpression_ExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getVarExpressionAccess().getExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Expression_AssignmentExpressionParserRuleCall.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// {VarExpression} "var" name=ID ("=" value=Expression)?
protected class VarExpression_Group_1 extends GroupToken {
	
	public VarExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getVarExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarExpression_Group_1_3(parent, this, 0, inst);
			case 1: return new VarExpression_NameAssignment_1_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// {VarExpression}
protected class VarExpression_VarExpressionAction_1_0 extends ActionToken  {

	public VarExpression_VarExpressionAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getVarExpressionAccess().getVarExpressionAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getVarExpressionAccess().getVarExpressionAction_1_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "var"
protected class VarExpression_VarKeyword_1_1 extends KeywordToken  {
	
	public VarExpression_VarKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getVarExpressionAccess().getVarKeyword_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarExpression_VarExpressionAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=ID
protected class VarExpression_NameAssignment_1_2 extends AssignmentToken  {
	
	public VarExpression_NameAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVarExpressionAccess().getNameAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarExpression_VarKeyword_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getVarExpressionAccess().getNameIDTerminalRuleCall_1_2_0();
			return obj;
		}
		return null;
	}

}

// ("=" value=Expression)?
protected class VarExpression_Group_1_3 extends GroupToken {
	
	public VarExpression_Group_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getVarExpressionAccess().getGroup_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarExpression_ValueAssignment_1_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "="
protected class VarExpression_EqualsSignKeyword_1_3_0 extends KeywordToken  {
	
	public VarExpression_EqualsSignKeyword_1_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getVarExpressionAccess().getEqualsSignKeyword_1_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarExpression_NameAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// value=Expression
protected class VarExpression_ValueAssignment_1_3_1 extends AssignmentToken  {
	
	public VarExpression_ValueAssignment_1_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVarExpressionAccess().getValueAssignment_1_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getVarExpressionAccess().getValueExpressionParserRuleCall_1_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new VarExpression_EqualsSignKeyword_1_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule VarExpression ****************/


/************ begin Rule Expression ****************
 *
 * Expression:
 *   AssignmentExpression; 
 * 
 * 
 * //Expression returns Expression: value = AssignmentExpression ;
 *
 **/

// AssignmentExpression
protected class Expression_AssignmentExpressionParserRuleCall extends RuleCallToken {
	
	public Expression_AssignmentExpressionParserRuleCall(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignmentExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AssignmentExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAssignmentExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule Expression ****************/


/************ begin Rule AssignmentExpression ****************
 *
 * AssignmentExpression returns Expression:
 *   IfExpression ({AssignmentOperation.left=current} op=AssignmentOperator right=
 *   AssignmentExpression)?; 
 * 
 *     
 * 	       
 * 	
 * 
 * //ChainExpression returns Expression:
 * //	ChainedExpression //({ChainExpression.first=current} ',' next=ChainedExpression)*
 * //	;
 *
 **/

// IfExpression ({AssignmentOperation.left=current} op=AssignmentOperator right=
// AssignmentExpression)?
protected class AssignmentExpression_Group extends GroupToken {
	
	public AssignmentExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAssignmentExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignmentExpression_Group_1(parent, this, 0, inst);
			case 1: return new AssignmentExpression_IfExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAssignmentExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// IfExpression
protected class AssignmentExpression_IfExpressionParserRuleCall_0 extends RuleCallToken {
	
	public AssignmentExpression_IfExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAssignmentExpressionAccess().getIfExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(IfExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getIfExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({AssignmentOperation.left=current} op=AssignmentOperator right=
// AssignmentExpression)?
protected class AssignmentExpression_Group_1 extends GroupToken {
	
	public AssignmentExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAssignmentExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignmentExpression_RightAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {AssignmentOperation.left=current}
protected class AssignmentExpression_AssignmentOperationLeftAction_1_0 extends ActionToken  {

	public AssignmentExpression_AssignmentOperationLeftAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getAssignmentExpressionAccess().getAssignmentOperationLeftAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignmentExpression_IfExpressionParserRuleCall_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getAssignmentExpressionAccess().getAssignmentOperationLeftAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("left", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("left")) return null;
		return getDescr((EObject) val);
	}
}

// op=AssignmentOperator
protected class AssignmentExpression_OpAssignment_1_1 extends AssignmentToken  {
	
	public AssignmentExpression_OpAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssignmentExpressionAccess().getOpAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignmentExpression_AssignmentOperationLeftAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("op",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("op");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getAssignmentExpressionAccess().getOpAssignmentOperatorEnumRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// right=AssignmentExpression
protected class AssignmentExpression_RightAssignment_1_2 extends AssignmentToken  {
	
	public AssignmentExpression_RightAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssignmentExpressionAccess().getRightAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignmentExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("right",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssignmentExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAssignmentExpressionAccess().getRightAssignmentExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AssignmentExpression_OpAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AssignmentExpression ****************/


/************ begin Rule ChainedExpression ****************
 *
 * ChainedExpression returns Expression:
 *   IfExpression; 
 * 
 * //ChainExpression returns Expression:
 * //	ChainedExpression //({ChainExpression.first=current} ',' next=ChainedExpression)*
 * //	;
 *
 **/

// IfExpression
protected class ChainedExpression_IfExpressionParserRuleCall extends RuleCallToken {
	
	public ChainedExpression_IfExpressionParserRuleCall(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getChainedExpressionAccess().getIfExpressionParserRuleCall();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getChainedExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(IfExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getIfExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule ChainedExpression ****************/


/************ begin Rule IfExpression ****************
 *
 * IfExpression returns Expression:
 *   OrExpression ({IfExpression.condition=current} "?" thenPart=ChainedExpression ":"
 *   elsePart=ChainedExpression)?;
 *
 **/

// OrExpression ({IfExpression.condition=current} "?" thenPart=ChainedExpression ":"
// elsePart=ChainedExpression)?
protected class IfExpression_Group extends GroupToken {
	
	public IfExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfExpression_Group_1(parent, this, 0, inst);
			case 1: return new IfExpression_OrExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getIfExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// OrExpression
protected class IfExpression_OrExpressionParserRuleCall_0 extends RuleCallToken {
	
	public IfExpression_OrExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getOrExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(OrExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getOrExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({IfExpression.condition=current} "?" thenPart=ChainedExpression ":" elsePart=
// ChainedExpression)?
protected class IfExpression_Group_1 extends GroupToken {
	
	public IfExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfExpression_ElsePartAssignment_1_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {IfExpression.condition=current}
protected class IfExpression_IfExpressionConditionAction_1_0 extends ActionToken  {

	public IfExpression_IfExpressionConditionAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getIfExpressionConditionAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfExpression_OrExpressionParserRuleCall_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getIfExpressionAccess().getIfExpressionConditionAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("condition", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("condition")) return null;
		return getDescr((EObject) val);
	}
}

// "?"
protected class IfExpression_QuestionMarkKeyword_1_1 extends KeywordToken  {
	
	public IfExpression_QuestionMarkKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getQuestionMarkKeyword_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfExpression_IfExpressionConditionAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// thenPart=ChainedExpression
protected class IfExpression_ThenPartAssignment_1_2 extends AssignmentToken  {
	
	public IfExpression_ThenPartAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getThenPartAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ChainedExpression_IfExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("thenPart",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("thenPart");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getChainedExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getIfExpressionAccess().getThenPartChainedExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfExpression_QuestionMarkKeyword_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ":"
protected class IfExpression_ColonKeyword_1_3 extends KeywordToken  {
	
	public IfExpression_ColonKeyword_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getColonKeyword_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfExpression_ThenPartAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// elsePart=ChainedExpression
protected class IfExpression_ElsePartAssignment_1_4 extends AssignmentToken  {
	
	public IfExpression_ElsePartAssignment_1_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getElsePartAssignment_1_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ChainedExpression_IfExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elsePart",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elsePart");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getChainedExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getIfExpressionAccess().getElsePartChainedExpressionParserRuleCall_1_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfExpression_ColonKeyword_1_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule IfExpression ****************/


/************ begin Rule OrExpression ****************
 *
 * OrExpression returns Expression:
 *   AndExpression ({BooleanOperation.left=current} operator="||" right=AndExpression)*;
 *
 **/

// AndExpression ({BooleanOperation.left=current} operator="||" right=AndExpression)*
protected class OrExpression_Group extends GroupToken {
	
	public OrExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrExpression_Group_1(parent, this, 0, inst);
			case 1: return new OrExpression_AndExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getOrExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// AndExpression
protected class OrExpression_AndExpressionParserRuleCall_0 extends RuleCallToken {
	
	public OrExpression_AndExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AndExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAndExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({BooleanOperation.left=current} operator="||" right=AndExpression)*
protected class OrExpression_Group_1 extends GroupToken {
	
	public OrExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrExpression_RightAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {BooleanOperation.left=current}
protected class OrExpression_BooleanOperationLeftAction_1_0 extends ActionToken  {

	public OrExpression_BooleanOperationLeftAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getBooleanOperationLeftAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrExpression_Group_1(parent, this, 0, inst);
			case 1: return new OrExpression_AndExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getOrExpressionAccess().getBooleanOperationLeftAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("left", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("left")) return null;
		return getDescr((EObject) val);
	}
}

// operator="||"
protected class OrExpression_OperatorAssignment_1_1 extends AssignmentToken  {
	
	public OrExpression_OperatorAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrExpression_BooleanOperationLeftAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("operator",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("operator");
		if("||".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getOrExpressionAccess().getOperatorVerticalLineVerticalLineKeyword_1_1_0();
			return obj;
		}
		return null;
	}

}

// right=AndExpression
protected class OrExpression_RightAssignment_1_2 extends AssignmentToken  {
	
	public OrExpression_RightAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getRightAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("right",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAndExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OrExpression_OperatorAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule OrExpression ****************/


/************ begin Rule AndExpression ****************
 *
 * AndExpression returns Expression:
 *   BitwiseExpression ({BooleanOperation.left=current} operator="&&" right=
 *   BitwiseExpression)*;
 *
 **/

// BitwiseExpression ({BooleanOperation.left=current} operator="&&" right=
// BitwiseExpression)*
protected class AndExpression_Group extends GroupToken {
	
	public AndExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_Group_1(parent, this, 0, inst);
			case 1: return new AndExpression_BitwiseExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAndExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// BitwiseExpression
protected class AndExpression_BitwiseExpressionParserRuleCall_0 extends RuleCallToken {
	
	public AndExpression_BitwiseExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getBitwiseExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BitwiseExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(BitwiseExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBitwiseExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({BooleanOperation.left=current} operator="&&" right=BitwiseExpression)*
protected class AndExpression_Group_1 extends GroupToken {
	
	public AndExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_RightAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {BooleanOperation.left=current}
protected class AndExpression_BooleanOperationLeftAction_1_0 extends ActionToken  {

	public AndExpression_BooleanOperationLeftAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getBooleanOperationLeftAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_Group_1(parent, this, 0, inst);
			case 1: return new AndExpression_BitwiseExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getAndExpressionAccess().getBooleanOperationLeftAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("left", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("left")) return null;
		return getDescr((EObject) val);
	}
}

// operator="&&"
protected class AndExpression_OperatorAssignment_1_1 extends AssignmentToken  {
	
	public AndExpression_OperatorAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_BooleanOperationLeftAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("operator",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("operator");
		if("&&".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAndExpressionAccess().getOperatorAmpersandAmpersandKeyword_1_1_0();
			return obj;
		}
		return null;
	}

}

// right=BitwiseExpression
protected class AndExpression_RightAssignment_1_2 extends AssignmentToken  {
	
	public AndExpression_RightAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getRightAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BitwiseExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("right",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBitwiseExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAndExpressionAccess().getRightBitwiseExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AndExpression_OperatorAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AndExpression ****************/


/************ begin Rule BitwiseExpression ****************
 *
 * BitwiseExpression returns Expression:
 *   RelationalExpression ({OperationCall.params+=current} name=( "&" | "^" | "|" ) params+=
 *   RelationalExpression)*;
 *
 **/

// RelationalExpression ({OperationCall.params+=current} name=( "&" | "^" | "|" ) params+=
// RelationalExpression)*
protected class BitwiseExpression_Group extends GroupToken {
	
	public BitwiseExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBitwiseExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BitwiseExpression_Group_1(parent, this, 0, inst);
			case 1: return new BitwiseExpression_RelationalExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBitwiseExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// RelationalExpression
protected class BitwiseExpression_RelationalExpressionParserRuleCall_0 extends RuleCallToken {
	
	public BitwiseExpression_RelationalExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getBitwiseExpressionAccess().getRelationalExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationalExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RelationalExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRelationalExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({OperationCall.params+=current} name=( "&" | "^" | "|" ) params+=RelationalExpression)*
protected class BitwiseExpression_Group_1 extends GroupToken {
	
	public BitwiseExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBitwiseExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BitwiseExpression_ParamsAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {OperationCall.params+=current}
protected class BitwiseExpression_OperationCallParamsAction_1_0 extends ActionToken  {

	public BitwiseExpression_OperationCallParamsAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getBitwiseExpressionAccess().getOperationCallParamsAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BitwiseExpression_Group_1(parent, this, 0, inst);
			case 1: return new BitwiseExpression_RelationalExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getBitwiseExpressionAccess().getOperationCallParamsAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("params", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("params")) return null;
		return getDescr((EObject) val);
	}
}

// name=( "&" | "^" | "|" )
protected class BitwiseExpression_NameAssignment_1_1 extends AssignmentToken  {
	
	public BitwiseExpression_NameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBitwiseExpressionAccess().getNameAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BitwiseExpression_OperationCallParamsAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if("&".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getBitwiseExpressionAccess().getNameAmpersandKeyword_1_1_0_0();
			return obj;
		}
		if("^".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getBitwiseExpressionAccess().getNameCircumflexAccentKeyword_1_1_0_1();
			return obj;
		}
		if("|".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getBitwiseExpressionAccess().getNameVerticalLineKeyword_1_1_0_2();
			return obj;
		}
		return null;
	}

}

// params+=RelationalExpression
protected class BitwiseExpression_ParamsAssignment_1_2 extends AssignmentToken  {
	
	public BitwiseExpression_ParamsAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBitwiseExpressionAccess().getParamsAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationalExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRelationalExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBitwiseExpressionAccess().getParamsRelationalExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BitwiseExpression_NameAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule BitwiseExpression ****************/


/************ begin Rule RelationalExpression ****************
 *
 * RelationalExpression returns Expression:
 *   ShiftExpression ({RelationalOperation.left=current} operator=RelationalOperator
 *   right=ShiftExpression)*;
 *
 **/

// ShiftExpression ({RelationalOperation.left=current} operator=RelationalOperator
// right=ShiftExpression)*
protected class RelationalExpression_Group extends GroupToken {
	
	public RelationalExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationalExpression_Group_1(parent, this, 0, inst);
			case 1: return new RelationalExpression_ShiftExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRelationalExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ShiftExpression
protected class RelationalExpression_ShiftExpressionParserRuleCall_0 extends RuleCallToken {
	
	public RelationalExpression_ShiftExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ShiftExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ShiftExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getShiftExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({RelationalOperation.left=current} operator=RelationalOperator right=
// ShiftExpression)*
protected class RelationalExpression_Group_1 extends GroupToken {
	
	public RelationalExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationalExpression_RightAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {RelationalOperation.left=current}
protected class RelationalExpression_RelationalOperationLeftAction_1_0 extends ActionToken  {

	public RelationalExpression_RelationalOperationLeftAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getRelationalOperationLeftAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationalExpression_Group_1(parent, this, 0, inst);
			case 1: return new RelationalExpression_ShiftExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getRelationalExpressionAccess().getRelationalOperationLeftAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("left", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("left")) return null;
		return getDescr((EObject) val);
	}
}

// operator=RelationalOperator
protected class RelationalExpression_OperatorAssignment_1_1 extends AssignmentToken  {
	
	public RelationalExpression_OperatorAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationalExpression_RelationalOperationLeftAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("operator",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("operator");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getRelationalExpressionAccess().getOperatorRelationalOperatorEnumRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// right=ShiftExpression
protected class RelationalExpression_RightAssignment_1_2 extends AssignmentToken  {
	
	public RelationalExpression_RightAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getRightAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ShiftExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("right",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getShiftExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRelationalExpressionAccess().getRightShiftExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RelationalExpression_OperatorAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule RelationalExpression ****************/


/************ begin Rule ShiftExpression ****************
 *
 * ShiftExpression returns Expression:
 *   AdditiveExpression ({OperationCall.params+=current} name=( "<<" | ">>" | ">>>" ) params+=
 *   AdditiveExpression)*;
 *
 **/

// AdditiveExpression ({OperationCall.params+=current} name=( "<<" | ">>" | ">>>" ) params+=
// AdditiveExpression)*
protected class ShiftExpression_Group extends GroupToken {
	
	public ShiftExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getShiftExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ShiftExpression_Group_1(parent, this, 0, inst);
			case 1: return new ShiftExpression_AdditiveExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getShiftExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// AdditiveExpression
protected class ShiftExpression_AdditiveExpressionParserRuleCall_0 extends RuleCallToken {
	
	public ShiftExpression_AdditiveExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdditiveExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AdditiveExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAdditiveExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({OperationCall.params+=current} name=( "<<" | ">>" | ">>>" ) params+=AdditiveExpression
// )*
protected class ShiftExpression_Group_1 extends GroupToken {
	
	public ShiftExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getShiftExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ShiftExpression_ParamsAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {OperationCall.params+=current}
protected class ShiftExpression_OperationCallParamsAction_1_0 extends ActionToken  {

	public ShiftExpression_OperationCallParamsAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getShiftExpressionAccess().getOperationCallParamsAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ShiftExpression_Group_1(parent, this, 0, inst);
			case 1: return new ShiftExpression_AdditiveExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getShiftExpressionAccess().getOperationCallParamsAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("params", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("params")) return null;
		return getDescr((EObject) val);
	}
}

// name=( "<<" | ">>" | ">>>" )
protected class ShiftExpression_NameAssignment_1_1 extends AssignmentToken  {
	
	public ShiftExpression_NameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getShiftExpressionAccess().getNameAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ShiftExpression_OperationCallParamsAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if("<<".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getShiftExpressionAccess().getNameLessThanSignLessThanSignKeyword_1_1_0_0();
			return obj;
		}
		if(">>".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getShiftExpressionAccess().getNameGreaterThanSignGreaterThanSignKeyword_1_1_0_1();
			return obj;
		}
		if(">>>".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getShiftExpressionAccess().getNameGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_1_0_2();
			return obj;
		}
		return null;
	}

}

// params+=AdditiveExpression
protected class ShiftExpression_ParamsAssignment_1_2 extends AssignmentToken  {
	
	public ShiftExpression_ParamsAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getShiftExpressionAccess().getParamsAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdditiveExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAdditiveExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getShiftExpressionAccess().getParamsAdditiveExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ShiftExpression_NameAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ShiftExpression ****************/


/************ begin Rule AdditiveExpression ****************
 *
 * AdditiveExpression returns Expression:
 *   MultiplicativeExpression ({OperationCall.params+=current} name=( "+" | "-" ) params+=
 *   MultiplicativeExpression)*;
 *
 **/

// MultiplicativeExpression ({OperationCall.params+=current} name=( "+" | "-" ) params+=
// MultiplicativeExpression)*
protected class AdditiveExpression_Group extends GroupToken {
	
	public AdditiveExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdditiveExpression_Group_1(parent, this, 0, inst);
			case 1: return new AdditiveExpression_MultiplicativeExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAdditiveExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// MultiplicativeExpression
protected class AdditiveExpression_MultiplicativeExpressionParserRuleCall_0 extends RuleCallToken {
	
	public AdditiveExpression_MultiplicativeExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(MultiplicativeExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({OperationCall.params+=current} name=( "+" | "-" ) params+=MultiplicativeExpression)*
protected class AdditiveExpression_Group_1 extends GroupToken {
	
	public AdditiveExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdditiveExpression_ParamsAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {OperationCall.params+=current}
protected class AdditiveExpression_OperationCallParamsAction_1_0 extends ActionToken  {

	public AdditiveExpression_OperationCallParamsAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getOperationCallParamsAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdditiveExpression_Group_1(parent, this, 0, inst);
			case 1: return new AdditiveExpression_MultiplicativeExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getAdditiveExpressionAccess().getOperationCallParamsAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("params", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("params")) return null;
		return getDescr((EObject) val);
	}
}

// name=( "+" | "-" )
protected class AdditiveExpression_NameAssignment_1_1 extends AssignmentToken  {
	
	public AdditiveExpression_NameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getNameAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdditiveExpression_OperationCallParamsAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if("+".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAdditiveExpressionAccess().getNamePlusSignKeyword_1_1_0_0();
			return obj;
		}
		if("-".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAdditiveExpressionAccess().getNameHyphenMinusKeyword_1_1_0_1();
			return obj;
		}
		return null;
	}

}

// params+=MultiplicativeExpression
protected class AdditiveExpression_ParamsAssignment_1_2 extends AssignmentToken  {
	
	public AdditiveExpression_ParamsAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getParamsAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAdditiveExpressionAccess().getParamsMultiplicativeExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AdditiveExpression_NameAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AdditiveExpression ****************/


/************ begin Rule MultiplicativeExpression ****************
 *
 * MultiplicativeExpression returns Expression:
 *   SetExpression ({OperationCall.params+=current} name=( "*" | "/" | "%" ) params+=
 *   SetExpression)*;
 *
 **/

// SetExpression ({OperationCall.params+=current} name=( "*" | "/" | "%" ) params+=
// SetExpression)*
protected class MultiplicativeExpression_Group extends GroupToken {
	
	public MultiplicativeExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_Group_1(parent, this, 0, inst);
			case 1: return new MultiplicativeExpression_SetExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// SetExpression
protected class MultiplicativeExpression_SetExpressionParserRuleCall_0 extends RuleCallToken {
	
	public MultiplicativeExpression_SetExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getSetExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SetExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(SetExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSetExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({OperationCall.params+=current} name=( "*" | "/" | "%" ) params+=SetExpression)*
protected class MultiplicativeExpression_Group_1 extends GroupToken {
	
	public MultiplicativeExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_ParamsAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {OperationCall.params+=current}
protected class MultiplicativeExpression_OperationCallParamsAction_1_0 extends ActionToken  {

	public MultiplicativeExpression_OperationCallParamsAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getOperationCallParamsAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_Group_1(parent, this, 0, inst);
			case 1: return new MultiplicativeExpression_SetExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getMultiplicativeExpressionAccess().getOperationCallParamsAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("params", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("params")) return null;
		return getDescr((EObject) val);
	}
}

// name=( "*" | "/" | "%" )
protected class MultiplicativeExpression_NameAssignment_1_1 extends AssignmentToken  {
	
	public MultiplicativeExpression_NameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getNameAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_OperationCallParamsAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if("*".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getMultiplicativeExpressionAccess().getNameAsteriskKeyword_1_1_0_0();
			return obj;
		}
		if("/".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getMultiplicativeExpressionAccess().getNameSolidusKeyword_1_1_0_1();
			return obj;
		}
		if("%".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getMultiplicativeExpressionAccess().getNamePercentSignKeyword_1_1_0_2();
			return obj;
		}
		return null;
	}

}

// params+=SetExpression
protected class MultiplicativeExpression_ParamsAssignment_1_2 extends AssignmentToken  {
	
	public MultiplicativeExpression_ParamsAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getParamsAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SetExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSetExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMultiplicativeExpressionAccess().getParamsSetExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MultiplicativeExpression_NameAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule MultiplicativeExpression ****************/


/************ begin Rule SetExpression ****************
 *
 * SetExpression returns Expression:
 *   UnaryOrInfixExpression ({SetOperationCall.params+=current} op=SetOperator params+=
 *   UnaryOrInfixExpression)*;
 *
 **/

// UnaryOrInfixExpression ({SetOperationCall.params+=current} op=SetOperator params+=
// UnaryOrInfixExpression)*
protected class SetExpression_Group extends GroupToken {
	
	public SetExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSetExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SetExpression_Group_1(parent, this, 0, inst);
			case 1: return new SetExpression_UnaryOrInfixExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSetExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// UnaryOrInfixExpression
protected class SetExpression_UnaryOrInfixExpressionParserRuleCall_0 extends RuleCallToken {
	
	public SetExpression_UnaryOrInfixExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getSetExpressionAccess().getUnaryOrInfixExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryOrInfixExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UnaryOrInfixExpression_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUnaryOrInfixExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({SetOperationCall.params+=current} op=SetOperator params+=UnaryOrInfixExpression)
// *
protected class SetExpression_Group_1 extends GroupToken {
	
	public SetExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSetExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SetExpression_ParamsAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {SetOperationCall.params+=current}
protected class SetExpression_SetOperationCallParamsAction_1_0 extends ActionToken  {

	public SetExpression_SetOperationCallParamsAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getSetExpressionAccess().getSetOperationCallParamsAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SetExpression_Group_1(parent, this, 0, inst);
			case 1: return new SetExpression_UnaryOrInfixExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getSetExpressionAccess().getSetOperationCallParamsAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("params", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("params")) return null;
		return getDescr((EObject) val);
	}
}

// op=SetOperator
protected class SetExpression_OpAssignment_1_1 extends AssignmentToken  {
	
	public SetExpression_OpAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSetExpressionAccess().getOpAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SetExpression_SetOperationCallParamsAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("op",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("op");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getSetExpressionAccess().getOpSetOperatorEnumRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// params+=UnaryOrInfixExpression
protected class SetExpression_ParamsAssignment_1_2 extends AssignmentToken  {
	
	public SetExpression_ParamsAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSetExpressionAccess().getParamsAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryOrInfixExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUnaryOrInfixExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSetExpressionAccess().getParamsUnaryOrInfixExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SetExpression_OpAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule SetExpression ****************/


/************ begin Rule UnaryOrInfixExpression ****************
 *
 * UnaryOrInfixExpression returns Expression:
 *   UnaryExpression|PostopExpression;
 *
 **/

// UnaryExpression|PostopExpression
protected class UnaryOrInfixExpression_Alternatives extends AlternativesToken {

	public UnaryOrInfixExpression_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getUnaryOrInfixExpressionAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryOrInfixExpression_UnaryExpressionParserRuleCall_0(parent, this, 0, inst);
			case 1: return new UnaryOrInfixExpression_PostopExpressionParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnaryOrInfixExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// UnaryExpression
protected class UnaryOrInfixExpression_UnaryExpressionParserRuleCall_0 extends RuleCallToken {
	
	public UnaryOrInfixExpression_UnaryExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getUnaryOrInfixExpressionAccess().getUnaryExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UnaryExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUnaryExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// PostopExpression
protected class UnaryOrInfixExpression_PostopExpressionParserRuleCall_1 extends RuleCallToken {
	
	public UnaryOrInfixExpression_PostopExpressionParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getUnaryOrInfixExpressionAccess().getPostopExpressionParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostopExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(PostopExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPostopExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule UnaryOrInfixExpression ****************/


/************ begin Rule UnaryExpression ****************
 *
 * UnaryExpression:
 *   {UnaryOperation} name=( "!" | "-" | "++" | "--" | "typeof" | "delete" | "~" ) params+=
 *   PostopExpression;
 *
 **/

// {UnaryOperation} name=( "!" | "-" | "++" | "--" | "typeof" | "delete" | "~" ) params+=
// PostopExpression
protected class UnaryExpression_Group extends GroupToken {
	
	public UnaryExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnaryExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryExpression_ParamsAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnaryExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {UnaryOperation}
protected class UnaryExpression_UnaryOperationAction_0 extends ActionToken  {

	public UnaryExpression_UnaryOperationAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getUnaryExpressionAccess().getUnaryOperationAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getUnaryExpressionAccess().getUnaryOperationAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// name=( "!" | "-" | "++" | "--" | "typeof" | "delete" | "~" )
protected class UnaryExpression_NameAssignment_1 extends AssignmentToken  {
	
	public UnaryExpression_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnaryExpressionAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryExpression_UnaryOperationAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if("!".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getUnaryExpressionAccess().getNameExclamationMarkKeyword_1_0_0();
			return obj;
		}
		if("-".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getUnaryExpressionAccess().getNameHyphenMinusKeyword_1_0_1();
			return obj;
		}
		if("++".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getUnaryExpressionAccess().getNamePlusSignPlusSignKeyword_1_0_2();
			return obj;
		}
		if("--".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getUnaryExpressionAccess().getNameHyphenMinusHyphenMinusKeyword_1_0_3();
			return obj;
		}
		if("typeof".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getUnaryExpressionAccess().getNameTypeofKeyword_1_0_4();
			return obj;
		}
		if("delete".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getUnaryExpressionAccess().getNameDeleteKeyword_1_0_5();
			return obj;
		}
		if("~".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getUnaryExpressionAccess().getNameTildeKeyword_1_0_6();
			return obj;
		}
		return null;
	}

}

// params+=PostopExpression
protected class UnaryExpression_ParamsAssignment_2 extends AssignmentToken  {
	
	public UnaryExpression_ParamsAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnaryExpressionAccess().getParamsAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostopExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPostopExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnaryExpressionAccess().getParamsPostopExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new UnaryExpression_NameAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule UnaryExpression ****************/


/************ begin Rule PostopExpression ****************
 *
 * PostopExpression returns Expression:
 *   InfixExpression ({OperationCall.postTarget=current} name=( "--" | "++" ))?;
 *
 **/

// InfixExpression ({OperationCall.postTarget=current} name=( "--" | "++" ))?
protected class PostopExpression_Group extends GroupToken {
	
	public PostopExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPostopExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostopExpression_Group_1(parent, this, 0, inst);
			case 1: return new PostopExpression_InfixExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPostopExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// InfixExpression
protected class PostopExpression_InfixExpressionParserRuleCall_0 extends RuleCallToken {
	
	public PostopExpression_InfixExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPostopExpressionAccess().getInfixExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(InfixExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getInfixExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({OperationCall.postTarget=current} name=( "--" | "++" ))?
protected class PostopExpression_Group_1 extends GroupToken {
	
	public PostopExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPostopExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostopExpression_NameAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {OperationCall.postTarget=current}
protected class PostopExpression_OperationCallPostTargetAction_1_0 extends ActionToken  {

	public PostopExpression_OperationCallPostTargetAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getPostopExpressionAccess().getOperationCallPostTargetAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostopExpression_InfixExpressionParserRuleCall_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getPostopExpressionAccess().getOperationCallPostTargetAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("postTarget", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("postTarget")) return null;
		return getDescr((EObject) val);
	}
}

// name=( "--" | "++" )
protected class PostopExpression_NameAssignment_1_1 extends AssignmentToken  {
	
	public PostopExpression_NameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPostopExpressionAccess().getNameAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostopExpression_OperationCallPostTargetAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if("--".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getPostopExpressionAccess().getNameHyphenMinusHyphenMinusKeyword_1_1_0_0();
			return obj;
		}
		if("++".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getPostopExpressionAccess().getNamePlusSignPlusSignKeyword_1_1_0_1();
			return obj;
		}
		return null;
	}

}



/************ end Rule PostopExpression ****************/


/************ begin Rule InfixExpression ****************
 *
 * InfixExpression returns Expression:
 *   CallExpression ({OperationCall.target=current} "." name=ID "(" (params+=Parameter (","
 *   params+=Parameter)*)? ")"|{AtCall.target=current} "[" index=Expression "]" ("(" (
 *   params+=Parameter ("," params+=Parameter)*)? ")")?|{FeatureCall.target=current} "."
 *   type=ID)*;
 *
 **/

// CallExpression ({OperationCall.target=current} "." name=ID "(" (params+=Parameter (","
// params+=Parameter)*)? ")"|{AtCall.target=current} "[" index=Expression "]" ("(" (
// params+=Parameter ("," params+=Parameter)*)? ")")?|{FeatureCall.target=current} "."
// type=ID)*
protected class InfixExpression_Group extends GroupToken {
	
	public InfixExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Alternatives_1(parent, this, 0, inst);
			case 1: return new InfixExpression_CallExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getInfixExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// CallExpression
protected class InfixExpression_CallExpressionParserRuleCall_0 extends RuleCallToken {
	
	public InfixExpression_CallExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getCallExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CallExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CallExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCallExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({OperationCall.target=current} "." name=ID "(" (params+=Parameter ("," params+=
// Parameter)*)? ")"|{AtCall.target=current} "[" index=Expression "]" ("(" (params+=
// Parameter ("," params+=Parameter)*)? ")")?|{FeatureCall.target=current} "." type=ID)*
protected class InfixExpression_Alternatives_1 extends AlternativesToken {

	public InfixExpression_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getAlternatives_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Group_1_0(parent, this, 0, inst);
			case 1: return new InfixExpression_Group_1_1(parent, this, 1, inst);
			case 2: return new InfixExpression_Group_1_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// {OperationCall.target=current} "." name=ID "(" (params+=Parameter ("," params+=
// Parameter)*)? ")"
protected class InfixExpression_Group_1_0 extends GroupToken {
	
	public InfixExpression_Group_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getGroup_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_RightParenthesisKeyword_1_0_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {OperationCall.target=current}
protected class InfixExpression_OperationCallTargetAction_1_0_0 extends ActionToken  {

	public InfixExpression_OperationCallTargetAction_1_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getOperationCallTargetAction_1_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Alternatives_1(parent, this, 0, inst);
			case 1: return new InfixExpression_CallExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getInfixExpressionAccess().getOperationCallTargetAction_1_0_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("target", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("target")) return null;
		return getDescr((EObject) val);
	}
}

// "."
protected class InfixExpression_FullStopKeyword_1_0_1 extends KeywordToken  {
	
	public InfixExpression_FullStopKeyword_1_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getFullStopKeyword_1_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_OperationCallTargetAction_1_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=ID
protected class InfixExpression_NameAssignment_1_0_2 extends AssignmentToken  {
	
	public InfixExpression_NameAssignment_1_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getNameAssignment_1_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_FullStopKeyword_1_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getInfixExpressionAccess().getNameIDTerminalRuleCall_1_0_2_0();
			return obj;
		}
		return null;
	}

}

// "("
protected class InfixExpression_LeftParenthesisKeyword_1_0_3 extends KeywordToken  {
	
	public InfixExpression_LeftParenthesisKeyword_1_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getLeftParenthesisKeyword_1_0_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_NameAssignment_1_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (params+=Parameter ("," params+=Parameter)*)?
protected class InfixExpression_Group_1_0_4 extends GroupToken {
	
	public InfixExpression_Group_1_0_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getGroup_1_0_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Group_1_0_4_1(parent, this, 0, inst);
			case 1: return new InfixExpression_ParamsAssignment_1_0_4_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// params+=Parameter
protected class InfixExpression_ParamsAssignment_1_0_4_0 extends AssignmentToken  {
	
	public InfixExpression_ParamsAssignment_1_0_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getParamsAssignment_1_0_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parameter_ValAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getInfixExpressionAccess().getParamsParameterParserRuleCall_1_0_4_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InfixExpression_LeftParenthesisKeyword_1_0_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," params+=Parameter)*
protected class InfixExpression_Group_1_0_4_1 extends GroupToken {
	
	public InfixExpression_Group_1_0_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getGroup_1_0_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_ParamsAssignment_1_0_4_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class InfixExpression_CommaKeyword_1_0_4_1_0 extends KeywordToken  {
	
	public InfixExpression_CommaKeyword_1_0_4_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getCommaKeyword_1_0_4_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Group_1_0_4_1(parent, this, 0, inst);
			case 1: return new InfixExpression_ParamsAssignment_1_0_4_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// params+=Parameter
protected class InfixExpression_ParamsAssignment_1_0_4_1_1 extends AssignmentToken  {
	
	public InfixExpression_ParamsAssignment_1_0_4_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getParamsAssignment_1_0_4_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parameter_ValAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getInfixExpressionAccess().getParamsParameterParserRuleCall_1_0_4_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InfixExpression_CommaKeyword_1_0_4_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class InfixExpression_RightParenthesisKeyword_1_0_5 extends KeywordToken  {
	
	public InfixExpression_RightParenthesisKeyword_1_0_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getRightParenthesisKeyword_1_0_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Group_1_0_4(parent, this, 0, inst);
			case 1: return new InfixExpression_LeftParenthesisKeyword_1_0_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// {AtCall.target=current} "[" index=Expression "]" ("(" (params+=Parameter ("," params+=
// Parameter)*)? ")")?
protected class InfixExpression_Group_1_1 extends GroupToken {
	
	public InfixExpression_Group_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getGroup_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Group_1_1_4(parent, this, 0, inst);
			case 1: return new InfixExpression_RightSquareBracketKeyword_1_1_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// {AtCall.target=current}
protected class InfixExpression_AtCallTargetAction_1_1_0 extends ActionToken  {

	public InfixExpression_AtCallTargetAction_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getAtCallTargetAction_1_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Alternatives_1(parent, this, 0, inst);
			case 1: return new InfixExpression_CallExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getInfixExpressionAccess().getAtCallTargetAction_1_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("target", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("target")) return null;
		return getDescr((EObject) val);
	}
}

// "["
protected class InfixExpression_LeftSquareBracketKeyword_1_1_1 extends KeywordToken  {
	
	public InfixExpression_LeftSquareBracketKeyword_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getLeftSquareBracketKeyword_1_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_AtCallTargetAction_1_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// index=Expression
protected class InfixExpression_IndexAssignment_1_1_2 extends AssignmentToken  {
	
	public InfixExpression_IndexAssignment_1_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getIndexAssignment_1_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("index",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("index");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getInfixExpressionAccess().getIndexExpressionParserRuleCall_1_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InfixExpression_LeftSquareBracketKeyword_1_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class InfixExpression_RightSquareBracketKeyword_1_1_3 extends KeywordToken  {
	
	public InfixExpression_RightSquareBracketKeyword_1_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getRightSquareBracketKeyword_1_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_IndexAssignment_1_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("(" (params+=Parameter ("," params+=Parameter)*)? ")")?
protected class InfixExpression_Group_1_1_4 extends GroupToken {
	
	public InfixExpression_Group_1_1_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getGroup_1_1_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_RightParenthesisKeyword_1_1_4_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class InfixExpression_LeftParenthesisKeyword_1_1_4_0 extends KeywordToken  {
	
	public InfixExpression_LeftParenthesisKeyword_1_1_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getLeftParenthesisKeyword_1_1_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_RightSquareBracketKeyword_1_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (params+=Parameter ("," params+=Parameter)*)?
protected class InfixExpression_Group_1_1_4_1 extends GroupToken {
	
	public InfixExpression_Group_1_1_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getGroup_1_1_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Group_1_1_4_1_1(parent, this, 0, inst);
			case 1: return new InfixExpression_ParamsAssignment_1_1_4_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// params+=Parameter
protected class InfixExpression_ParamsAssignment_1_1_4_1_0 extends AssignmentToken  {
	
	public InfixExpression_ParamsAssignment_1_1_4_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getParamsAssignment_1_1_4_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parameter_ValAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getInfixExpressionAccess().getParamsParameterParserRuleCall_1_1_4_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InfixExpression_LeftParenthesisKeyword_1_1_4_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," params+=Parameter)*
protected class InfixExpression_Group_1_1_4_1_1 extends GroupToken {
	
	public InfixExpression_Group_1_1_4_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getGroup_1_1_4_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_ParamsAssignment_1_1_4_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class InfixExpression_CommaKeyword_1_1_4_1_1_0 extends KeywordToken  {
	
	public InfixExpression_CommaKeyword_1_1_4_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getCommaKeyword_1_1_4_1_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Group_1_1_4_1_1(parent, this, 0, inst);
			case 1: return new InfixExpression_ParamsAssignment_1_1_4_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// params+=Parameter
protected class InfixExpression_ParamsAssignment_1_1_4_1_1_1 extends AssignmentToken  {
	
	public InfixExpression_ParamsAssignment_1_1_4_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getParamsAssignment_1_1_4_1_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parameter_ValAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getInfixExpressionAccess().getParamsParameterParserRuleCall_1_1_4_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InfixExpression_CommaKeyword_1_1_4_1_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class InfixExpression_RightParenthesisKeyword_1_1_4_2 extends KeywordToken  {
	
	public InfixExpression_RightParenthesisKeyword_1_1_4_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getRightParenthesisKeyword_1_1_4_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Group_1_1_4_1(parent, this, 0, inst);
			case 1: return new InfixExpression_LeftParenthesisKeyword_1_1_4_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



// {FeatureCall.target=current} "." type=ID
protected class InfixExpression_Group_1_2 extends GroupToken {
	
	public InfixExpression_Group_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getGroup_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_TypeAssignment_1_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {FeatureCall.target=current}
protected class InfixExpression_FeatureCallTargetAction_1_2_0 extends ActionToken  {

	public InfixExpression_FeatureCallTargetAction_1_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getFeatureCallTargetAction_1_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Alternatives_1(parent, this, 0, inst);
			case 1: return new InfixExpression_CallExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getInfixExpressionAccess().getFeatureCallTargetAction_1_2_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("target", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("target")) return null;
		return getDescr((EObject) val);
	}
}

// "."
protected class InfixExpression_FullStopKeyword_1_2_1 extends KeywordToken  {
	
	public InfixExpression_FullStopKeyword_1_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getFullStopKeyword_1_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_FeatureCallTargetAction_1_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=ID
protected class InfixExpression_TypeAssignment_1_2_2 extends AssignmentToken  {
	
	public InfixExpression_TypeAssignment_1_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getTypeAssignment_1_2_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_FullStopKeyword_1_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getInfixExpressionAccess().getTypeIDTerminalRuleCall_1_2_2_0();
			return obj;
		}
		return null;
	}

}




/************ end Rule InfixExpression ****************/


/************ begin Rule CallExpression ****************
 *
 * CallExpression returns Expression:
 *   PrimaryExpression ({OperationCall.target=current} "(" (params+=Parameter ("," params
 *   +=Parameter)*)? ")")*;
 *
 **/

// PrimaryExpression ({OperationCall.target=current} "(" (params+=Parameter ("," params
// +=Parameter)*)? ")")*
protected class CallExpression_Group extends GroupToken {
	
	public CallExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCallExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CallExpression_Group_1(parent, this, 0, inst);
			case 1: return new CallExpression_PrimaryExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCallExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// PrimaryExpression
protected class CallExpression_PrimaryExpressionParserRuleCall_0 extends RuleCallToken {
	
	public CallExpression_PrimaryExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getCallExpressionAccess().getPrimaryExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimaryExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(PrimaryExpression_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPrimaryExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({OperationCall.target=current} "(" (params+=Parameter ("," params+=Parameter)*)? ")"
// )*
protected class CallExpression_Group_1 extends GroupToken {
	
	public CallExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCallExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CallExpression_RightParenthesisKeyword_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {OperationCall.target=current}
protected class CallExpression_OperationCallTargetAction_1_0 extends ActionToken  {

	public CallExpression_OperationCallTargetAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getCallExpressionAccess().getOperationCallTargetAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CallExpression_Group_1(parent, this, 0, inst);
			case 1: return new CallExpression_PrimaryExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getCallExpressionAccess().getOperationCallTargetAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("target", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("target")) return null;
		return getDescr((EObject) val);
	}
}

// "("
protected class CallExpression_LeftParenthesisKeyword_1_1 extends KeywordToken  {
	
	public CallExpression_LeftParenthesisKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCallExpressionAccess().getLeftParenthesisKeyword_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CallExpression_OperationCallTargetAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (params+=Parameter ("," params+=Parameter)*)?
protected class CallExpression_Group_1_2 extends GroupToken {
	
	public CallExpression_Group_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCallExpressionAccess().getGroup_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CallExpression_Group_1_2_1(parent, this, 0, inst);
			case 1: return new CallExpression_ParamsAssignment_1_2_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// params+=Parameter
protected class CallExpression_ParamsAssignment_1_2_0 extends AssignmentToken  {
	
	public CallExpression_ParamsAssignment_1_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCallExpressionAccess().getParamsAssignment_1_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parameter_ValAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCallExpressionAccess().getParamsParameterParserRuleCall_1_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CallExpression_LeftParenthesisKeyword_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," params+=Parameter)*
protected class CallExpression_Group_1_2_1 extends GroupToken {
	
	public CallExpression_Group_1_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCallExpressionAccess().getGroup_1_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CallExpression_ParamsAssignment_1_2_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class CallExpression_CommaKeyword_1_2_1_0 extends KeywordToken  {
	
	public CallExpression_CommaKeyword_1_2_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCallExpressionAccess().getCommaKeyword_1_2_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CallExpression_Group_1_2_1(parent, this, 0, inst);
			case 1: return new CallExpression_ParamsAssignment_1_2_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// params+=Parameter
protected class CallExpression_ParamsAssignment_1_2_1_1 extends AssignmentToken  {
	
	public CallExpression_ParamsAssignment_1_2_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCallExpressionAccess().getParamsAssignment_1_2_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parameter_ValAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCallExpressionAccess().getParamsParameterParserRuleCall_1_2_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CallExpression_CommaKeyword_1_2_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class CallExpression_RightParenthesisKeyword_1_3 extends KeywordToken  {
	
	public CallExpression_RightParenthesisKeyword_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCallExpressionAccess().getRightParenthesisKeyword_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CallExpression_Group_1_2(parent, this, 0, inst);
			case 1: return new CallExpression_LeftParenthesisKeyword_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule CallExpression ****************/


/************ begin Rule PrimaryExpression ****************
 *
 * PrimaryExpression returns Expression:
 *   Literal|ConstructorCallExpression|VariableValue|PropertyValue|KeywordVariables|
 *   ParanthesizedExpression; 
 * 		
 *     
 * 	   
 * //	| FeatureCall
 *
 **/

// Literal|ConstructorCallExpression|VariableValue|PropertyValue|KeywordVariables|
// ParanthesizedExpression 
// 		
//     
// 	   
// //	| FeatureCall
protected class PrimaryExpression_Alternatives extends AlternativesToken {

	public PrimaryExpression_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimaryExpression_LiteralParserRuleCall_0(parent, this, 0, inst);
			case 1: return new PrimaryExpression_ConstructorCallExpressionParserRuleCall_1(parent, this, 1, inst);
			case 2: return new PrimaryExpression_VariableValueParserRuleCall_2(parent, this, 2, inst);
			case 3: return new PrimaryExpression_PropertyValueParserRuleCall_3(parent, this, 3, inst);
			case 4: return new PrimaryExpression_KeywordVariablesParserRuleCall_4(parent, this, 4, inst);
			case 5: return new PrimaryExpression_ParanthesizedExpressionParserRuleCall_5(parent, this, 5, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPrimaryExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Literal    
// //	| FeatureCall
protected class PrimaryExpression_LiteralParserRuleCall_0 extends RuleCallToken {
	
	public PrimaryExpression_LiteralParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Literal_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Literal_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ConstructorCallExpression
protected class PrimaryExpression_ConstructorCallExpressionParserRuleCall_1 extends RuleCallToken {
	
	public PrimaryExpression_ConstructorCallExpressionParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getConstructorCallExpressionParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstructorCallExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ConstructorCallExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getConstructorCallExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// VariableValue
protected class PrimaryExpression_VariableValueParserRuleCall_2 extends RuleCallToken {
	
	public PrimaryExpression_VariableValueParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getVariableValueParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableValue_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(VariableValue_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getVariableValueRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// PropertyValue
protected class PrimaryExpression_PropertyValueParserRuleCall_3 extends RuleCallToken {
	
	public PrimaryExpression_PropertyValueParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getPropertyValueParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyValue_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(PropertyValue_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPropertyValueRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// KeywordVariables
protected class PrimaryExpression_KeywordVariablesParserRuleCall_4 extends RuleCallToken {
	
	public PrimaryExpression_KeywordVariablesParserRuleCall_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getKeywordVariablesParserRuleCall_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new KeywordVariables_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(KeywordVariables_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getKeywordVariablesRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ParanthesizedExpression
protected class PrimaryExpression_ParanthesizedExpressionParserRuleCall_5 extends RuleCallToken {
	
	public PrimaryExpression_ParanthesizedExpressionParserRuleCall_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getParanthesizedExpressionParserRuleCall_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParanthesizedExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ParanthesizedExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getParanthesizedExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule PrimaryExpression ****************/


/************ begin Rule PropertyValue ****************
 *
 * PropertyValue returns Expression:
 *   {PropertyValue} name=PID;
 *
 **/

// {PropertyValue} name=PID
protected class PropertyValue_Group extends GroupToken {
	
	public PropertyValue_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPropertyValueAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyValue_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPropertyValueRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {PropertyValue}
protected class PropertyValue_PropertyValueAction_0 extends ActionToken  {

	public PropertyValue_PropertyValueAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getPropertyValueAccess().getPropertyValueAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getPropertyValueAccess().getPropertyValueAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// name=PID
protected class PropertyValue_NameAssignment_1 extends AssignmentToken  {
	
	public PropertyValue_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyValueAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyValue_PropertyValueAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPropertyValueAccess().getNamePIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule PropertyValue ****************/


/************ begin Rule VariableValue ****************
 *
 * VariableValue returns Expression:
 *   {VariableValue} name=ID;
 *
 **/

// {VariableValue} name=ID
protected class VariableValue_Group extends GroupToken {
	
	public VariableValue_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getVariableValueAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableValue_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getVariableValueRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {VariableValue}
protected class VariableValue_VariableValueAction_0 extends ActionToken  {

	public VariableValue_VariableValueAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getVariableValueAccess().getVariableValueAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getVariableValueAccess().getVariableValueAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// name=ID
protected class VariableValue_NameAssignment_1 extends AssignmentToken  {
	
	public VariableValue_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableValueAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableValue_VariableValueAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getVariableValueAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule VariableValue ****************/


/************ begin Rule KeywordVariables ****************
 *
 * KeywordVariables returns Expression:
 *   {KeywordVariable} name=( GroupKeyword | LayoutKeyword | "properties" ); 
 *                        
 * 
 * //FeatureCall:
 * //	OperationCall
 * //	;
 * //	
 * //OperationCall 
 * //	: name=(ID|PID) "(" (params+=Parameter ("," params+=Parameter)*)? ")" 
 * //	;
 *
 **/

// {KeywordVariable} name=( GroupKeyword | LayoutKeyword | "properties" )
protected class KeywordVariables_Group extends GroupToken {
	
	public KeywordVariables_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getKeywordVariablesAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new KeywordVariables_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getKeywordVariablesRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {KeywordVariable}
protected class KeywordVariables_KeywordVariableAction_0 extends ActionToken  {

	public KeywordVariables_KeywordVariableAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getKeywordVariablesAccess().getKeywordVariableAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getKeywordVariablesAccess().getKeywordVariableAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// name=( GroupKeyword | LayoutKeyword | "properties" )
protected class KeywordVariables_NameAssignment_1 extends AssignmentToken  {
	
	public KeywordVariables_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getKeywordVariablesAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new KeywordVariables_KeywordVariableAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if("properties".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getKeywordVariablesAccess().getNamePropertiesKeyword_1_0_2();
			return obj;
		}
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getKeywordVariablesAccess().getNameGroupKeywordParserRuleCall_1_0_0();
			return obj;
		}
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getKeywordVariablesAccess().getNameLayoutKeywordParserRuleCall_1_0_1();
			return obj;
		}
		return null;
	}

}


/************ end Rule KeywordVariables ****************/


/************ begin Rule ConstructorCallExpression ****************
 *
 * ConstructorCallExpression returns Expression:
 *   {CreatorCall} name="new" target=QualifiedName "(" (params+=Parameter ("," params+=
 *   Parameter)*)? ")"; 
 * 
 * //FeatureCall:
 * //	OperationCall
 * //	;
 * //	
 * //OperationCall 
 * //	: name=(ID|PID) "(" (params+=Parameter ("," params+=Parameter)*)? ")" 
 * //	;
 *
 **/

// {CreatorCall} name="new" target=QualifiedName "(" (params+=Parameter ("," params+=
// Parameter)*)? ")"
protected class ConstructorCallExpression_Group extends GroupToken {
	
	public ConstructorCallExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstructorCallExpression_RightParenthesisKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getConstructorCallExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {CreatorCall}
protected class ConstructorCallExpression_CreatorCallAction_0 extends ActionToken  {

	public ConstructorCallExpression_CreatorCallAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getCreatorCallAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getConstructorCallExpressionAccess().getCreatorCallAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// name="new"
protected class ConstructorCallExpression_NameAssignment_1 extends AssignmentToken  {
	
	public ConstructorCallExpression_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstructorCallExpression_CreatorCallAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if("new".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getConstructorCallExpressionAccess().getNameNewKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// target=QualifiedName
protected class ConstructorCallExpression_TargetAssignment_2 extends AssignmentToken  {
	
	public ConstructorCallExpression_TargetAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getTargetAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstructorCallExpression_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("target",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("target");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getConstructorCallExpressionAccess().getTargetQualifiedNameParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "("
protected class ConstructorCallExpression_LeftParenthesisKeyword_3 extends KeywordToken  {
	
	public ConstructorCallExpression_LeftParenthesisKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getLeftParenthesisKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstructorCallExpression_TargetAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (params+=Parameter ("," params+=Parameter)*)?
protected class ConstructorCallExpression_Group_4 extends GroupToken {
	
	public ConstructorCallExpression_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getGroup_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstructorCallExpression_Group_4_1(parent, this, 0, inst);
			case 1: return new ConstructorCallExpression_ParamsAssignment_4_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// params+=Parameter
protected class ConstructorCallExpression_ParamsAssignment_4_0 extends AssignmentToken  {
	
	public ConstructorCallExpression_ParamsAssignment_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getParamsAssignment_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parameter_ValAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getConstructorCallExpressionAccess().getParamsParameterParserRuleCall_4_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ConstructorCallExpression_LeftParenthesisKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," params+=Parameter)*
protected class ConstructorCallExpression_Group_4_1 extends GroupToken {
	
	public ConstructorCallExpression_Group_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getGroup_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstructorCallExpression_ParamsAssignment_4_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class ConstructorCallExpression_CommaKeyword_4_1_0 extends KeywordToken  {
	
	public ConstructorCallExpression_CommaKeyword_4_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getCommaKeyword_4_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstructorCallExpression_Group_4_1(parent, this, 0, inst);
			case 1: return new ConstructorCallExpression_ParamsAssignment_4_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// params+=Parameter
protected class ConstructorCallExpression_ParamsAssignment_4_1_1 extends AssignmentToken  {
	
	public ConstructorCallExpression_ParamsAssignment_4_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getParamsAssignment_4_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parameter_ValAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getConstructorCallExpressionAccess().getParamsParameterParserRuleCall_4_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ConstructorCallExpression_CommaKeyword_4_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class ConstructorCallExpression_RightParenthesisKeyword_5 extends KeywordToken  {
	
	public ConstructorCallExpression_RightParenthesisKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getRightParenthesisKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstructorCallExpression_Group_4(parent, this, 0, inst);
			case 1: return new ConstructorCallExpression_LeftParenthesisKeyword_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ConstructorCallExpression ****************/


/************ begin Rule Literal ****************
 *
 * Literal returns Expression:
 *   ValueLiteral|RegexpLiteral|LiteralArray|LiteralObject|LiteralFunction;
 *
 **/

// ValueLiteral|RegexpLiteral|LiteralArray|LiteralObject|LiteralFunction
protected class Literal_Alternatives extends AlternativesToken {

	public Literal_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getLiteralAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Literal_ValueLiteralParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Literal_RegexpLiteralParserRuleCall_1(parent, this, 1, inst);
			case 2: return new Literal_LiteralArrayParserRuleCall_2(parent, this, 2, inst);
			case 3: return new Literal_LiteralObjectParserRuleCall_3(parent, this, 3, inst);
			case 4: return new Literal_LiteralFunctionParserRuleCall_4(parent, this, 4, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ValueLiteral
protected class Literal_ValueLiteralParserRuleCall_0 extends RuleCallToken {
	
	public Literal_ValueLiteralParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralAccess().getValueLiteralParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ValueLiteral_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ValueLiteral_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getValueLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// RegexpLiteral
protected class Literal_RegexpLiteralParserRuleCall_1 extends RuleCallToken {
	
	public Literal_RegexpLiteralParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralAccess().getRegexpLiteralParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RegexpLiteral_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RegexpLiteral_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRegexpLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// LiteralArray
protected class Literal_LiteralArrayParserRuleCall_2 extends RuleCallToken {
	
	public Literal_LiteralArrayParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralAccess().getLiteralArrayParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralArray_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(LiteralArray_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLiteralArrayRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// LiteralObject
protected class Literal_LiteralObjectParserRuleCall_3 extends RuleCallToken {
	
	public Literal_LiteralObjectParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralAccess().getLiteralObjectParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralObject_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(LiteralObject_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLiteralObjectRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// LiteralFunction
protected class Literal_LiteralFunctionParserRuleCall_4 extends RuleCallToken {
	
	public Literal_LiteralFunctionParserRuleCall_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralAccess().getLiteralFunctionParserRuleCall_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralFunction_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(LiteralFunction_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLiteralFunctionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Literal ****************/


/************ begin Rule LiteralArray ****************
 *
 * LiteralArray returns Expression:
 *   {LiteralArray} "[" (element+=Expression ("," element+=Expression)*)? "]";
 *
 **/

// {LiteralArray} "[" (element+=Expression ("," element+=Expression)*)? "]"
protected class LiteralArray_Group extends GroupToken {
	
	public LiteralArray_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLiteralArrayAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralArray_RightSquareBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLiteralArrayRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {LiteralArray}
protected class LiteralArray_LiteralArrayAction_0 extends ActionToken  {

	public LiteralArray_LiteralArrayAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getLiteralArrayAccess().getLiteralArrayAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getLiteralArrayAccess().getLiteralArrayAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "["
protected class LiteralArray_LeftSquareBracketKeyword_1 extends KeywordToken  {
	
	public LiteralArray_LeftSquareBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralArrayAccess().getLeftSquareBracketKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralArray_LiteralArrayAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (element+=Expression ("," element+=Expression)*)?
protected class LiteralArray_Group_2 extends GroupToken {
	
	public LiteralArray_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLiteralArrayAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralArray_Group_2_1(parent, this, 0, inst);
			case 1: return new LiteralArray_ElementAssignment_2_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// element+=Expression
protected class LiteralArray_ElementAssignment_2_0 extends AssignmentToken  {
	
	public LiteralArray_ElementAssignment_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralArrayAccess().getElementAssignment_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("element",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("element");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLiteralArrayAccess().getElementExpressionParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralArray_LeftSquareBracketKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," element+=Expression)*
protected class LiteralArray_Group_2_1 extends GroupToken {
	
	public LiteralArray_Group_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLiteralArrayAccess().getGroup_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralArray_ElementAssignment_2_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class LiteralArray_CommaKeyword_2_1_0 extends KeywordToken  {
	
	public LiteralArray_CommaKeyword_2_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralArrayAccess().getCommaKeyword_2_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralArray_Group_2_1(parent, this, 0, inst);
			case 1: return new LiteralArray_ElementAssignment_2_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// element+=Expression
protected class LiteralArray_ElementAssignment_2_1_1 extends AssignmentToken  {
	
	public LiteralArray_ElementAssignment_2_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralArrayAccess().getElementAssignment_2_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("element",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("element");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLiteralArrayAccess().getElementExpressionParserRuleCall_2_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralArray_CommaKeyword_2_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// "]"
protected class LiteralArray_RightSquareBracketKeyword_3 extends KeywordToken  {
	
	public LiteralArray_RightSquareBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralArrayAccess().getRightSquareBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralArray_Group_2(parent, this, 0, inst);
			case 1: return new LiteralArray_LeftSquareBracketKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule LiteralArray ****************/


/************ begin Rule LiteralObject ****************
 *
 * LiteralObject returns Expression:
 *   {LiteralObject} "{" (features+=Feature ("," features+=Feature)*)? "}";
 *
 **/

// {LiteralObject} "{" (features+=Feature ("," features+=Feature)*)? "}"
protected class LiteralObject_Group extends GroupToken {
	
	public LiteralObject_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLiteralObjectAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralObject_RightCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLiteralObjectRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {LiteralObject}
protected class LiteralObject_LiteralObjectAction_0 extends ActionToken  {

	public LiteralObject_LiteralObjectAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getLiteralObjectAccess().getLiteralObjectAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getLiteralObjectAccess().getLiteralObjectAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "{"
protected class LiteralObject_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public LiteralObject_LeftCurlyBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralObjectAccess().getLeftCurlyBracketKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralObject_LiteralObjectAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (features+=Feature ("," features+=Feature)*)?
protected class LiteralObject_Group_2 extends GroupToken {
	
	public LiteralObject_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLiteralObjectAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralObject_Group_2_1(parent, this, 0, inst);
			case 1: return new LiteralObject_FeaturesAssignment_2_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// features+=Feature
protected class LiteralObject_FeaturesAssignment_2_0 extends AssignmentToken  {
	
	public LiteralObject_FeaturesAssignment_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralObjectAccess().getFeaturesAssignment_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Feature_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("features",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("features");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFeatureRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLiteralObjectAccess().getFeaturesFeatureParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralObject_LeftCurlyBracketKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," features+=Feature)*
protected class LiteralObject_Group_2_1 extends GroupToken {
	
	public LiteralObject_Group_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLiteralObjectAccess().getGroup_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralObject_FeaturesAssignment_2_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class LiteralObject_CommaKeyword_2_1_0 extends KeywordToken  {
	
	public LiteralObject_CommaKeyword_2_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralObjectAccess().getCommaKeyword_2_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralObject_Group_2_1(parent, this, 0, inst);
			case 1: return new LiteralObject_FeaturesAssignment_2_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// features+=Feature
protected class LiteralObject_FeaturesAssignment_2_1_1 extends AssignmentToken  {
	
	public LiteralObject_FeaturesAssignment_2_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralObjectAccess().getFeaturesAssignment_2_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Feature_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("features",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("features");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFeatureRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLiteralObjectAccess().getFeaturesFeatureParserRuleCall_2_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralObject_CommaKeyword_2_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// "}"
protected class LiteralObject_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public LiteralObject_RightCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralObjectAccess().getRightCurlyBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralObject_Group_2(parent, this, 0, inst);
			case 1: return new LiteralObject_LeftCurlyBracketKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule LiteralObject ****************/


/************ begin Rule LiteralFunction ****************
 *
 * LiteralFunction returns Expression:
 *   {LiteralFunction} ("function"|"fun") "(" (parameters+=ID ("," parameters+=ID)*) ")" "{"
 *   statements=Statements "}";
 *
 **/

// {LiteralFunction} ("function"|"fun") "(" (parameters+=ID ("," parameters+=ID)*) ")" "{"
// statements=Statements "}"
protected class LiteralFunction_Group extends GroupToken {
	
	public LiteralFunction_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLiteralFunctionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralFunction_RightCurlyBracketKeyword_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLiteralFunctionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {LiteralFunction}
protected class LiteralFunction_LiteralFunctionAction_0 extends ActionToken  {

	public LiteralFunction_LiteralFunctionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getLiteralFunctionAccess().getLiteralFunctionAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getLiteralFunctionAccess().getLiteralFunctionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "function"|"fun"
protected class LiteralFunction_Alternatives_1 extends AlternativesToken {

	public LiteralFunction_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getLiteralFunctionAccess().getAlternatives_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralFunction_FunctionKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "function"
protected class LiteralFunction_FunctionKeyword_1_0 extends KeywordToken  {
	
	public LiteralFunction_FunctionKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralFunctionAccess().getFunctionKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralFunction_LiteralFunctionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "("
protected class LiteralFunction_LeftParenthesisKeyword_2 extends KeywordToken  {
	
	public LiteralFunction_LeftParenthesisKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralFunctionAccess().getLeftParenthesisKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralFunction_Alternatives_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// parameters+=ID ("," parameters+=ID)*
protected class LiteralFunction_Group_3 extends GroupToken {
	
	public LiteralFunction_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLiteralFunctionAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralFunction_Group_3_1(parent, this, 0, inst);
			case 1: return new LiteralFunction_ParametersAssignment_3_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// parameters+=ID
protected class LiteralFunction_ParametersAssignment_3_0 extends AssignmentToken  {
	
	public LiteralFunction_ParametersAssignment_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralFunctionAccess().getParametersAssignment_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralFunction_LeftParenthesisKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameters",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameters");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getLiteralFunctionAccess().getParametersIDTerminalRuleCall_3_0_0();
			return obj;
		}
		return null;
	}

}

// ("," parameters+=ID)*
protected class LiteralFunction_Group_3_1 extends GroupToken {
	
	public LiteralFunction_Group_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLiteralFunctionAccess().getGroup_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralFunction_ParametersAssignment_3_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class LiteralFunction_CommaKeyword_3_1_0 extends KeywordToken  {
	
	public LiteralFunction_CommaKeyword_3_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralFunctionAccess().getCommaKeyword_3_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralFunction_Group_3_1(parent, this, 0, inst);
			case 1: return new LiteralFunction_ParametersAssignment_3_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// parameters+=ID
protected class LiteralFunction_ParametersAssignment_3_1_1 extends AssignmentToken  {
	
	public LiteralFunction_ParametersAssignment_3_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralFunctionAccess().getParametersAssignment_3_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralFunction_CommaKeyword_3_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameters",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameters");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getLiteralFunctionAccess().getParametersIDTerminalRuleCall_3_1_1_0();
			return obj;
		}
		return null;
	}

}



// ")"
protected class LiteralFunction_RightParenthesisKeyword_4 extends KeywordToken  {
	
	public LiteralFunction_RightParenthesisKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralFunctionAccess().getRightParenthesisKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralFunction_Group_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class LiteralFunction_LeftCurlyBracketKeyword_5 extends KeywordToken  {
	
	public LiteralFunction_LeftCurlyBracketKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralFunctionAccess().getLeftCurlyBracketKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralFunction_RightParenthesisKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// statements=Statements
protected class LiteralFunction_StatementsAssignment_6 extends AssignmentToken  {
	
	public LiteralFunction_StatementsAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralFunctionAccess().getStatementsAssignment_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statements_StatementsAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementsRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLiteralFunctionAccess().getStatementsStatementsParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralFunction_LeftCurlyBracketKeyword_5(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class LiteralFunction_RightCurlyBracketKeyword_7 extends KeywordToken  {
	
	public LiteralFunction_RightCurlyBracketKeyword_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralFunctionAccess().getRightCurlyBracketKeyword_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralFunction_StatementsAssignment_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule LiteralFunction ****************/


/************ begin Rule Feature ****************
 *
 * Feature:
 *   {Feature} name=( ID | PID | STRING ) ":" value=Expression;
 *
 **/

// {Feature} name=( ID | PID | STRING ) ":" value=Expression
protected class Feature_Group extends GroupToken {
	
	public Feature_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFeatureAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Feature_ValueAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFeatureRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {Feature}
protected class Feature_FeatureAction_0 extends ActionToken  {

	public Feature_FeatureAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getFeatureAccess().getFeatureAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getFeatureAccess().getFeatureAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// name=( ID | PID | STRING )
protected class Feature_NameAssignment_1 extends AssignmentToken  {
	
	public Feature_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Feature_FeatureAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFeatureAccess().getNameIDTerminalRuleCall_1_0_0();
			return obj;
		}
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFeatureAccess().getNamePIDTerminalRuleCall_1_0_1();
			return obj;
		}
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFeatureAccess().getNameSTRINGTerminalRuleCall_1_0_2();
			return obj;
		}
		return null;
	}

}

// ":"
protected class Feature_ColonKeyword_2 extends KeywordToken  {
	
	public Feature_ColonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureAccess().getColonKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Feature_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// value=Expression
protected class Feature_ValueAssignment_3 extends AssignmentToken  {
	
	public Feature_ValueAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureAccess().getValueAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFeatureAccess().getValueExpressionParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Feature_ColonKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Feature ****************/


/************ begin Rule ValueLiteral ****************
 *
 * ValueLiteral returns Expression:
 *   BooleanLiteral|IntegerLiteral|NullLiteral|UndefinedLiteral|StringLiteral|
 *   RealLiteral|QueryLiteral;
 *
 **/

// BooleanLiteral|IntegerLiteral|NullLiteral|UndefinedLiteral|StringLiteral|
// RealLiteral|QueryLiteral
protected class ValueLiteral_Alternatives extends AlternativesToken {

	public ValueLiteral_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getValueLiteralAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ValueLiteral_BooleanLiteralParserRuleCall_0(parent, this, 0, inst);
			case 1: return new ValueLiteral_IntegerLiteralParserRuleCall_1(parent, this, 1, inst);
			case 2: return new ValueLiteral_NullLiteralParserRuleCall_2(parent, this, 2, inst);
			case 3: return new ValueLiteral_UndefinedLiteralParserRuleCall_3(parent, this, 3, inst);
			case 4: return new ValueLiteral_StringLiteralParserRuleCall_4(parent, this, 4, inst);
			case 5: return new ValueLiteral_RealLiteralParserRuleCall_5(parent, this, 5, inst);
			case 6: return new ValueLiteral_QueryLiteralParserRuleCall_6(parent, this, 6, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getValueLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// BooleanLiteral
protected class ValueLiteral_BooleanLiteralParserRuleCall_0 extends RuleCallToken {
	
	public ValueLiteral_BooleanLiteralParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getValueLiteralAccess().getBooleanLiteralParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BooleanLiteral_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(BooleanLiteral_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBooleanLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// IntegerLiteral
protected class ValueLiteral_IntegerLiteralParserRuleCall_1 extends RuleCallToken {
	
	public ValueLiteral_IntegerLiteralParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getValueLiteralAccess().getIntegerLiteralParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntegerLiteral_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(IntegerLiteral_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getIntegerLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// NullLiteral
protected class ValueLiteral_NullLiteralParserRuleCall_2 extends RuleCallToken {
	
	public ValueLiteral_NullLiteralParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getValueLiteralAccess().getNullLiteralParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NullLiteral_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(NullLiteral_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getNullLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// UndefinedLiteral
protected class ValueLiteral_UndefinedLiteralParserRuleCall_3 extends RuleCallToken {
	
	public ValueLiteral_UndefinedLiteralParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getValueLiteralAccess().getUndefinedLiteralParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UndefinedLiteral_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UndefinedLiteral_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUndefinedLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// StringLiteral
protected class ValueLiteral_StringLiteralParserRuleCall_4 extends RuleCallToken {
	
	public ValueLiteral_StringLiteralParserRuleCall_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getValueLiteralAccess().getStringLiteralParserRuleCall_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringLiteral_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(StringLiteral_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getStringLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// RealLiteral
protected class ValueLiteral_RealLiteralParserRuleCall_5 extends RuleCallToken {
	
	public ValueLiteral_RealLiteralParserRuleCall_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getValueLiteralAccess().getRealLiteralParserRuleCall_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RealLiteral_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RealLiteral_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRealLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// QueryLiteral
protected class ValueLiteral_QueryLiteralParserRuleCall_6 extends RuleCallToken {
	
	public ValueLiteral_QueryLiteralParserRuleCall_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getValueLiteralAccess().getQueryLiteralParserRuleCall_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new QueryLiteral_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(QueryLiteral_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getQueryLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ValueLiteral ****************/


/************ begin Rule BooleanLiteral ****************
 *
 * BooleanLiteral returns Expression:
 *   {BooleanLiteral} val=( "true" | "false" ); 
 * 	
 *              
 * // TODO: Hex is a string until an int converter is written for it
 *
 **/

// {BooleanLiteral} val=( "true" | "false" )
protected class BooleanLiteral_Group extends GroupToken {
	
	public BooleanLiteral_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBooleanLiteralAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BooleanLiteral_ValAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBooleanLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {BooleanLiteral}
protected class BooleanLiteral_BooleanLiteralAction_0 extends ActionToken  {

	public BooleanLiteral_BooleanLiteralAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// val=( "true" | "false" )
protected class BooleanLiteral_ValAssignment_1 extends AssignmentToken  {
	
	public BooleanLiteral_ValAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBooleanLiteralAccess().getValAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BooleanLiteral_BooleanLiteralAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val");
		if("true".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getBooleanLiteralAccess().getValTrueKeyword_1_0_0();
			return obj;
		}
		if("false".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getBooleanLiteralAccess().getValFalseKeyword_1_0_1();
			return obj;
		}
		return null;
	}

}


/************ end Rule BooleanLiteral ****************/


/************ begin Rule IntegerLiteral ****************
 *
 * IntegerLiteral returns Expression:
 *   {IntegerLiteral} ival=INT|sval=HEX; 
 * // TODO: Hex is a string until an int converter is written for it
 *
 **/

// {IntegerLiteral} ival=INT|sval=HEX 
// // TODO: Hex is a string until an int converter is written for it
protected class IntegerLiteral_Alternatives extends AlternativesToken {

	public IntegerLiteral_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getIntegerLiteralAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntegerLiteral_Group_0(parent, this, 0, inst);
			case 1: return new IntegerLiteral_SvalAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getIntegerLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {IntegerLiteral} ival=INT
protected class IntegerLiteral_Group_0 extends GroupToken {
	
	public IntegerLiteral_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getIntegerLiteralAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntegerLiteral_IvalAssignment_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {IntegerLiteral}
protected class IntegerLiteral_IntegerLiteralAction_0_0 extends ActionToken  {

	public IntegerLiteral_IntegerLiteralAction_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getIntegerLiteralAccess().getIntegerLiteralAction_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getIntegerLiteralAccess().getIntegerLiteralAction_0_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// ival=INT
protected class IntegerLiteral_IvalAssignment_0_1 extends AssignmentToken  {
	
	public IntegerLiteral_IvalAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getIntegerLiteralAccess().getIvalAssignment_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntegerLiteral_IntegerLiteralAction_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("ival",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("ival");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getIntegerLiteralAccess().getIvalINTTerminalRuleCall_0_1_0();
			return obj;
		}
		return null;
	}

}


// sval=HEX
protected class IntegerLiteral_SvalAssignment_1 extends AssignmentToken  {
	
	public IntegerLiteral_SvalAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getIntegerLiteralAccess().getSvalAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("sval",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("sval");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getIntegerLiteralAccess().getSvalHEXTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule IntegerLiteral ****************/


/************ begin Rule NullLiteral ****************
 *
 * NullLiteral returns Expression:
 *   {NullLiteral} val="null"; 
 * 	        
 * // Not a keyword in JS, but prevention of reassignment is wanted.
 *
 **/

// {NullLiteral} val="null"
protected class NullLiteral_Group extends GroupToken {
	
	public NullLiteral_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getNullLiteralAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NullLiteral_ValAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getNullLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {NullLiteral}
protected class NullLiteral_NullLiteralAction_0 extends ActionToken  {

	public NullLiteral_NullLiteralAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getNullLiteralAccess().getNullLiteralAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getNullLiteralAccess().getNullLiteralAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// val="null"
protected class NullLiteral_ValAssignment_1 extends AssignmentToken  {
	
	public NullLiteral_ValAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNullLiteralAccess().getValAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NullLiteral_NullLiteralAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val");
		if("null".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getNullLiteralAccess().getValNullKeyword_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule NullLiteral ****************/


/************ begin Rule UndefinedLiteral ****************
 *
 * UndefinedLiteral returns Expression:
 *   {UndefinedLiteral} val="undefined"; 
 * // Not a keyword in JS, but prevention of reassignment is wanted.
 *
 **/

// {UndefinedLiteral} val="undefined"
protected class UndefinedLiteral_Group extends GroupToken {
	
	public UndefinedLiteral_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUndefinedLiteralAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UndefinedLiteral_ValAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUndefinedLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {UndefinedLiteral}
protected class UndefinedLiteral_UndefinedLiteralAction_0 extends ActionToken  {

	public UndefinedLiteral_UndefinedLiteralAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getUndefinedLiteralAccess().getUndefinedLiteralAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getUndefinedLiteralAccess().getUndefinedLiteralAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// val="undefined"
protected class UndefinedLiteral_ValAssignment_1 extends AssignmentToken  {
	
	public UndefinedLiteral_ValAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUndefinedLiteralAccess().getValAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UndefinedLiteral_UndefinedLiteralAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val");
		if("undefined".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getUndefinedLiteralAccess().getValUndefinedKeyword_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule UndefinedLiteral ****************/


/************ begin Rule StringLiteral ****************
 *
 * StringLiteral returns Expression:
 *   {StringLiteral} val=STRING;
 *
 **/

// {StringLiteral} val=STRING
protected class StringLiteral_Group extends GroupToken {
	
	public StringLiteral_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStringLiteralAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringLiteral_ValAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getStringLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {StringLiteral}
protected class StringLiteral_StringLiteralAction_0 extends ActionToken  {

	public StringLiteral_StringLiteralAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getStringLiteralAccess().getStringLiteralAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getStringLiteralAccess().getStringLiteralAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// val=STRING
protected class StringLiteral_ValAssignment_1 extends AssignmentToken  {
	
	public StringLiteral_ValAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStringLiteralAccess().getValAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringLiteral_StringLiteralAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getStringLiteralAccess().getValSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule StringLiteral ****************/


/************ begin Rule RealLiteral ****************
 *
 * RealLiteral returns Expression:
 *   {RealLiteral} val=RealValue;
 *
 **/

// {RealLiteral} val=RealValue
protected class RealLiteral_Group extends GroupToken {
	
	public RealLiteral_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRealLiteralAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RealLiteral_ValAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRealLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {RealLiteral}
protected class RealLiteral_RealLiteralAction_0 extends ActionToken  {

	public RealLiteral_RealLiteralAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getRealLiteralAccess().getRealLiteralAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getRealLiteralAccess().getRealLiteralAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// val=RealValue
protected class RealLiteral_ValAssignment_1 extends AssignmentToken  {
	
	public RealLiteral_ValAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRealLiteralAccess().getValAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RealLiteral_RealLiteralAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getRealLiteralAccess().getValRealValueParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule RealLiteral ****************/



/************ begin Rule RegexpLiteral ****************
 *
 * RegexpLiteral returns Expression:
 *   {RegexpLiteral} val=REGEX;
 *
 **/

// {RegexpLiteral} val=REGEX
protected class RegexpLiteral_Group extends GroupToken {
	
	public RegexpLiteral_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRegexpLiteralAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RegexpLiteral_ValAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRegexpLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {RegexpLiteral}
protected class RegexpLiteral_RegexpLiteralAction_0 extends ActionToken  {

	public RegexpLiteral_RegexpLiteralAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getRegexpLiteralAccess().getRegexpLiteralAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getRegexpLiteralAccess().getRegexpLiteralAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// val=REGEX
protected class RegexpLiteral_ValAssignment_1 extends AssignmentToken  {
	
	public RegexpLiteral_ValAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRegexpLiteralAccess().getValAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RegexpLiteral_RegexpLiteralAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getRegexpLiteralAccess().getValREGEXTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule RegexpLiteral ****************/


/************ begin Rule QueryLiteral ****************
 *
 * QueryLiteral returns Expression:
 *   {QueryLiteral} "query" "{" val=AdvicePath "}";
 *
 **/

// {QueryLiteral} "query" "{" val=AdvicePath "}"
protected class QueryLiteral_Group extends GroupToken {
	
	public QueryLiteral_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getQueryLiteralAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new QueryLiteral_RightCurlyBracketKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getQueryLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {QueryLiteral}
protected class QueryLiteral_QueryLiteralAction_0 extends ActionToken  {

	public QueryLiteral_QueryLiteralAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getQueryLiteralAccess().getQueryLiteralAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getQueryLiteralAccess().getQueryLiteralAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "query"
protected class QueryLiteral_QueryKeyword_1 extends KeywordToken  {
	
	public QueryLiteral_QueryKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getQueryLiteralAccess().getQueryKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new QueryLiteral_QueryLiteralAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class QueryLiteral_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public QueryLiteral_LeftCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getQueryLiteralAccess().getLeftCurlyBracketKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new QueryLiteral_QueryKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// val=AdvicePath
protected class QueryLiteral_ValAssignment_3 extends AssignmentToken  {
	
	public QueryLiteral_ValAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getQueryLiteralAccess().getValAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePath_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAdvicePathRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getQueryLiteralAccess().getValAdvicePathParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new QueryLiteral_LeftCurlyBracketKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class QueryLiteral_RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public QueryLiteral_RightCurlyBracketKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getQueryLiteralAccess().getRightCurlyBracketKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new QueryLiteral_ValAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule QueryLiteral ****************/


/************ begin Rule ParanthesizedExpression ****************
 *
 * ParanthesizedExpression returns Expression:
 *   "(" Expression ")";
 *
 **/

// "(" Expression ")"
protected class ParanthesizedExpression_Group extends GroupToken {
	
	public ParanthesizedExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getParanthesizedExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParanthesizedExpression_RightParenthesisKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getParanthesizedExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "("
protected class ParanthesizedExpression_LeftParenthesisKeyword_0 extends KeywordToken  {
	
	public ParanthesizedExpression_LeftParenthesisKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getParanthesizedExpressionAccess().getLeftParenthesisKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// Expression
protected class ParanthesizedExpression_ExpressionParserRuleCall_1 extends RuleCallToken {
	
	public ParanthesizedExpression_ExpressionParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getParanthesizedExpressionAccess().getExpressionParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Expression_AssignmentExpressionParserRuleCall.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParanthesizedExpression_LeftParenthesisKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// ")"
protected class ParanthesizedExpression_RightParenthesisKeyword_2 extends KeywordToken  {
	
	public ParanthesizedExpression_RightParenthesisKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getParanthesizedExpressionAccess().getRightParenthesisKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParanthesizedExpression_ExpressionParserRuleCall_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ParanthesizedExpression ****************/


/************ begin Rule Version ****************
 *
 * Version:
 *   original=STRING|original=AlfanumSym; 	
 * 
 *     
 * 	    
 * 	  
 * 	
 * 
 * / *
 * ** VersionRange TODO: Uses two instances of Version. This works because use of [ ]  ( ) in Version must be 
 * ** escaped with " ". Omni
 * ** version uses version strings with \[ when a range is presented/parsed in string format.
 * * /
 *
 **/

// original=STRING|original=AlfanumSym 	
// 
//     
// 	    
// 	  
// 	
// 
// / *
// ** VersionRange TODO: Uses two instances of Version. This works because use of [ ]  ( ) in Version must be 
// ** escaped with " ". Omni
// ** version uses version strings with \[ when a range is presented/parsed in string format.
// * /
protected class Version_Alternatives extends AlternativesToken {

	public Version_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getVersionAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Version_OriginalAssignment_0(parent, this, 0, inst);
			case 1: return new Version_OriginalAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getVersionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// original=STRING
protected class Version_OriginalAssignment_0 extends AssignmentToken  {
	
	public Version_OriginalAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVersionAccess().getOriginalAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("original",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("original");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getVersionAccess().getOriginalSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// original=AlfanumSym
protected class Version_OriginalAssignment_1 extends AssignmentToken  {
	
	public Version_OriginalAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVersionAccess().getOriginalAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("original",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("original");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getVersionAccess().getOriginalAlfanumSymParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Version ****************/


/************ begin Rule VersionRange ****************
 *
 * VersionRange:
 *   minLimit=( "[" | "(" ) min=Version ("," max=Version)? maxLimit=( "]" | ")" )|min=Version; 
 * 
 * / *
 * ** VersionRange TODO: Uses two instances of Version. This works because use of [ ]  ( ) in Version must be 
 * ** escaped with " ". Omni
 * ** version uses version strings with \[ when a range is presented/parsed in string format.
 * * /
 *     
 * 	              
 * 	  
 * 	
 * 
 * // Qualified name
 * // TODO: Needs to disallow whie space between ID and '.', and no embedded comments. A bug in xtext prevents using hidden() here.
 * //
 *
 **/

// minLimit=( "[" | "(" ) min=Version ("," max=Version)? maxLimit=( "]" | ")" )|min=Version 
// 
// / *
// ** VersionRange TODO: Uses two instances of Version. This works because use of [ ]  ( ) in Version must be 
// ** escaped with " ". Omni
// ** version uses version strings with \[ when a range is presented/parsed in string format.
// * /
//     
// 	              
// 	  
// 	
// 
// // Qualified name
// // TODO: Needs to disallow whie space between ID and '.', and no embedded comments. A bug in xtext prevents using hidden() here.
// //
protected class VersionRange_Alternatives extends AlternativesToken {

	public VersionRange_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getVersionRangeAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VersionRange_Group_0(parent, this, 0, inst);
			case 1: return new VersionRange_MinAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getVersionRangeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// minLimit=( "[" | "(" ) min=Version ("," max=Version)? maxLimit=( "]" | ")" )
protected class VersionRange_Group_0 extends GroupToken {
	
	public VersionRange_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getVersionRangeAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VersionRange_MaxLimitAssignment_0_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// minLimit=( "[" | "(" )
protected class VersionRange_MinLimitAssignment_0_0 extends AssignmentToken  {
	
	public VersionRange_MinLimitAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVersionRangeAccess().getMinLimitAssignment_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("minLimit",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("minLimit");
		if("[".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getVersionRangeAccess().getMinLimitLeftSquareBracketKeyword_0_0_0_0();
			return obj;
		}
		if("(".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getVersionRangeAccess().getMinLimitLeftParenthesisKeyword_0_0_0_1();
			return obj;
		}
		return null;
	}

}

// min=Version
protected class VersionRange_MinAssignment_0_1 extends AssignmentToken  {
	
	public VersionRange_MinAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVersionRangeAccess().getMinAssignment_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Version_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("min",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("min");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVersionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getVersionRangeAccess().getMinVersionParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new VersionRange_MinLimitAssignment_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," max=Version)?
protected class VersionRange_Group_0_2 extends GroupToken {
	
	public VersionRange_Group_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getVersionRangeAccess().getGroup_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VersionRange_MaxAssignment_0_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class VersionRange_CommaKeyword_0_2_0 extends KeywordToken  {
	
	public VersionRange_CommaKeyword_0_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getVersionRangeAccess().getCommaKeyword_0_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VersionRange_MinAssignment_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// max=Version
protected class VersionRange_MaxAssignment_0_2_1 extends AssignmentToken  {
	
	public VersionRange_MaxAssignment_0_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVersionRangeAccess().getMaxAssignment_0_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Version_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("max",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("max");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVersionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getVersionRangeAccess().getMaxVersionParserRuleCall_0_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new VersionRange_CommaKeyword_0_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// maxLimit=( "]" | ")" )
protected class VersionRange_MaxLimitAssignment_0_3 extends AssignmentToken  {
	
	public VersionRange_MaxLimitAssignment_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVersionRangeAccess().getMaxLimitAssignment_0_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VersionRange_Group_0_2(parent, this, 0, inst);
			case 1: return new VersionRange_MinAssignment_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("maxLimit",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("maxLimit");
		if("]".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getVersionRangeAccess().getMaxLimitRightSquareBracketKeyword_0_3_0_0();
			return obj;
		}
		if(")".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getVersionRangeAccess().getMaxLimitRightParenthesisKeyword_0_3_0_1();
			return obj;
		}
		return null;
	}

}


// min=Version
protected class VersionRange_MinAssignment_1 extends AssignmentToken  {
	
	public VersionRange_MinAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVersionRangeAccess().getMinAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Version_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("min",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("min");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVersionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getVersionRangeAccess().getMinVersionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule VersionRange ****************/












}
