/*
* generated by Xtext
*/
package org.eclipse.b3.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.b3.services.BeeLangGrammarAccess;

import com.google.inject.Inject;

public class BeeLangParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private BeeLangGrammarAccess grammarAccess;
		
	public BeeLangGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BeeModel_Group(this, this, 0, inst);
			case 1: return new Import_Group(this, this, 1, inst);
			case 2: return new Unit_Group(this, this, 2, inst);
			case 3: return new ProvidedCapability_Group(this, this, 3, inst);
			case 4: return new RequiredCapability_Group(this, this, 4, inst);
			case 5: return new StringProperty_Alternatives(this, this, 5, inst);
			case 6: return new StringProperty2_Alternatives(this, this, 6, inst);
			case 7: return new PropertyExpression_ExpressionParserRuleCall(this, this, 7, inst);
			case 8: return new Synchronization_Group(this, this, 8, inst);
			case 9: return new BuildPart_Alternatives(this, this, 9, inst);
			case 10: return new Artifacts_Group(this, this, 10, inst);
			case 11: return new PathGroup_Group(this, this, 11, inst);
			case 12: return new Group_Group(this, this, 12, inst);
			case 13: return new Prerequisite_Group(this, this, 13, inst);
			case 14: return new Closure_Group(this, this, 14, inst);
			case 15: return new PrerequisiteEntry_Alternatives(this, this, 15, inst);
			case 16: return new PartInSelf_PartNameAssignment(this, this, 16, inst);
			case 17: return new CapabilityReferencedPart_Alternatives(this, this, 17, inst);
			case 18: return new CompoundReferences_Group(this, this, 18, inst);
			case 19: return new Action_Group(this, this, 19, inst);
			case 20: return new Parameter_Group(this, this, 20, inst);
			case 21: return new Result_Group(this, this, 21, inst);
			case 22: return new ResultPart_Alternatives(this, this, 22, inst);
			case 23: return new BasicResult_Group(this, this, 23, inst);
			case 24: return new ResultGroup_Group(this, this, 24, inst);
			case 25: return new RepositoryConfiguration_Group(this, this, 25, inst);
			case 26: return new NamedAdvice_Group(this, this, 26, inst);
			case 27: return new CompoundAdvice_Group(this, this, 27, inst);
			case 28: return new AdviceStatement_Group(this, this, 28, inst);
			case 29: return new AdvicePath_Group(this, this, 29, inst);
			case 30: return new AdvicePathSeparator_AdvicePathChildrenParserRuleCall(this, this, 30, inst);
			case 31: return new AdvicePathChildren_Group(this, this, 31, inst);
			case 32: return new AdvicePathElement_Alternatives(this, this, 32, inst);
			case 33: return new Filter_Group(this, this, 33, inst);
			case 34: return new PreConditionAssert_Group(this, this, 34, inst);
			case 35: return new PostConditionAssert_Group(this, this, 35, inst);
			case 36: return new AssertionExpression_Group(this, this, 36, inst);
			case 37: return new SyntaxElement_ExpressionParserRuleCall(this, this, 37, inst);
			case 38: return new Expression_ValueExpressionParserRuleCall(this, this, 38, inst);
			case 39: return new ValueExpression_ValueAssignment(this, this, 39, inst);
			case 40: return new OrExpression_Group(this, this, 40, inst);
			case 41: return new AndExpression_Group(this, this, 41, inst);
			case 42: return new RelationalExpression_Group(this, this, 42, inst);
			case 43: return new AdditiveExpression_Group(this, this, 43, inst);
			case 44: return new MultiplicativeExpression_Group(this, this, 44, inst);
			case 45: return new UnaryOrInfixExpression_Alternatives(this, this, 45, inst);
			case 46: return new UnaryExpression_Group(this, this, 46, inst);
			case 47: return new InfixExpression_Group(this, this, 47, inst);
			case 48: return new PrimaryExpression_Alternatives(this, this, 48, inst);
			case 49: return new Literal_Alternatives(this, this, 49, inst);
			case 50: return new BooleanLiteral_ValAssignment(this, this, 50, inst);
			case 51: return new IntegerLiteral_ValAssignment(this, this, 51, inst);
			case 52: return new NullLiteral_ValAssignment(this, this, 52, inst);
			case 53: return new StringLiteral_ValAssignment(this, this, 53, inst);
			case 54: return new ParanthesizedExpression_Group(this, this, 54, inst);
			case 55: return new GlobalVarExpression_NameAssignment(this, this, 55, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule BeeModel ****************
 *
 * BeeModel:
 *   imports+=Import* body=Unit; 
 * 
 *   
 * 	    
 * 	    
 * 
 * / *
 * ** Qualified name
 * ** TODO: Needs to disallow whie space between ID and '.', and no embedded comments. A bug in xtext prevents using hidden() here.
 * * /
 *
 **/

// imports+=Import* body=Unit
protected class BeeModel_Group extends GroupToken {
	
	public BeeModel_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBeeModelAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BeeModel_BodyAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBeeModelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// imports+=Import*
protected class BeeModel_ImportsAssignment_0 extends AssignmentToken  {
	
	public BeeModel_ImportsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBeeModelAccess().getImportsAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("imports",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("imports");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBeeModelAccess().getImportsImportParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BeeModel_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// body=Unit
protected class BeeModel_BodyAssignment_1 extends AssignmentToken  {
	
	public BeeModel_BodyAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBeeModelAccess().getBodyAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("body",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUnitRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBeeModelAccess().getBodyUnitParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BeeModel_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}


/************ end Rule BeeModel ****************/












/************ begin Rule Import ****************
 *
 * Import:
 *   "import" importClass=QualifiedName ".*"? ";"; 
 * 
 * / *
 * ** Import
 * ** TODO: Is specified as import of URI, a String, should be QID
 * * /	
 *   
 * 	         
 * 		
 * / * UNIT - the body (compare to java class)
 * * /
 *
 **/

// "import" importClass=QualifiedName ".*"? ";"
protected class Import_Group extends GroupToken {
	
	public Import_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getImportAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_SemicolonKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "import"
protected class Import_ImportKeyword_0 extends KeywordToken  {
	
	public Import_ImportKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getImportAccess().getImportKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// importClass=QualifiedName
protected class Import_ImportClassAssignment_1 extends AssignmentToken  {
	
	public Import_ImportClassAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getImportAccess().getImportClassAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_ImportKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("importClass",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("importClass");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getImportAccess().getImportClassQualifiedNameParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Import_SemicolonKeyword_3 extends KeywordToken  {
	
	public Import_SemicolonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getImportAccess().getSemicolonKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_ImportClassAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Import ****************/


/************ begin Rule Unit ****************
 *
 * Unit returns BuildUnit hidden ( WS , ML_COMMENT , SL_COMMENT ):
 *   synchronized?="synchronized"? "unit" name=UnitName? ("version" version=Version)? (
 *   "implements" implements+=InterfaceName ("," implements+=InterfaceName)*)? "{" (
 *   "provides" "{" (providedCapability+=ProvidedCapability ";")+ "}"|"provides"
 *   providedCapability+=ProvidedCapability ";"|"requires" "{" (requiredCapabilities+=
 *   RequiredCapability ";")+ "}"|"requires" requiredCapabilities+=RequiredCapability ";"
 *   |"meta" "requires" "{" (metaRequiredCapabilities+=RequiredCapability ";")+ "}"|"meta"
 *   "requires" metaRequiredCapabilities+=RequiredCapability ";"|"properties" "{" (
 *   "unset" unsetProperties+=QualifiedName ";"|setProperties+=StringProperty)+ "}"|
 *   "unset" "property" unsetProperties+=QualifiedName ";"|setProperties+=
 *   StringProperty2|"advice" advice+=NamedAdvice|"synchronize" "{" synchronize+=
 *   Synchronization+ "}"|"synchronize" synchronize+=Synchronization|parts+=BuildPart|
 *   "repositories" "{" repositoryConfig+=RepositoryConfiguration* "}")* "}";  
 * 		
 * / * UNIT - the body (compare to java class)
 * * /	
 *             
 * 	    
 * 	          
 * 		           
 * 	
 * 		 	 //-- PROVIDES
 * 			               
 * 			          
 * 			//-- REQUIRES & META REQUIRES
 * 			               
 * 			          
 * 			                  
 * 			            
 * 			//-- PROPERTIES
 * 			                            
 * 			              
 * 			      
 * 			//--ADVICE
 * 			       
 * 			//--SYNCHRONIZE
 * 			                  
 * 			           
 * 			//--PARTS
 * 			         			
 * 			//-- REPOSITORIES
 *
 **/

// synchronized?="synchronized"? "unit" name=UnitName? ("version" version=Version)? (
// "implements" implements+=InterfaceName ("," implements+=InterfaceName)*)? "{" (
// "provides" "{" (providedCapability+=ProvidedCapability ";")+ "}"|"provides"
// providedCapability+=ProvidedCapability ";"|"requires" "{" (requiredCapabilities+=
// RequiredCapability ";")+ "}"|"requires" requiredCapabilities+=RequiredCapability ";"
// |"meta" "requires" "{" (metaRequiredCapabilities+=RequiredCapability ";")+ "}"|"meta"
// "requires" metaRequiredCapabilities+=RequiredCapability ";"|"properties" "{" (
// "unset" unsetProperties+=QualifiedName ";"|setProperties+=StringProperty)+ "}"|
// "unset" "property" unsetProperties+=QualifiedName ";"|setProperties+=
// StringProperty2|"advice" advice+=NamedAdvice|"synchronize" "{" synchronize+=
// Synchronization+ "}"|"synchronize" synchronize+=Synchronization|parts+=BuildPart|
// "repositories" "{" repositoryConfig+=RepositoryConfiguration* "}")* "}" 
// 	    
// 	          
// 		           
// 	
// 		 	 //-- PROVIDES
// 			               
// 			          
// 			//-- REQUIRES & META REQUIRES
// 			               
// 			          
// 			                  
// 			            
// 			//-- PROPERTIES
// 			                            
// 			              
// 			      
// 			//--ADVICE
// 			       
// 			//--SYNCHRONIZE
// 			                  
// 			           
// 			//--PARTS
// 			         			
// 			//-- REPOSITORIES
protected class Unit_Group extends GroupToken {
	
	public Unit_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RightCurlyBracketKeyword_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnitRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// synchronized?="synchronized"?
protected class Unit_SynchronizedAssignment_0 extends AssignmentToken  {
	
	public Unit_SynchronizedAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getSynchronizedAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("synchronized",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("synchronized");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getUnitAccess().getSynchronizedSynchronizedKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// "unit"
protected class Unit_UnitKeyword_1 extends KeywordToken  {
	
	public Unit_UnitKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getUnitKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SynchronizedAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=UnitName?
protected class Unit_NameAssignment_2 extends AssignmentToken  {
	
	public Unit_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_UnitKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getUnitAccess().getNameUnitNameParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ("version" version=Version)?
protected class Unit_Group_3 extends GroupToken {
	
	public Unit_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_VersionAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "version"
protected class Unit_VersionKeyword_3_0 extends KeywordToken  {
	
	public Unit_VersionKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getVersionKeyword_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_NameAssignment_2(parent, this, 0, inst);
			case 1: return new Unit_UnitKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// version=Version
protected class Unit_VersionAssignment_3_1 extends AssignmentToken  {
	
	public Unit_VersionAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getVersionAssignment_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_VersionKeyword_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("version",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("version");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getUnitAccess().getVersionVersionParserRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}


// ("implements" implements+=InterfaceName ("," implements+=InterfaceName)*)?
protected class Unit_Group_4 extends GroupToken {
	
	public Unit_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_4_2(parent, this, 0, inst);
			case 1: return new Unit_ImplementsAssignment_4_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "implements"
protected class Unit_ImplementsKeyword_4_0 extends KeywordToken  {
	
	public Unit_ImplementsKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getImplementsKeyword_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_3(parent, this, 0, inst);
			case 1: return new Unit_NameAssignment_2(parent, this, 1, inst);
			case 2: return new Unit_UnitKeyword_1(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// implements+=InterfaceName
protected class Unit_ImplementsAssignment_4_1 extends AssignmentToken  {
	
	public Unit_ImplementsAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getImplementsAssignment_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_ImplementsKeyword_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("implements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("implements");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getUnitAccess().getImplementsInterfaceNameParserRuleCall_4_1_0();
			return obj;
		}
		return null;
	}

}

// ("," implements+=InterfaceName)*
protected class Unit_Group_4_2 extends GroupToken {
	
	public Unit_Group_4_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_4_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_ImplementsAssignment_4_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Unit_CommaKeyword_4_2_0 extends KeywordToken  {
	
	public Unit_CommaKeyword_4_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getCommaKeyword_4_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_4_2(parent, this, 0, inst);
			case 1: return new Unit_ImplementsAssignment_4_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// implements+=InterfaceName
protected class Unit_ImplementsAssignment_4_2_1 extends AssignmentToken  {
	
	public Unit_ImplementsAssignment_4_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getImplementsAssignment_4_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_CommaKeyword_4_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("implements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("implements");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getUnitAccess().getImplementsInterfaceNameParserRuleCall_4_2_1_0();
			return obj;
		}
		return null;
	}

}



// "{"
protected class Unit_LeftCurlyBracketKeyword_5 extends KeywordToken  {
	
	public Unit_LeftCurlyBracketKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_4(parent, this, 0, inst);
			case 1: return new Unit_Group_3(parent, this, 1, inst);
			case 2: return new Unit_NameAssignment_2(parent, this, 2, inst);
			case 3: return new Unit_UnitKeyword_1(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}

// ("provides" "{" (providedCapability+=ProvidedCapability ";")+ "}"|"provides"
// providedCapability+=ProvidedCapability ";"|"requires" "{" (requiredCapabilities+=
// RequiredCapability ";")+ "}"|"requires" requiredCapabilities+=RequiredCapability ";"
// |"meta" "requires" "{" (metaRequiredCapabilities+=RequiredCapability ";")+ "}"|"meta"
// "requires" metaRequiredCapabilities+=RequiredCapability ";"|"properties" "{" (
// "unset" unsetProperties+=QualifiedName ";"|setProperties+=StringProperty)+ "}"|
// "unset" "property" unsetProperties+=QualifiedName ";"|setProperties+=
// StringProperty2|"advice" advice+=NamedAdvice|"synchronize" "{" synchronize+=
// Synchronization+ "}"|"synchronize" synchronize+=Synchronization|parts+=BuildPart|
// "repositories" "{" repositoryConfig+=RepositoryConfiguration* "}")* 
// 		 	 //-- PROVIDES
// 			               
// 			          
// 			//-- REQUIRES & META REQUIRES
// 			               
// 			          
// 			                  
// 			            
// 			//-- PROPERTIES
// 			                            
// 			              
// 			      
// 			//--ADVICE
// 			       
// 			//--SYNCHRONIZE
// 			                  
// 			           
// 			//--PARTS
// 			         			
// 			//-- REPOSITORIES
protected class Unit_Alternatives_6 extends AlternativesToken {

	public Unit_Alternatives_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getUnitAccess().getAlternatives_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_6_0(parent, this, 0, inst);
			case 1: return new Unit_Group_6_1(parent, this, 1, inst);
			case 2: return new Unit_Group_6_2(parent, this, 2, inst);
			case 3: return new Unit_Group_6_3(parent, this, 3, inst);
			case 4: return new Unit_Group_6_4(parent, this, 4, inst);
			case 5: return new Unit_Group_6_5(parent, this, 5, inst);
			case 6: return new Unit_Group_6_6(parent, this, 6, inst);
			case 7: return new Unit_Group_6_7(parent, this, 7, inst);
			case 8: return new Unit_SetPropertiesAssignment_6_8(parent, this, 8, inst);
			case 9: return new Unit_Group_6_9(parent, this, 9, inst);
			case 10: return new Unit_Group_6_10(parent, this, 10, inst);
			case 11: return new Unit_Group_6_11(parent, this, 11, inst);
			case 12: return new Unit_PartsAssignment_6_12(parent, this, 12, inst);
			case 13: return new Unit_Group_6_13(parent, this, 13, inst);
			default: return null;
		}	
	}	
		
}

// "provides" "{" (providedCapability+=ProvidedCapability ";")+ "}"
protected class Unit_Group_6_0 extends GroupToken {
	
	public Unit_Group_6_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_6_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RightCurlyBracketKeyword_6_0_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "provides"
protected class Unit_ProvidesKeyword_6_0_0 extends KeywordToken  {
	
	public Unit_ProvidesKeyword_6_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getProvidesKeyword_6_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_6(parent, this, 0, inst);
			case 1: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Unit_LeftCurlyBracketKeyword_6_0_1 extends KeywordToken  {
	
	public Unit_LeftCurlyBracketKeyword_6_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_6_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_ProvidesKeyword_6_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (providedCapability+=ProvidedCapability ";")+
protected class Unit_Group_6_0_2 extends GroupToken {
	
	public Unit_Group_6_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_6_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SemicolonKeyword_6_0_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// providedCapability+=ProvidedCapability
protected class Unit_ProvidedCapabilityAssignment_6_0_2_0 extends AssignmentToken  {
	
	public Unit_ProvidedCapabilityAssignment_6_0_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getProvidedCapabilityAssignment_6_0_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("providedCapability",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("providedCapability");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProvidedCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getProvidedCapabilityProvidedCapabilityParserRuleCall_6_0_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_Group_6_0_2(parent, next, actIndex, consumed);
			case 1: return new Unit_LeftCurlyBracketKeyword_6_0_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Unit_SemicolonKeyword_6_0_2_1 extends KeywordToken  {
	
	public Unit_SemicolonKeyword_6_0_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSemicolonKeyword_6_0_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_ProvidedCapabilityAssignment_6_0_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "}"
protected class Unit_RightCurlyBracketKeyword_6_0_3 extends KeywordToken  {
	
	public Unit_RightCurlyBracketKeyword_6_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_6_0_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_6_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "provides" providedCapability+=ProvidedCapability ";"
protected class Unit_Group_6_1 extends GroupToken {
	
	public Unit_Group_6_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_6_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SemicolonKeyword_6_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "provides"
protected class Unit_ProvidesKeyword_6_1_0 extends KeywordToken  {
	
	public Unit_ProvidesKeyword_6_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getProvidesKeyword_6_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_6(parent, this, 0, inst);
			case 1: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// providedCapability+=ProvidedCapability
protected class Unit_ProvidedCapabilityAssignment_6_1_1 extends AssignmentToken  {
	
	public Unit_ProvidedCapabilityAssignment_6_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getProvidedCapabilityAssignment_6_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("providedCapability",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("providedCapability");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProvidedCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getProvidedCapabilityProvidedCapabilityParserRuleCall_6_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_ProvidesKeyword_6_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Unit_SemicolonKeyword_6_1_2 extends KeywordToken  {
	
	public Unit_SemicolonKeyword_6_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSemicolonKeyword_6_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_ProvidedCapabilityAssignment_6_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "requires" "{" (requiredCapabilities+=RequiredCapability ";")+ "}"
protected class Unit_Group_6_2 extends GroupToken {
	
	public Unit_Group_6_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_6_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RightCurlyBracketKeyword_6_2_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "requires"
protected class Unit_RequiresKeyword_6_2_0 extends KeywordToken  {
	
	public Unit_RequiresKeyword_6_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRequiresKeyword_6_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_6(parent, this, 0, inst);
			case 1: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Unit_LeftCurlyBracketKeyword_6_2_1 extends KeywordToken  {
	
	public Unit_LeftCurlyBracketKeyword_6_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_6_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RequiresKeyword_6_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (requiredCapabilities+=RequiredCapability ";")+
protected class Unit_Group_6_2_2 extends GroupToken {
	
	public Unit_Group_6_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_6_2_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SemicolonKeyword_6_2_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// requiredCapabilities+=RequiredCapability
protected class Unit_RequiredCapabilitiesAssignment_6_2_2_0 extends AssignmentToken  {
	
	public Unit_RequiredCapabilitiesAssignment_6_2_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getRequiredCapabilitiesAssignment_6_2_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("requiredCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("requiredCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRequiredCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getRequiredCapabilitiesRequiredCapabilityParserRuleCall_6_2_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_Group_6_2_2(parent, next, actIndex, consumed);
			case 1: return new Unit_LeftCurlyBracketKeyword_6_2_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Unit_SemicolonKeyword_6_2_2_1 extends KeywordToken  {
	
	public Unit_SemicolonKeyword_6_2_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSemicolonKeyword_6_2_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RequiredCapabilitiesAssignment_6_2_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "}"
protected class Unit_RightCurlyBracketKeyword_6_2_3 extends KeywordToken  {
	
	public Unit_RightCurlyBracketKeyword_6_2_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_6_2_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_6_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "requires" requiredCapabilities+=RequiredCapability ";"
protected class Unit_Group_6_3 extends GroupToken {
	
	public Unit_Group_6_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_6_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SemicolonKeyword_6_3_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "requires"
protected class Unit_RequiresKeyword_6_3_0 extends KeywordToken  {
	
	public Unit_RequiresKeyword_6_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRequiresKeyword_6_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_6(parent, this, 0, inst);
			case 1: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// requiredCapabilities+=RequiredCapability
protected class Unit_RequiredCapabilitiesAssignment_6_3_1 extends AssignmentToken  {
	
	public Unit_RequiredCapabilitiesAssignment_6_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getRequiredCapabilitiesAssignment_6_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("requiredCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("requiredCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRequiredCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getRequiredCapabilitiesRequiredCapabilityParserRuleCall_6_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_RequiresKeyword_6_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Unit_SemicolonKeyword_6_3_2 extends KeywordToken  {
	
	public Unit_SemicolonKeyword_6_3_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSemicolonKeyword_6_3_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RequiredCapabilitiesAssignment_6_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "meta" "requires" "{" (metaRequiredCapabilities+=RequiredCapability ";")+ "}"
protected class Unit_Group_6_4 extends GroupToken {
	
	public Unit_Group_6_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_6_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RightCurlyBracketKeyword_6_4_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "meta"
protected class Unit_MetaKeyword_6_4_0 extends KeywordToken  {
	
	public Unit_MetaKeyword_6_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getMetaKeyword_6_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_6(parent, this, 0, inst);
			case 1: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "requires"
protected class Unit_RequiresKeyword_6_4_1 extends KeywordToken  {
	
	public Unit_RequiresKeyword_6_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRequiresKeyword_6_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_MetaKeyword_6_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Unit_LeftCurlyBracketKeyword_6_4_2 extends KeywordToken  {
	
	public Unit_LeftCurlyBracketKeyword_6_4_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_6_4_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RequiresKeyword_6_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (metaRequiredCapabilities+=RequiredCapability ";")+
protected class Unit_Group_6_4_3 extends GroupToken {
	
	public Unit_Group_6_4_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_6_4_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SemicolonKeyword_6_4_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// metaRequiredCapabilities+=RequiredCapability
protected class Unit_MetaRequiredCapabilitiesAssignment_6_4_3_0 extends AssignmentToken  {
	
	public Unit_MetaRequiredCapabilitiesAssignment_6_4_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getMetaRequiredCapabilitiesAssignment_6_4_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("metaRequiredCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("metaRequiredCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRequiredCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getMetaRequiredCapabilitiesRequiredCapabilityParserRuleCall_6_4_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_Group_6_4_3(parent, next, actIndex, consumed);
			case 1: return new Unit_LeftCurlyBracketKeyword_6_4_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Unit_SemicolonKeyword_6_4_3_1 extends KeywordToken  {
	
	public Unit_SemicolonKeyword_6_4_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSemicolonKeyword_6_4_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_MetaRequiredCapabilitiesAssignment_6_4_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "}"
protected class Unit_RightCurlyBracketKeyword_6_4_4 extends KeywordToken  {
	
	public Unit_RightCurlyBracketKeyword_6_4_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_6_4_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_6_4_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "meta" "requires" metaRequiredCapabilities+=RequiredCapability ";"
protected class Unit_Group_6_5 extends GroupToken {
	
	public Unit_Group_6_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_6_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SemicolonKeyword_6_5_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "meta"
protected class Unit_MetaKeyword_6_5_0 extends KeywordToken  {
	
	public Unit_MetaKeyword_6_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getMetaKeyword_6_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_6(parent, this, 0, inst);
			case 1: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "requires"
protected class Unit_RequiresKeyword_6_5_1 extends KeywordToken  {
	
	public Unit_RequiresKeyword_6_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRequiresKeyword_6_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_MetaKeyword_6_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// metaRequiredCapabilities+=RequiredCapability
protected class Unit_MetaRequiredCapabilitiesAssignment_6_5_2 extends AssignmentToken  {
	
	public Unit_MetaRequiredCapabilitiesAssignment_6_5_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getMetaRequiredCapabilitiesAssignment_6_5_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("metaRequiredCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("metaRequiredCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRequiredCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getMetaRequiredCapabilitiesRequiredCapabilityParserRuleCall_6_5_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_RequiresKeyword_6_5_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Unit_SemicolonKeyword_6_5_3 extends KeywordToken  {
	
	public Unit_SemicolonKeyword_6_5_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSemicolonKeyword_6_5_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_MetaRequiredCapabilitiesAssignment_6_5_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "properties" "{" ("unset" unsetProperties+=QualifiedName ";"|setProperties+=
// StringProperty)+ "}"
protected class Unit_Group_6_6 extends GroupToken {
	
	public Unit_Group_6_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_6_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RightCurlyBracketKeyword_6_6_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "properties"
protected class Unit_PropertiesKeyword_6_6_0 extends KeywordToken  {
	
	public Unit_PropertiesKeyword_6_6_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getPropertiesKeyword_6_6_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_6(parent, this, 0, inst);
			case 1: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Unit_LeftCurlyBracketKeyword_6_6_1 extends KeywordToken  {
	
	public Unit_LeftCurlyBracketKeyword_6_6_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_6_6_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_PropertiesKeyword_6_6_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("unset" unsetProperties+=QualifiedName ";"|setProperties+=StringProperty)+
protected class Unit_Alternatives_6_6_2 extends AlternativesToken {

	public Unit_Alternatives_6_6_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getUnitAccess().getAlternatives_6_6_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_6_6_2_0(parent, this, 0, inst);
			case 1: return new Unit_SetPropertiesAssignment_6_6_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "unset" unsetProperties+=QualifiedName ";"
protected class Unit_Group_6_6_2_0 extends GroupToken {
	
	public Unit_Group_6_6_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_6_6_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SemicolonKeyword_6_6_2_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "unset"
protected class Unit_UnsetKeyword_6_6_2_0_0 extends KeywordToken  {
	
	public Unit_UnsetKeyword_6_6_2_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getUnsetKeyword_6_6_2_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_6_6_2(parent, this, 0, inst);
			case 1: return new Unit_LeftCurlyBracketKeyword_6_6_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// unsetProperties+=QualifiedName
protected class Unit_UnsetPropertiesAssignment_6_6_2_0_1 extends AssignmentToken  {
	
	public Unit_UnsetPropertiesAssignment_6_6_2_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getUnsetPropertiesAssignment_6_6_2_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_UnsetKeyword_6_6_2_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("unsetProperties",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("unsetProperties");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getUnitAccess().getUnsetPropertiesQualifiedNameParserRuleCall_6_6_2_0_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Unit_SemicolonKeyword_6_6_2_0_2 extends KeywordToken  {
	
	public Unit_SemicolonKeyword_6_6_2_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSemicolonKeyword_6_6_2_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_UnsetPropertiesAssignment_6_6_2_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// setProperties+=StringProperty
protected class Unit_SetPropertiesAssignment_6_6_2_1 extends AssignmentToken  {
	
	public Unit_SetPropertiesAssignment_6_6_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getSetPropertiesAssignment_6_6_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("setProperties",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("setProperties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStringPropertyRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getSetPropertiesStringPropertyParserRuleCall_6_6_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_Alternatives_6_6_2(parent, next, actIndex, consumed);
			case 1: return new Unit_LeftCurlyBracketKeyword_6_6_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class Unit_RightCurlyBracketKeyword_6_6_3 extends KeywordToken  {
	
	public Unit_RightCurlyBracketKeyword_6_6_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_6_6_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_6_6_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "unset" "property" unsetProperties+=QualifiedName ";"
protected class Unit_Group_6_7 extends GroupToken {
	
	public Unit_Group_6_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_6_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SemicolonKeyword_6_7_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "unset"
protected class Unit_UnsetKeyword_6_7_0 extends KeywordToken  {
	
	public Unit_UnsetKeyword_6_7_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getUnsetKeyword_6_7_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_6(parent, this, 0, inst);
			case 1: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "property"
protected class Unit_PropertyKeyword_6_7_1 extends KeywordToken  {
	
	public Unit_PropertyKeyword_6_7_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getPropertyKeyword_6_7_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_UnsetKeyword_6_7_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// unsetProperties+=QualifiedName
protected class Unit_UnsetPropertiesAssignment_6_7_2 extends AssignmentToken  {
	
	public Unit_UnsetPropertiesAssignment_6_7_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getUnsetPropertiesAssignment_6_7_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_PropertyKeyword_6_7_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("unsetProperties",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("unsetProperties");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getUnitAccess().getUnsetPropertiesQualifiedNameParserRuleCall_6_7_2_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Unit_SemicolonKeyword_6_7_3 extends KeywordToken  {
	
	public Unit_SemicolonKeyword_6_7_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSemicolonKeyword_6_7_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_UnsetPropertiesAssignment_6_7_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// setProperties+=StringProperty2
protected class Unit_SetPropertiesAssignment_6_8 extends AssignmentToken  {
	
	public Unit_SetPropertiesAssignment_6_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getSetPropertiesAssignment_6_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty2_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("setProperties",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("setProperties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStringProperty2Rule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getSetPropertiesStringProperty2ParserRuleCall_6_8_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_Alternatives_6(parent, next, actIndex, consumed);
			case 1: return new Unit_LeftCurlyBracketKeyword_5(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "advice" advice+=NamedAdvice
protected class Unit_Group_6_9 extends GroupToken {
	
	public Unit_Group_6_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_6_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_AdviceAssignment_6_9_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "advice"
protected class Unit_AdviceKeyword_6_9_0 extends KeywordToken  {
	
	public Unit_AdviceKeyword_6_9_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getAdviceKeyword_6_9_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_6(parent, this, 0, inst);
			case 1: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// advice+=NamedAdvice
protected class Unit_AdviceAssignment_6_9_1 extends AssignmentToken  {
	
	public Unit_AdviceAssignment_6_9_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getAdviceAssignment_6_9_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NamedAdvice_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("advice",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("advice");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNamedAdviceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getAdviceNamedAdviceParserRuleCall_6_9_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_AdviceKeyword_6_9_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "synchronize" "{" synchronize+=Synchronization+ "}"
protected class Unit_Group_6_10 extends GroupToken {
	
	public Unit_Group_6_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_6_10();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RightCurlyBracketKeyword_6_10_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "synchronize"
protected class Unit_SynchronizeKeyword_6_10_0 extends KeywordToken  {
	
	public Unit_SynchronizeKeyword_6_10_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSynchronizeKeyword_6_10_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_6(parent, this, 0, inst);
			case 1: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Unit_LeftCurlyBracketKeyword_6_10_1 extends KeywordToken  {
	
	public Unit_LeftCurlyBracketKeyword_6_10_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_6_10_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SynchronizeKeyword_6_10_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// synchronize+=Synchronization+
protected class Unit_SynchronizeAssignment_6_10_2 extends AssignmentToken  {
	
	public Unit_SynchronizeAssignment_6_10_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getSynchronizeAssignment_6_10_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("synchronize",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("synchronize");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSynchronizationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getSynchronizeSynchronizationParserRuleCall_6_10_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_SynchronizeAssignment_6_10_2(parent, next, actIndex, consumed);
			case 1: return new Unit_LeftCurlyBracketKeyword_6_10_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Unit_RightCurlyBracketKeyword_6_10_3 extends KeywordToken  {
	
	public Unit_RightCurlyBracketKeyword_6_10_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_6_10_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SynchronizeAssignment_6_10_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "synchronize" synchronize+=Synchronization
protected class Unit_Group_6_11 extends GroupToken {
	
	public Unit_Group_6_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_6_11();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SynchronizeAssignment_6_11_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "synchronize"
protected class Unit_SynchronizeKeyword_6_11_0 extends KeywordToken  {
	
	public Unit_SynchronizeKeyword_6_11_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSynchronizeKeyword_6_11_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_6(parent, this, 0, inst);
			case 1: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// synchronize+=Synchronization
protected class Unit_SynchronizeAssignment_6_11_1 extends AssignmentToken  {
	
	public Unit_SynchronizeAssignment_6_11_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getSynchronizeAssignment_6_11_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("synchronize",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("synchronize");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSynchronizationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getSynchronizeSynchronizationParserRuleCall_6_11_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_SynchronizeKeyword_6_11_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// parts+=BuildPart
protected class Unit_PartsAssignment_6_12 extends AssignmentToken  {
	
	public Unit_PartsAssignment_6_12(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getPartsAssignment_6_12();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BuildPart_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parts",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBuildPartRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getPartsBuildPartParserRuleCall_6_12_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_Alternatives_6(parent, next, actIndex, consumed);
			case 1: return new Unit_LeftCurlyBracketKeyword_5(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "repositories" "{" repositoryConfig+=RepositoryConfiguration* "}"
protected class Unit_Group_6_13 extends GroupToken {
	
	public Unit_Group_6_13(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_6_13();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RightCurlyBracketKeyword_6_13_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "repositories"
protected class Unit_RepositoriesKeyword_6_13_0 extends KeywordToken  {
	
	public Unit_RepositoriesKeyword_6_13_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRepositoriesKeyword_6_13_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_6(parent, this, 0, inst);
			case 1: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Unit_LeftCurlyBracketKeyword_6_13_1 extends KeywordToken  {
	
	public Unit_LeftCurlyBracketKeyword_6_13_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_6_13_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RepositoriesKeyword_6_13_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// repositoryConfig+=RepositoryConfiguration*
protected class Unit_RepositoryConfigAssignment_6_13_2 extends AssignmentToken  {
	
	public Unit_RepositoryConfigAssignment_6_13_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getRepositoryConfigAssignment_6_13_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryConfiguration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("repositoryConfig",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("repositoryConfig");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRepositoryConfigurationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getRepositoryConfigRepositoryConfigurationParserRuleCall_6_13_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_RepositoryConfigAssignment_6_13_2(parent, next, actIndex, consumed);
			case 1: return new Unit_LeftCurlyBracketKeyword_6_13_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Unit_RightCurlyBracketKeyword_6_13_3 extends KeywordToken  {
	
	public Unit_RightCurlyBracketKeyword_6_13_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_6_13_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RepositoryConfigAssignment_6_13_2(parent, this, 0, inst);
			case 1: return new Unit_LeftCurlyBracketKeyword_6_13_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



// "}"
protected class Unit_RightCurlyBracketKeyword_7 extends KeywordToken  {
	
	public Unit_RightCurlyBracketKeyword_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_6(parent, this, 0, inst);
			case 1: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Unit ****************/


/************ begin Rule ProvidedCapability ****************
 *
 * ProvidedCapability:
 *   ("when" filter=Filter)? interface=QualifiedName "/" name=QualifiedName ("/" version=
 *   Version)?;
 *
 **/

// ("when" filter=Filter)? interface=QualifiedName "/" name=QualifiedName ("/" version=
// Version)?
protected class ProvidedCapability_Group extends GroupToken {
	
	public ProvidedCapability_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group_4(parent, this, 0, inst);
			case 1: return new ProvidedCapability_NameAssignment_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getProvidedCapabilityRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ("when" filter=Filter)?
protected class ProvidedCapability_Group_0 extends GroupToken {
	
	public ProvidedCapability_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_FilterAssignment_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "when"
protected class ProvidedCapability_WhenKeyword_0_0 extends KeywordToken  {
	
	public ProvidedCapability_WhenKeyword_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getWhenKeyword_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// filter=Filter
protected class ProvidedCapability_FilterAssignment_0_1 extends AssignmentToken  {
	
	public ProvidedCapability_FilterAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getFilterAssignment_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Filter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("filter",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("filter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFilterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getProvidedCapabilityAccess().getFilterFilterParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProvidedCapability_WhenKeyword_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// interface=QualifiedName
protected class ProvidedCapability_InterfaceAssignment_1 extends AssignmentToken  {
	
	public ProvidedCapability_InterfaceAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getInterfaceAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("interface",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("interface");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getProvidedCapabilityAccess().getInterfaceQualifiedNameParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "/"
protected class ProvidedCapability_SolidusKeyword_2 extends KeywordToken  {
	
	public ProvidedCapability_SolidusKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getSolidusKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_InterfaceAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=QualifiedName
protected class ProvidedCapability_NameAssignment_3 extends AssignmentToken  {
	
	public ProvidedCapability_NameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getNameAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_SolidusKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getProvidedCapabilityAccess().getNameQualifiedNameParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ("/" version=Version)?
protected class ProvidedCapability_Group_4 extends GroupToken {
	
	public ProvidedCapability_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getGroup_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_VersionAssignment_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "/"
protected class ProvidedCapability_SolidusKeyword_4_0 extends KeywordToken  {
	
	public ProvidedCapability_SolidusKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getSolidusKeyword_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_NameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// version=Version
protected class ProvidedCapability_VersionAssignment_4_1 extends AssignmentToken  {
	
	public ProvidedCapability_VersionAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getVersionAssignment_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_SolidusKeyword_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("version",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("version");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getProvidedCapabilityAccess().getVersionVersionParserRuleCall_4_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule ProvidedCapability ****************/


/************ begin Rule RequiredCapability ****************
 *
 * RequiredCapability:
 *   ("when" filter=Filter)? interface=QualifiedName "/" name=QualifiedName ("/" range=
 *   VersionRange)?; 
 *                    
 * 
 * / *
 * ** Property in properties  lists (i-e. without keyword "property" 
 * * /
 *
 **/

// ("when" filter=Filter)? interface=QualifiedName "/" name=QualifiedName ("/" range=
// VersionRange)?
protected class RequiredCapability_Group extends GroupToken {
	
	public RequiredCapability_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_Group_4(parent, this, 0, inst);
			case 1: return new RequiredCapability_NameAssignment_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRequiredCapabilityRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ("when" filter=Filter)?
protected class RequiredCapability_Group_0 extends GroupToken {
	
	public RequiredCapability_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_FilterAssignment_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "when"
protected class RequiredCapability_WhenKeyword_0_0 extends KeywordToken  {
	
	public RequiredCapability_WhenKeyword_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getWhenKeyword_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// filter=Filter
protected class RequiredCapability_FilterAssignment_0_1 extends AssignmentToken  {
	
	public RequiredCapability_FilterAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getFilterAssignment_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Filter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("filter",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("filter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFilterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRequiredCapabilityAccess().getFilterFilterParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RequiredCapability_WhenKeyword_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// interface=QualifiedName
protected class RequiredCapability_InterfaceAssignment_1 extends AssignmentToken  {
	
	public RequiredCapability_InterfaceAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getInterfaceAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_Group_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("interface",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("interface");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getRequiredCapabilityAccess().getInterfaceQualifiedNameParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "/"
protected class RequiredCapability_SolidusKeyword_2 extends KeywordToken  {
	
	public RequiredCapability_SolidusKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getSolidusKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_InterfaceAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=QualifiedName
protected class RequiredCapability_NameAssignment_3 extends AssignmentToken  {
	
	public RequiredCapability_NameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getNameAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_SolidusKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getRequiredCapabilityAccess().getNameQualifiedNameParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ("/" range=VersionRange)?
protected class RequiredCapability_Group_4 extends GroupToken {
	
	public RequiredCapability_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getGroup_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_RangeAssignment_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "/"
protected class RequiredCapability_SolidusKeyword_4_0 extends KeywordToken  {
	
	public RequiredCapability_SolidusKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getSolidusKeyword_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_NameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// range=VersionRange
protected class RequiredCapability_RangeAssignment_4_1 extends AssignmentToken  {
	
	public RequiredCapability_RangeAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getRangeAssignment_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_SolidusKeyword_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("range",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("range");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getRequiredCapabilityAccess().getRangeVersionRangeParserRuleCall_4_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule RequiredCapability ****************/


/************ begin Rule StringProperty ****************
 *
 * StringProperty:
 *   immutable?="immutable" key=QualifiedName "=" value=PropertyExpression ";"|(key=
 *   QualifiedName ("=" value=PropertyExpression)?) ";"; 
 * 
 * / *
 * ** Property in properties  lists (i-e. without keyword "property" 
 * * /
 *     
 * 	              
 * 		          
 * 	
 * 
 * / * 
 * ** Properties with keyword "property" 
 * * /
 *
 **/

// immutable?="immutable" key=QualifiedName "=" value=PropertyExpression ";"|(key=
// QualifiedName ("=" value=PropertyExpression)?) ";"
protected class StringProperty_Alternatives extends AlternativesToken {

	public StringProperty_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getStringPropertyAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty_Group_0(parent, this, 0, inst);
			case 1: return new StringProperty_Group_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getStringPropertyRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// immutable?="immutable" key=QualifiedName "=" value=PropertyExpression ";"
protected class StringProperty_Group_0 extends GroupToken {
	
	public StringProperty_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStringPropertyAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty_SemicolonKeyword_0_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// immutable?="immutable"
protected class StringProperty_ImmutableAssignment_0_0 extends AssignmentToken  {
	
	public StringProperty_ImmutableAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStringPropertyAccess().getImmutableAssignment_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("immutable",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("immutable");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStringPropertyAccess().getImmutableImmutableKeyword_0_0_0();
			return obj;
		}
		return null;
	}

}

// key=QualifiedName
protected class StringProperty_KeyAssignment_0_1 extends AssignmentToken  {
	
	public StringProperty_KeyAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStringPropertyAccess().getKeyAssignment_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty_ImmutableAssignment_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("key",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("key");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getStringPropertyAccess().getKeyQualifiedNameParserRuleCall_0_1_0();
			return obj;
		}
		return null;
	}

}

// "="
protected class StringProperty_EqualsSignKeyword_0_2 extends KeywordToken  {
	
	public StringProperty_EqualsSignKeyword_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStringPropertyAccess().getEqualsSignKeyword_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty_KeyAssignment_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// value=PropertyExpression
protected class StringProperty_ValueAssignment_0_3 extends AssignmentToken  {
	
	public StringProperty_ValueAssignment_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStringPropertyAccess().getValueAssignment_0_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyExpression_ExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getStringPropertyAccess().getValuePropertyExpressionParserRuleCall_0_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StringProperty_EqualsSignKeyword_0_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class StringProperty_SemicolonKeyword_0_4 extends KeywordToken  {
	
	public StringProperty_SemicolonKeyword_0_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStringPropertyAccess().getSemicolonKeyword_0_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty_ValueAssignment_0_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// (key=QualifiedName ("=" value=PropertyExpression)?) ";"
protected class StringProperty_Group_1 extends GroupToken {
	
	public StringProperty_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStringPropertyAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty_SemicolonKeyword_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// key=QualifiedName ("=" value=PropertyExpression)?
protected class StringProperty_Group_1_0 extends GroupToken {
	
	public StringProperty_Group_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStringPropertyAccess().getGroup_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty_Group_1_0_1(parent, this, 0, inst);
			case 1: return new StringProperty_KeyAssignment_1_0_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// key=QualifiedName
protected class StringProperty_KeyAssignment_1_0_0 extends AssignmentToken  {
	
	public StringProperty_KeyAssignment_1_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStringPropertyAccess().getKeyAssignment_1_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("key",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("key");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getStringPropertyAccess().getKeyQualifiedNameParserRuleCall_1_0_0_0();
			return obj;
		}
		return null;
	}

}

// ("=" value=PropertyExpression)?
protected class StringProperty_Group_1_0_1 extends GroupToken {
	
	public StringProperty_Group_1_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStringPropertyAccess().getGroup_1_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty_ValueAssignment_1_0_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "="
protected class StringProperty_EqualsSignKeyword_1_0_1_0 extends KeywordToken  {
	
	public StringProperty_EqualsSignKeyword_1_0_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStringPropertyAccess().getEqualsSignKeyword_1_0_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty_KeyAssignment_1_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// value=PropertyExpression
protected class StringProperty_ValueAssignment_1_0_1_1 extends AssignmentToken  {
	
	public StringProperty_ValueAssignment_1_0_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStringPropertyAccess().getValueAssignment_1_0_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyExpression_ExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getStringPropertyAccess().getValuePropertyExpressionParserRuleCall_1_0_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StringProperty_EqualsSignKeyword_1_0_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ";"
protected class StringProperty_SemicolonKeyword_1_1 extends KeywordToken  {
	
	public StringProperty_SemicolonKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStringPropertyAccess().getSemicolonKeyword_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty_Group_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule StringProperty ****************/


/************ begin Rule StringProperty2 ****************
 *
 * StringProperty2 returns StringProperty:
 *   immutable?="immutable" "property" key=QualifiedName "=" value=PropertyExpression ";"|
 *   ("property" key=QualifiedName ("=" value=PropertyExpression)?) ";"; 
 * 
 * / * 
 * ** Properties with keyword "property" 
 * * /
 *
 **/

// immutable?="immutable" "property" key=QualifiedName "=" value=PropertyExpression ";"|
// ("property" key=QualifiedName ("=" value=PropertyExpression)?) ";"
protected class StringProperty2_Alternatives extends AlternativesToken {

	public StringProperty2_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getStringProperty2Access().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty2_Group_0(parent, this, 0, inst);
			case 1: return new StringProperty2_Group_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getStringProperty2Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// immutable?="immutable" "property" key=QualifiedName "=" value=PropertyExpression ";"
protected class StringProperty2_Group_0 extends GroupToken {
	
	public StringProperty2_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStringProperty2Access().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty2_SemicolonKeyword_0_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// immutable?="immutable"
protected class StringProperty2_ImmutableAssignment_0_0 extends AssignmentToken  {
	
	public StringProperty2_ImmutableAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStringProperty2Access().getImmutableAssignment_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("immutable",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("immutable");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStringProperty2Access().getImmutableImmutableKeyword_0_0_0();
			return obj;
		}
		return null;
	}

}

// "property"
protected class StringProperty2_PropertyKeyword_0_1 extends KeywordToken  {
	
	public StringProperty2_PropertyKeyword_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStringProperty2Access().getPropertyKeyword_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty2_ImmutableAssignment_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// key=QualifiedName
protected class StringProperty2_KeyAssignment_0_2 extends AssignmentToken  {
	
	public StringProperty2_KeyAssignment_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStringProperty2Access().getKeyAssignment_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty2_PropertyKeyword_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("key",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("key");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getStringProperty2Access().getKeyQualifiedNameParserRuleCall_0_2_0();
			return obj;
		}
		return null;
	}

}

// "="
protected class StringProperty2_EqualsSignKeyword_0_3 extends KeywordToken  {
	
	public StringProperty2_EqualsSignKeyword_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStringProperty2Access().getEqualsSignKeyword_0_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty2_KeyAssignment_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// value=PropertyExpression
protected class StringProperty2_ValueAssignment_0_4 extends AssignmentToken  {
	
	public StringProperty2_ValueAssignment_0_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStringProperty2Access().getValueAssignment_0_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyExpression_ExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getStringProperty2Access().getValuePropertyExpressionParserRuleCall_0_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StringProperty2_EqualsSignKeyword_0_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class StringProperty2_SemicolonKeyword_0_5 extends KeywordToken  {
	
	public StringProperty2_SemicolonKeyword_0_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStringProperty2Access().getSemicolonKeyword_0_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty2_ValueAssignment_0_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ("property" key=QualifiedName ("=" value=PropertyExpression)?) ";"
protected class StringProperty2_Group_1 extends GroupToken {
	
	public StringProperty2_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStringProperty2Access().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty2_SemicolonKeyword_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "property" key=QualifiedName ("=" value=PropertyExpression)?
protected class StringProperty2_Group_1_0 extends GroupToken {
	
	public StringProperty2_Group_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStringProperty2Access().getGroup_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty2_Group_1_0_2(parent, this, 0, inst);
			case 1: return new StringProperty2_KeyAssignment_1_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "property"
protected class StringProperty2_PropertyKeyword_1_0_0 extends KeywordToken  {
	
	public StringProperty2_PropertyKeyword_1_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStringProperty2Access().getPropertyKeyword_1_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// key=QualifiedName
protected class StringProperty2_KeyAssignment_1_0_1 extends AssignmentToken  {
	
	public StringProperty2_KeyAssignment_1_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStringProperty2Access().getKeyAssignment_1_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty2_PropertyKeyword_1_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("key",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("key");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getStringProperty2Access().getKeyQualifiedNameParserRuleCall_1_0_1_0();
			return obj;
		}
		return null;
	}

}

// ("=" value=PropertyExpression)?
protected class StringProperty2_Group_1_0_2 extends GroupToken {
	
	public StringProperty2_Group_1_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStringProperty2Access().getGroup_1_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty2_ValueAssignment_1_0_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "="
protected class StringProperty2_EqualsSignKeyword_1_0_2_0 extends KeywordToken  {
	
	public StringProperty2_EqualsSignKeyword_1_0_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStringProperty2Access().getEqualsSignKeyword_1_0_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty2_KeyAssignment_1_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// value=PropertyExpression
protected class StringProperty2_ValueAssignment_1_0_2_1 extends AssignmentToken  {
	
	public StringProperty2_ValueAssignment_1_0_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStringProperty2Access().getValueAssignment_1_0_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyExpression_ExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getStringProperty2Access().getValuePropertyExpressionParserRuleCall_1_0_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StringProperty2_EqualsSignKeyword_1_0_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ";"
protected class StringProperty2_SemicolonKeyword_1_1 extends KeywordToken  {
	
	public StringProperty2_SemicolonKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStringProperty2Access().getSemicolonKeyword_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty2_Group_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule StringProperty2 ****************/


/************ begin Rule PropertyExpression ****************
 *
 * PropertyExpression:
 *   Expression;
 *
 **/

// Expression
protected class PropertyExpression_ExpressionParserRuleCall extends RuleCallToken {
	
	public PropertyExpression_ExpressionParserRuleCall(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPropertyExpressionAccess().getExpressionParserRuleCall();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_ValueExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPropertyExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Expression_ValueExpressionParserRuleCall.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule PropertyExpression ****************/


/************ begin Rule Synchronization ****************
 *
 * Synchronization:
 *   partrefs+=SynchronizedPart ("," partrefs+=SynchronizedPart)+ ";";  
 * 
 *  
 * 	                // at least 2
 *
 **/

// partrefs+=SynchronizedPart ("," partrefs+=SynchronizedPart)+ ";"                 // at least 2
protected class Synchronization_Group extends GroupToken {
	
	public Synchronization_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSynchronizationAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_SemicolonKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSynchronizationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// partrefs+=SynchronizedPart
protected class Synchronization_PartrefsAssignment_0 extends AssignmentToken  {
	
	public Synchronization_PartrefsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSynchronizationAccess().getPartrefsAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("partrefs",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("partrefs");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getSynchronizationAccess().getPartrefsSynchronizedPartParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ("," partrefs+=SynchronizedPart)+
protected class Synchronization_Group_1 extends GroupToken {
	
	public Synchronization_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSynchronizationAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_PartrefsAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Synchronization_CommaKeyword_1_0 extends KeywordToken  {
	
	public Synchronization_CommaKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSynchronizationAccess().getCommaKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_Group_1(parent, this, 0, inst);
			case 1: return new Synchronization_PartrefsAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// partrefs+=SynchronizedPart
protected class Synchronization_PartrefsAssignment_1_1 extends AssignmentToken  {
	
	public Synchronization_PartrefsAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSynchronizationAccess().getPartrefsAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_CommaKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("partrefs",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("partrefs");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getSynchronizationAccess().getPartrefsSynchronizedPartParserRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}


// ";"     // at least 2
protected class Synchronization_SemicolonKeyword_2 extends KeywordToken  {
	
	public Synchronization_SemicolonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSynchronizationAccess().getSemicolonKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_Group_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Synchronization ****************/



/************ begin Rule BuildPart ****************
 *
 * BuildPart:
 *   Artifacts|Group|Action;
 *
 **/

// Artifacts|Group|Action
protected class BuildPart_Alternatives extends AlternativesToken {

	public BuildPart_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getBuildPartAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BuildPart_ArtifactsParserRuleCall_0(parent, this, 0, inst);
			case 1: return new BuildPart_GroupParserRuleCall_1(parent, this, 1, inst);
			case 2: return new BuildPart_ActionParserRuleCall_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBuildPartRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Artifacts
protected class BuildPart_ArtifactsParserRuleCall_0 extends RuleCallToken {
	
	public BuildPart_ArtifactsParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getBuildPartAccess().getArtifactsParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Artifacts_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Artifacts_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getArtifactsRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Group
protected class BuildPart_GroupParserRuleCall_1 extends RuleCallToken {
	
	public BuildPart_GroupParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getBuildPartAccess().getGroupParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Group_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getGroupRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Action
protected class BuildPart_ActionParserRuleCall_2 extends RuleCallToken {
	
	public BuildPart_ActionParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getBuildPartAccess().getActionParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Action_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getActionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule BuildPart ****************/


/************ begin Rule Artifacts ****************
 *
 * Artifacts returns ArtifactsPart:
 *   visibility=Visibility? "artifacts" name=PartName ("provides" providedCapabilities+=
 *   ProvidedCapability ("," providedCapabilities+=ProvidedCapability)*)? asserts+=
 *   PostConditionAssert? "{" paths+=PathGroup* "}"; 
 * 	
 *      
 * 	          
 * 		                   
 * 		    
 * 		        
 * 	
 * 	
 * / * PATH GROUP
 * * TODO: Allow basePath without paths?
 * * /
 *
 **/

// visibility=Visibility? "artifacts" name=PartName ("provides" providedCapabilities+=
// ProvidedCapability ("," providedCapabilities+=ProvidedCapability)*)? asserts+=
// PostConditionAssert? "{" paths+=PathGroup* "}"
protected class Artifacts_Group extends GroupToken {
	
	public Artifacts_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getArtifactsAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Artifacts_RightCurlyBracketKeyword_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getArtifactsRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// visibility=Visibility?
protected class Artifacts_VisibilityAssignment_0 extends AssignmentToken  {
	
	public Artifacts_VisibilityAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getArtifactsAccess().getVisibilityAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("visibility",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("visibility");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getArtifactsAccess().getVisibilityVisibilityEnumRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "artifacts"
protected class Artifacts_ArtifactsKeyword_1 extends KeywordToken  {
	
	public Artifacts_ArtifactsKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getArtifactsAccess().getArtifactsKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Artifacts_VisibilityAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=PartName
protected class Artifacts_NameAssignment_2 extends AssignmentToken  {
	
	public Artifacts_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getArtifactsAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Artifacts_ArtifactsKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getArtifactsAccess().getNamePartNameParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ("provides" providedCapabilities+=ProvidedCapability ("," providedCapabilities+=
// ProvidedCapability)*)?
protected class Artifacts_Group_3 extends GroupToken {
	
	public Artifacts_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getArtifactsAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Artifacts_Group_3_2(parent, this, 0, inst);
			case 1: return new Artifacts_ProvidedCapabilitiesAssignment_3_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "provides"
protected class Artifacts_ProvidesKeyword_3_0 extends KeywordToken  {
	
	public Artifacts_ProvidesKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getArtifactsAccess().getProvidesKeyword_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Artifacts_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// providedCapabilities+=ProvidedCapability
protected class Artifacts_ProvidedCapabilitiesAssignment_3_1 extends AssignmentToken  {
	
	public Artifacts_ProvidedCapabilitiesAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getArtifactsAccess().getProvidedCapabilitiesAssignment_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("providedCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("providedCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProvidedCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getArtifactsAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Artifacts_ProvidesKeyword_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," providedCapabilities+=ProvidedCapability)*
protected class Artifacts_Group_3_2 extends GroupToken {
	
	public Artifacts_Group_3_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getArtifactsAccess().getGroup_3_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Artifacts_ProvidedCapabilitiesAssignment_3_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Artifacts_CommaKeyword_3_2_0 extends KeywordToken  {
	
	public Artifacts_CommaKeyword_3_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getArtifactsAccess().getCommaKeyword_3_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Artifacts_Group_3_2(parent, this, 0, inst);
			case 1: return new Artifacts_ProvidedCapabilitiesAssignment_3_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// providedCapabilities+=ProvidedCapability
protected class Artifacts_ProvidedCapabilitiesAssignment_3_2_1 extends AssignmentToken  {
	
	public Artifacts_ProvidedCapabilitiesAssignment_3_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getArtifactsAccess().getProvidedCapabilitiesAssignment_3_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("providedCapabilities",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("providedCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProvidedCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getArtifactsAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_3_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Artifacts_CommaKeyword_3_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// asserts+=PostConditionAssert?
protected class Artifacts_AssertsAssignment_4 extends AssignmentToken  {
	
	public Artifacts_AssertsAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getArtifactsAccess().getAssertsAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostConditionAssert_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("asserts",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("asserts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPostConditionAssertRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getArtifactsAccess().getAssertsPostConditionAssertParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Artifacts_Group_3(parent, next, actIndex, consumed);
			case 1: return new Artifacts_NameAssignment_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class Artifacts_LeftCurlyBracketKeyword_5 extends KeywordToken  {
	
	public Artifacts_LeftCurlyBracketKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getArtifactsAccess().getLeftCurlyBracketKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Artifacts_AssertsAssignment_4(parent, this, 0, inst);
			case 1: return new Artifacts_Group_3(parent, this, 1, inst);
			case 2: return new Artifacts_NameAssignment_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// paths+=PathGroup*
protected class Artifacts_PathsAssignment_6 extends AssignmentToken  {
	
	public Artifacts_PathsAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getArtifactsAccess().getPathsAssignment_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("paths",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("paths");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPathGroupRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getArtifactsAccess().getPathsPathGroupParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Artifacts_PathsAssignment_6(parent, next, actIndex, consumed);
			case 1: return new Artifacts_LeftCurlyBracketKeyword_5(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Artifacts_RightCurlyBracketKeyword_7 extends KeywordToken  {
	
	public Artifacts_RightCurlyBracketKeyword_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getArtifactsAccess().getRightCurlyBracketKeyword_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Artifacts_PathsAssignment_6(parent, this, 0, inst);
			case 1: return new Artifacts_LeftCurlyBracketKeyword_5(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Artifacts ****************/


/************ begin Rule PathGroup ****************
 *
 * PathGroup:
 *   ("when" filter=Filter)? (paths+=Path ("," paths+=Path)* ";"|basePath=Path "[" paths+=
 *   Path ("," paths+=Path)* "]" ";"|"properties" "{" ("unset" unsetProperties+=
 *   QualifiedName ";"|setProperties+=StringProperty)+ "}"|"unset" "property"
 *   unsetProperties+=QualifiedName ";"|setProperties+=StringProperty2); 
 * 	
 * / * PATH GROUP
 * * TODO: Allow basePath without paths?
 * * /
 *  
 * 	     
 * 		        
 * 		              
 * 		                           
 * 		              
 * 		      
 * 		
 * 	
 * 
 * / *
 * * A path can be written without quotes if it consists of safe chars 
 * * TODO: repace use of ID with better definition.
 * * TODO: Validation of path syntax (MS, n*x) ?
 * * /
 *
 **/

// ("when" filter=Filter)? (paths+=Path ("," paths+=Path)* ";"|basePath=Path "[" paths+=
// Path ("," paths+=Path)* "]" ";"|"properties" "{" ("unset" unsetProperties+=
// QualifiedName ";"|setProperties+=StringProperty)+ "}"|"unset" "property"
// unsetProperties+=QualifiedName ";"|setProperties+=StringProperty2)
protected class PathGroup_Group extends GroupToken {
	
	public PathGroup_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_Alternatives_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPathGroupRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ("when" filter=Filter)?
protected class PathGroup_Group_0 extends GroupToken {
	
	public PathGroup_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_FilterAssignment_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "when"
protected class PathGroup_WhenKeyword_0_0 extends KeywordToken  {
	
	public PathGroup_WhenKeyword_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getWhenKeyword_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// filter=Filter
protected class PathGroup_FilterAssignment_0_1 extends AssignmentToken  {
	
	public PathGroup_FilterAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getFilterAssignment_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Filter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("filter",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("filter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFilterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPathGroupAccess().getFilterFilterParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PathGroup_WhenKeyword_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// paths+=Path ("," paths+=Path)* ";"|basePath=Path "[" paths+=Path ("," paths+=Path)* "]"
// ";"|"properties" "{" ("unset" unsetProperties+=QualifiedName ";"|setProperties+=
// StringProperty)+ "}"|"unset" "property" unsetProperties+=QualifiedName ";"|
// setProperties+=StringProperty2
protected class PathGroup_Alternatives_1 extends AlternativesToken {

	public PathGroup_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getAlternatives_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_Group_1_0(parent, this, 0, inst);
			case 1: return new PathGroup_Group_1_1(parent, this, 1, inst);
			case 2: return new PathGroup_Group_1_2(parent, this, 2, inst);
			case 3: return new PathGroup_Group_1_3(parent, this, 3, inst);
			case 4: return new PathGroup_SetPropertiesAssignment_1_4(parent, this, 4, inst);
			default: return null;
		}	
	}	
		
}

// paths+=Path ("," paths+=Path)* ";"
protected class PathGroup_Group_1_0 extends GroupToken {
	
	public PathGroup_Group_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getGroup_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_SemicolonKeyword_1_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// paths+=Path
protected class PathGroup_PathsAssignment_1_0_0 extends AssignmentToken  {
	
	public PathGroup_PathsAssignment_1_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getPathsAssignment_1_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_Group_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("paths",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("paths");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getPathGroupAccess().getPathsPathParserRuleCall_1_0_0_0();
			return obj;
		}
		return null;
	}

}

// ("," paths+=Path)*
protected class PathGroup_Group_1_0_1 extends GroupToken {
	
	public PathGroup_Group_1_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getGroup_1_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_PathsAssignment_1_0_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class PathGroup_CommaKeyword_1_0_1_0 extends KeywordToken  {
	
	public PathGroup_CommaKeyword_1_0_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getCommaKeyword_1_0_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_Group_1_0_1(parent, this, 0, inst);
			case 1: return new PathGroup_PathsAssignment_1_0_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// paths+=Path
protected class PathGroup_PathsAssignment_1_0_1_1 extends AssignmentToken  {
	
	public PathGroup_PathsAssignment_1_0_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getPathsAssignment_1_0_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_CommaKeyword_1_0_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("paths",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("paths");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getPathGroupAccess().getPathsPathParserRuleCall_1_0_1_1_0();
			return obj;
		}
		return null;
	}

}


// ";"
protected class PathGroup_SemicolonKeyword_1_0_2 extends KeywordToken  {
	
	public PathGroup_SemicolonKeyword_1_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getSemicolonKeyword_1_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_Group_1_0_1(parent, this, 0, inst);
			case 1: return new PathGroup_PathsAssignment_1_0_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// basePath=Path "[" paths+=Path ("," paths+=Path)* "]" ";"
protected class PathGroup_Group_1_1 extends GroupToken {
	
	public PathGroup_Group_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getGroup_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_SemicolonKeyword_1_1_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// basePath=Path
protected class PathGroup_BasePathAssignment_1_1_0 extends AssignmentToken  {
	
	public PathGroup_BasePathAssignment_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getBasePathAssignment_1_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_Group_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("basePath",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("basePath");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getPathGroupAccess().getBasePathPathParserRuleCall_1_1_0_0();
			return obj;
		}
		return null;
	}

}

// "["
protected class PathGroup_LeftSquareBracketKeyword_1_1_1 extends KeywordToken  {
	
	public PathGroup_LeftSquareBracketKeyword_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getLeftSquareBracketKeyword_1_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_BasePathAssignment_1_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// paths+=Path
protected class PathGroup_PathsAssignment_1_1_2 extends AssignmentToken  {
	
	public PathGroup_PathsAssignment_1_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getPathsAssignment_1_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_LeftSquareBracketKeyword_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("paths",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("paths");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getPathGroupAccess().getPathsPathParserRuleCall_1_1_2_0();
			return obj;
		}
		return null;
	}

}

// ("," paths+=Path)*
protected class PathGroup_Group_1_1_3 extends GroupToken {
	
	public PathGroup_Group_1_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getGroup_1_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_PathsAssignment_1_1_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class PathGroup_CommaKeyword_1_1_3_0 extends KeywordToken  {
	
	public PathGroup_CommaKeyword_1_1_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getCommaKeyword_1_1_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_Group_1_1_3(parent, this, 0, inst);
			case 1: return new PathGroup_PathsAssignment_1_1_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// paths+=Path
protected class PathGroup_PathsAssignment_1_1_3_1 extends AssignmentToken  {
	
	public PathGroup_PathsAssignment_1_1_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getPathsAssignment_1_1_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_CommaKeyword_1_1_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("paths",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("paths");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getPathGroupAccess().getPathsPathParserRuleCall_1_1_3_1_0();
			return obj;
		}
		return null;
	}

}


// "]"
protected class PathGroup_RightSquareBracketKeyword_1_1_4 extends KeywordToken  {
	
	public PathGroup_RightSquareBracketKeyword_1_1_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getRightSquareBracketKeyword_1_1_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_Group_1_1_3(parent, this, 0, inst);
			case 1: return new PathGroup_PathsAssignment_1_1_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ";"
protected class PathGroup_SemicolonKeyword_1_1_5 extends KeywordToken  {
	
	public PathGroup_SemicolonKeyword_1_1_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getSemicolonKeyword_1_1_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_RightSquareBracketKeyword_1_1_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "properties" "{" ("unset" unsetProperties+=QualifiedName ";"|setProperties+=
// StringProperty)+ "}"
protected class PathGroup_Group_1_2 extends GroupToken {
	
	public PathGroup_Group_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getGroup_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_RightCurlyBracketKeyword_1_2_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "properties"
protected class PathGroup_PropertiesKeyword_1_2_0 extends KeywordToken  {
	
	public PathGroup_PropertiesKeyword_1_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getPropertiesKeyword_1_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_Group_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// "{"
protected class PathGroup_LeftCurlyBracketKeyword_1_2_1 extends KeywordToken  {
	
	public PathGroup_LeftCurlyBracketKeyword_1_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getLeftCurlyBracketKeyword_1_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_PropertiesKeyword_1_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("unset" unsetProperties+=QualifiedName ";"|setProperties+=StringProperty)+
protected class PathGroup_Alternatives_1_2_2 extends AlternativesToken {

	public PathGroup_Alternatives_1_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getAlternatives_1_2_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_Group_1_2_2_0(parent, this, 0, inst);
			case 1: return new PathGroup_SetPropertiesAssignment_1_2_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "unset" unsetProperties+=QualifiedName ";"
protected class PathGroup_Group_1_2_2_0 extends GroupToken {
	
	public PathGroup_Group_1_2_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getGroup_1_2_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_SemicolonKeyword_1_2_2_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "unset"
protected class PathGroup_UnsetKeyword_1_2_2_0_0 extends KeywordToken  {
	
	public PathGroup_UnsetKeyword_1_2_2_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getUnsetKeyword_1_2_2_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_Alternatives_1_2_2(parent, this, 0, inst);
			case 1: return new PathGroup_LeftCurlyBracketKeyword_1_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// unsetProperties+=QualifiedName
protected class PathGroup_UnsetPropertiesAssignment_1_2_2_0_1 extends AssignmentToken  {
	
	public PathGroup_UnsetPropertiesAssignment_1_2_2_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getUnsetPropertiesAssignment_1_2_2_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_UnsetKeyword_1_2_2_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("unsetProperties",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("unsetProperties");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getPathGroupAccess().getUnsetPropertiesQualifiedNameParserRuleCall_1_2_2_0_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class PathGroup_SemicolonKeyword_1_2_2_0_2 extends KeywordToken  {
	
	public PathGroup_SemicolonKeyword_1_2_2_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getSemicolonKeyword_1_2_2_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_UnsetPropertiesAssignment_1_2_2_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// setProperties+=StringProperty
protected class PathGroup_SetPropertiesAssignment_1_2_2_1 extends AssignmentToken  {
	
	public PathGroup_SetPropertiesAssignment_1_2_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getSetPropertiesAssignment_1_2_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("setProperties",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("setProperties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStringPropertyRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPathGroupAccess().getSetPropertiesStringPropertyParserRuleCall_1_2_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PathGroup_Alternatives_1_2_2(parent, next, actIndex, consumed);
			case 1: return new PathGroup_LeftCurlyBracketKeyword_1_2_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class PathGroup_RightCurlyBracketKeyword_1_2_3 extends KeywordToken  {
	
	public PathGroup_RightCurlyBracketKeyword_1_2_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getRightCurlyBracketKeyword_1_2_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_Alternatives_1_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "unset" "property" unsetProperties+=QualifiedName ";"
protected class PathGroup_Group_1_3 extends GroupToken {
	
	public PathGroup_Group_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getGroup_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_SemicolonKeyword_1_3_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "unset"
protected class PathGroup_UnsetKeyword_1_3_0 extends KeywordToken  {
	
	public PathGroup_UnsetKeyword_1_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getUnsetKeyword_1_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_Group_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// "property"
protected class PathGroup_PropertyKeyword_1_3_1 extends KeywordToken  {
	
	public PathGroup_PropertyKeyword_1_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getPropertyKeyword_1_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_UnsetKeyword_1_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// unsetProperties+=QualifiedName
protected class PathGroup_UnsetPropertiesAssignment_1_3_2 extends AssignmentToken  {
	
	public PathGroup_UnsetPropertiesAssignment_1_3_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getUnsetPropertiesAssignment_1_3_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_PropertyKeyword_1_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("unsetProperties",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("unsetProperties");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getPathGroupAccess().getUnsetPropertiesQualifiedNameParserRuleCall_1_3_2_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class PathGroup_SemicolonKeyword_1_3_3 extends KeywordToken  {
	
	public PathGroup_SemicolonKeyword_1_3_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getSemicolonKeyword_1_3_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_UnsetPropertiesAssignment_1_3_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// setProperties+=StringProperty2
protected class PathGroup_SetPropertiesAssignment_1_4 extends AssignmentToken  {
	
	public PathGroup_SetPropertiesAssignment_1_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getSetPropertiesAssignment_1_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty2_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("setProperties",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("setProperties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStringProperty2Rule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPathGroupAccess().getSetPropertiesStringProperty2ParserRuleCall_1_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PathGroup_Group_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}



/************ end Rule PathGroup ****************/



/************ begin Rule Group ****************
 *
 * Group returns GroupPart:
 *   visibility=Visibility? synchronized?="synchronized"? "group" name=PartName (
 *   "provides" providedCapabilities+=ProvidedCapability ("," providedCapabilities+=
 *   ProvidedCapability)*)? asserts+=PreConditionAssert? asserts+=PostConditionAssert?
 *   "{" prerequisites+=Prerequisite* "}";
 *
 **/

// visibility=Visibility? synchronized?="synchronized"? "group" name=PartName (
// "provides" providedCapabilities+=ProvidedCapability ("," providedCapabilities+=
// ProvidedCapability)*)? asserts+=PreConditionAssert? asserts+=PostConditionAssert?
// "{" prerequisites+=Prerequisite* "}"
protected class Group_Group extends GroupToken {
	
	public Group_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getGroupAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_RightCurlyBracketKeyword_9(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getGroupRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// visibility=Visibility?
protected class Group_VisibilityAssignment_0 extends AssignmentToken  {
	
	public Group_VisibilityAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupAccess().getVisibilityAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("visibility",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("visibility");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getGroupAccess().getVisibilityVisibilityEnumRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// synchronized?="synchronized"?
protected class Group_SynchronizedAssignment_1 extends AssignmentToken  {
	
	public Group_SynchronizedAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupAccess().getSynchronizedAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_VisibilityAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("synchronized",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("synchronized");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getGroupAccess().getSynchronizedSynchronizedKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// "group"
protected class Group_GroupKeyword_2 extends KeywordToken  {
	
	public Group_GroupKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupAccess().getGroupKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_SynchronizedAssignment_1(parent, this, 0, inst);
			case 1: return new Group_VisibilityAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}	
		
}

// name=PartName
protected class Group_NameAssignment_3 extends AssignmentToken  {
	
	public Group_NameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupAccess().getNameAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_GroupKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getGroupAccess().getNamePartNameParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ("provides" providedCapabilities+=ProvidedCapability ("," providedCapabilities+=
// ProvidedCapability)*)?
protected class Group_Group_4 extends GroupToken {
	
	public Group_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getGroupAccess().getGroup_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_Group_4_2(parent, this, 0, inst);
			case 1: return new Group_ProvidedCapabilitiesAssignment_4_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "provides"
protected class Group_ProvidesKeyword_4_0 extends KeywordToken  {
	
	public Group_ProvidesKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupAccess().getProvidesKeyword_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_NameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// providedCapabilities+=ProvidedCapability
protected class Group_ProvidedCapabilitiesAssignment_4_1 extends AssignmentToken  {
	
	public Group_ProvidedCapabilitiesAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupAccess().getProvidedCapabilitiesAssignment_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("providedCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("providedCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProvidedCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getGroupAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Group_ProvidesKeyword_4_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," providedCapabilities+=ProvidedCapability)*
protected class Group_Group_4_2 extends GroupToken {
	
	public Group_Group_4_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getGroupAccess().getGroup_4_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_ProvidedCapabilitiesAssignment_4_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Group_CommaKeyword_4_2_0 extends KeywordToken  {
	
	public Group_CommaKeyword_4_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupAccess().getCommaKeyword_4_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_Group_4_2(parent, this, 0, inst);
			case 1: return new Group_ProvidedCapabilitiesAssignment_4_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// providedCapabilities+=ProvidedCapability
protected class Group_ProvidedCapabilitiesAssignment_4_2_1 extends AssignmentToken  {
	
	public Group_ProvidedCapabilitiesAssignment_4_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupAccess().getProvidedCapabilitiesAssignment_4_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("providedCapabilities",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("providedCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProvidedCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getGroupAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_4_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Group_CommaKeyword_4_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// asserts+=PreConditionAssert?
protected class Group_AssertsAssignment_5 extends AssignmentToken  {
	
	public Group_AssertsAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupAccess().getAssertsAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PreConditionAssert_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("asserts",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("asserts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPreConditionAssertRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getGroupAccess().getAssertsPreConditionAssertParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Group_Group_4(parent, next, actIndex, consumed);
			case 1: return new Group_NameAssignment_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// asserts+=PostConditionAssert?
protected class Group_AssertsAssignment_6 extends AssignmentToken  {
	
	public Group_AssertsAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupAccess().getAssertsAssignment_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostConditionAssert_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("asserts",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("asserts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPostConditionAssertRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getGroupAccess().getAssertsPostConditionAssertParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Group_AssertsAssignment_5(parent, next, actIndex, consumed);
			case 1: return new Group_Group_4(parent, next, actIndex, consumed);
			case 2: return new Group_NameAssignment_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class Group_LeftCurlyBracketKeyword_7 extends KeywordToken  {
	
	public Group_LeftCurlyBracketKeyword_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupAccess().getLeftCurlyBracketKeyword_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_AssertsAssignment_6(parent, this, 0, inst);
			case 1: return new Group_AssertsAssignment_5(parent, this, 1, inst);
			case 2: return new Group_Group_4(parent, this, 2, inst);
			case 3: return new Group_NameAssignment_3(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}

// prerequisites+=Prerequisite*
protected class Group_PrerequisitesAssignment_8 extends AssignmentToken  {
	
	public Group_PrerequisitesAssignment_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupAccess().getPrerequisitesAssignment_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("prerequisites",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("prerequisites");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrerequisiteRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getGroupAccess().getPrerequisitesPrerequisiteParserRuleCall_8_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Group_PrerequisitesAssignment_8(parent, next, actIndex, consumed);
			case 1: return new Group_LeftCurlyBracketKeyword_7(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Group_RightCurlyBracketKeyword_9 extends KeywordToken  {
	
	public Group_RightCurlyBracketKeyword_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupAccess().getRightCurlyBracketKeyword_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_PrerequisitesAssignment_8(parent, this, 0, inst);
			case 1: return new Group_LeftCurlyBracketKeyword_7(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Group ****************/


/************ begin Rule Prerequisite ****************
 *
 * Prerequisite:
 *   (surpressed?="void"? ("when" filter=Filter)? (alias=QualifiedName "=")? partReference
 *   =PrerequisiteEntry) closure=Closure? ";";
 *
 **/

// (surpressed?="void"? ("when" filter=Filter)? (alias=QualifiedName "=")? partReference
// =PrerequisiteEntry) closure=Closure? ";"
protected class Prerequisite_Group extends GroupToken {
	
	public Prerequisite_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_SemicolonKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPrerequisiteRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// surpressed?="void"? ("when" filter=Filter)? (alias=QualifiedName "=")? partReference=
// PrerequisiteEntry
protected class Prerequisite_Group_0 extends GroupToken {
	
	public Prerequisite_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_PartReferenceAssignment_0_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// surpressed?="void"?
protected class Prerequisite_SurpressedAssignment_0_0 extends AssignmentToken  {
	
	public Prerequisite_SurpressedAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getSurpressedAssignment_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("surpressed",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("surpressed");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getPrerequisiteAccess().getSurpressedVoidKeyword_0_0_0();
			return obj;
		}
		return null;
	}

}

// ("when" filter=Filter)?
protected class Prerequisite_Group_0_1 extends GroupToken {
	
	public Prerequisite_Group_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getGroup_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_FilterAssignment_0_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "when"
protected class Prerequisite_WhenKeyword_0_1_0 extends KeywordToken  {
	
	public Prerequisite_WhenKeyword_0_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getWhenKeyword_0_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_SurpressedAssignment_0_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// filter=Filter
protected class Prerequisite_FilterAssignment_0_1_1 extends AssignmentToken  {
	
	public Prerequisite_FilterAssignment_0_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getFilterAssignment_0_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Filter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("filter",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("filter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFilterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPrerequisiteAccess().getFilterFilterParserRuleCall_0_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Prerequisite_WhenKeyword_0_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// (alias=QualifiedName "=")?
protected class Prerequisite_Group_0_2 extends GroupToken {
	
	public Prerequisite_Group_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getGroup_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_EqualsSignKeyword_0_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// alias=QualifiedName
protected class Prerequisite_AliasAssignment_0_2_0 extends AssignmentToken  {
	
	public Prerequisite_AliasAssignment_0_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getAliasAssignment_0_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_Group_0_1(parent, this, 0, inst);
			case 1: return new Prerequisite_SurpressedAssignment_0_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("alias",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("alias");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getPrerequisiteAccess().getAliasQualifiedNameParserRuleCall_0_2_0_0();
			return obj;
		}
		return null;
	}

}

// "="
protected class Prerequisite_EqualsSignKeyword_0_2_1 extends KeywordToken  {
	
	public Prerequisite_EqualsSignKeyword_0_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getEqualsSignKeyword_0_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_AliasAssignment_0_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// partReference=PrerequisiteEntry
protected class Prerequisite_PartReferenceAssignment_0_3 extends AssignmentToken  {
	
	public Prerequisite_PartReferenceAssignment_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getPartReferenceAssignment_0_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrerequisiteEntry_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("partReference",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("partReference");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrerequisiteEntryRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPrerequisiteAccess().getPartReferencePrerequisiteEntryParserRuleCall_0_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Prerequisite_Group_0_2(parent, next, actIndex, consumed);
			case 1: return new Prerequisite_Group_0_1(parent, next, actIndex, consumed);
			case 2: return new Prerequisite_SurpressedAssignment_0_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 3, consumed);
		}	
	}	
}


// closure=Closure?
protected class Prerequisite_ClosureAssignment_1 extends AssignmentToken  {
	
	public Prerequisite_ClosureAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getClosureAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("closure",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("closure");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getClosureRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPrerequisiteAccess().getClosureClosureParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Prerequisite_Group_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Prerequisite_SemicolonKeyword_2 extends KeywordToken  {
	
	public Prerequisite_SemicolonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getSemicolonKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_ClosureAssignment_1(parent, this, 0, inst);
			case 1: return new Prerequisite_Group_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Prerequisite ****************/


/************ begin Rule Closure ****************
 *
 * Closure:
 *   "with" "{" ("properties" "{" ("unset" unsetProperties+=QualifiedName ";"|setProperties
 *   +=StringProperty)+ "}"|"unset" "property" unsetProperties+=QualifiedName ";"|
 *   setProperties+=StringProperty2|"advice" advice+=CompoundAdvice)* "}"; 
 * 	
 *       
 * 			//--PROPERTIES
 * 			                            
 * 			              
 * 			      
 * 			//--ADVICE
 *
 **/

// "with" "{" ("properties" "{" ("unset" unsetProperties+=QualifiedName ";"|setProperties
// +=StringProperty)+ "}"|"unset" "property" unsetProperties+=QualifiedName ";"|
// setProperties+=StringProperty2|"advice" advice+=CompoundAdvice)* "}"     
// 			//--PROPERTIES
// 			                            
// 			              
// 			      
// 			//--ADVICE
protected class Closure_Group extends GroupToken {
	
	public Closure_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getClosureAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_RightCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getClosureRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "with"
protected class Closure_WithKeyword_0 extends KeywordToken  {
	
	public Closure_WithKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureAccess().getWithKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "{"   
// 			//--PROPERTIES
protected class Closure_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public Closure_LeftCurlyBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureAccess().getLeftCurlyBracketKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_WithKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("properties" "{" ("unset" unsetProperties+=QualifiedName ";"|setProperties+=
// StringProperty)+ "}"|"unset" "property" unsetProperties+=QualifiedName ";"|
// setProperties+=StringProperty2|"advice" advice+=CompoundAdvice)* 
// 			//--PROPERTIES
// 			                            
// 			              
// 			      
// 			//--ADVICE
protected class Closure_Alternatives_2 extends AlternativesToken {

	public Closure_Alternatives_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getClosureAccess().getAlternatives_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_Group_2_0(parent, this, 0, inst);
			case 1: return new Closure_Group_2_1(parent, this, 1, inst);
			case 2: return new Closure_SetPropertiesAssignment_2_2(parent, this, 2, inst);
			case 3: return new Closure_Group_2_3(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}

// "properties" "{" ("unset" unsetProperties+=QualifiedName ";"|setProperties+=
// StringProperty)+ "}"
protected class Closure_Group_2_0 extends GroupToken {
	
	public Closure_Group_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getClosureAccess().getGroup_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_RightCurlyBracketKeyword_2_0_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "properties"
protected class Closure_PropertiesKeyword_2_0_0 extends KeywordToken  {
	
	public Closure_PropertiesKeyword_2_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureAccess().getPropertiesKeyword_2_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_Alternatives_2(parent, this, 0, inst);
			case 1: return new Closure_LeftCurlyBracketKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Closure_LeftCurlyBracketKeyword_2_0_1 extends KeywordToken  {
	
	public Closure_LeftCurlyBracketKeyword_2_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureAccess().getLeftCurlyBracketKeyword_2_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_PropertiesKeyword_2_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("unset" unsetProperties+=QualifiedName ";"|setProperties+=StringProperty)+
protected class Closure_Alternatives_2_0_2 extends AlternativesToken {

	public Closure_Alternatives_2_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getClosureAccess().getAlternatives_2_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_Group_2_0_2_0(parent, this, 0, inst);
			case 1: return new Closure_SetPropertiesAssignment_2_0_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "unset" unsetProperties+=QualifiedName ";"
protected class Closure_Group_2_0_2_0 extends GroupToken {
	
	public Closure_Group_2_0_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getClosureAccess().getGroup_2_0_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_SemicolonKeyword_2_0_2_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "unset"
protected class Closure_UnsetKeyword_2_0_2_0_0 extends KeywordToken  {
	
	public Closure_UnsetKeyword_2_0_2_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureAccess().getUnsetKeyword_2_0_2_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_Alternatives_2_0_2(parent, this, 0, inst);
			case 1: return new Closure_LeftCurlyBracketKeyword_2_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// unsetProperties+=QualifiedName
protected class Closure_UnsetPropertiesAssignment_2_0_2_0_1 extends AssignmentToken  {
	
	public Closure_UnsetPropertiesAssignment_2_0_2_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClosureAccess().getUnsetPropertiesAssignment_2_0_2_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_UnsetKeyword_2_0_2_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("unsetProperties",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("unsetProperties");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getClosureAccess().getUnsetPropertiesQualifiedNameParserRuleCall_2_0_2_0_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Closure_SemicolonKeyword_2_0_2_0_2 extends KeywordToken  {
	
	public Closure_SemicolonKeyword_2_0_2_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureAccess().getSemicolonKeyword_2_0_2_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_UnsetPropertiesAssignment_2_0_2_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// setProperties+=StringProperty
protected class Closure_SetPropertiesAssignment_2_0_2_1 extends AssignmentToken  {
	
	public Closure_SetPropertiesAssignment_2_0_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClosureAccess().getSetPropertiesAssignment_2_0_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("setProperties",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("setProperties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStringPropertyRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClosureAccess().getSetPropertiesStringPropertyParserRuleCall_2_0_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Closure_Alternatives_2_0_2(parent, next, actIndex, consumed);
			case 1: return new Closure_LeftCurlyBracketKeyword_2_0_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class Closure_RightCurlyBracketKeyword_2_0_3 extends KeywordToken  {
	
	public Closure_RightCurlyBracketKeyword_2_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureAccess().getRightCurlyBracketKeyword_2_0_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_Alternatives_2_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "unset" "property" unsetProperties+=QualifiedName ";"
protected class Closure_Group_2_1 extends GroupToken {
	
	public Closure_Group_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getClosureAccess().getGroup_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_SemicolonKeyword_2_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "unset"
protected class Closure_UnsetKeyword_2_1_0 extends KeywordToken  {
	
	public Closure_UnsetKeyword_2_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureAccess().getUnsetKeyword_2_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_Alternatives_2(parent, this, 0, inst);
			case 1: return new Closure_LeftCurlyBracketKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "property"
protected class Closure_PropertyKeyword_2_1_1 extends KeywordToken  {
	
	public Closure_PropertyKeyword_2_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureAccess().getPropertyKeyword_2_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_UnsetKeyword_2_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// unsetProperties+=QualifiedName
protected class Closure_UnsetPropertiesAssignment_2_1_2 extends AssignmentToken  {
	
	public Closure_UnsetPropertiesAssignment_2_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClosureAccess().getUnsetPropertiesAssignment_2_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_PropertyKeyword_2_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("unsetProperties",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("unsetProperties");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getClosureAccess().getUnsetPropertiesQualifiedNameParserRuleCall_2_1_2_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Closure_SemicolonKeyword_2_1_3 extends KeywordToken  {
	
	public Closure_SemicolonKeyword_2_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureAccess().getSemicolonKeyword_2_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_UnsetPropertiesAssignment_2_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// setProperties+=StringProperty2
protected class Closure_SetPropertiesAssignment_2_2 extends AssignmentToken  {
	
	public Closure_SetPropertiesAssignment_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClosureAccess().getSetPropertiesAssignment_2_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty2_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("setProperties",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("setProperties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStringProperty2Rule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClosureAccess().getSetPropertiesStringProperty2ParserRuleCall_2_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Closure_Alternatives_2(parent, next, actIndex, consumed);
			case 1: return new Closure_LeftCurlyBracketKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "advice" advice+=CompoundAdvice
protected class Closure_Group_2_3 extends GroupToken {
	
	public Closure_Group_2_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getClosureAccess().getGroup_2_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_AdviceAssignment_2_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "advice"
protected class Closure_AdviceKeyword_2_3_0 extends KeywordToken  {
	
	public Closure_AdviceKeyword_2_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureAccess().getAdviceKeyword_2_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_Alternatives_2(parent, this, 0, inst);
			case 1: return new Closure_LeftCurlyBracketKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// advice+=CompoundAdvice
protected class Closure_AdviceAssignment_2_3_1 extends AssignmentToken  {
	
	public Closure_AdviceAssignment_2_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClosureAccess().getAdviceAssignment_2_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundAdvice_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("advice",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("advice");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompoundAdviceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClosureAccess().getAdviceCompoundAdviceParserRuleCall_2_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Closure_AdviceKeyword_2_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// "}"
protected class Closure_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public Closure_RightCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureAccess().getRightCurlyBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_Alternatives_2(parent, this, 0, inst);
			case 1: return new Closure_LeftCurlyBracketKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Closure ****************/


/************ begin Rule PrerequisiteEntry ****************
 *
 * PrerequisiteEntry:
 *   PartInSelf|CapabilityReferencedPart|CompoundReferences;
 *
 **/

// PartInSelf|CapabilityReferencedPart|CompoundReferences
protected class PrerequisiteEntry_Alternatives extends AlternativesToken {

	public PrerequisiteEntry_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getPrerequisiteEntryAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrerequisiteEntry_PartInSelfParserRuleCall_0(parent, this, 0, inst);
			case 1: return new PrerequisiteEntry_CapabilityReferencedPartParserRuleCall_1(parent, this, 1, inst);
			case 2: return new PrerequisiteEntry_CompoundReferencesParserRuleCall_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPrerequisiteEntryRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// PartInSelf
protected class PrerequisiteEntry_PartInSelfParserRuleCall_0 extends RuleCallToken {
	
	public PrerequisiteEntry_PartInSelfParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrerequisiteEntryAccess().getPartInSelfParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PartInSelf_PartNameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(PartInSelf_PartNameAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPartInSelfRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// CapabilityReferencedPart
protected class PrerequisiteEntry_CapabilityReferencedPartParserRuleCall_1 extends RuleCallToken {
	
	public PrerequisiteEntry_CapabilityReferencedPartParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrerequisiteEntryAccess().getCapabilityReferencedPartParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CapabilityReferencedPart_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCapabilityReferencedPartRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// CompoundReferences
protected class PrerequisiteEntry_CompoundReferencesParserRuleCall_2 extends RuleCallToken {
	
	public PrerequisiteEntry_CompoundReferencesParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrerequisiteEntryAccess().getCompoundReferencesParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundReferences_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CompoundReferences_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCompoundReferencesRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule PrerequisiteEntry ****************/


/************ begin Rule PartInSelf ****************
 *
 * PartInSelf:
 *   partName=PartName; 
 * 	
 * 	      // i.e. self#partName
 *
 **/

// partName=PartName      // i.e. self#partName
protected class PartInSelf_PartNameAssignment extends AssignmentToken  {
	
	public PartInSelf_PartNameAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPartInSelfAccess().getPartNameAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPartInSelfRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("partName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("partName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getPartInSelfAccess().getPartNamePartNameParserRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule PartInSelf ****************/


/************ begin Rule CapabilityReferencedPart ****************
 *
 * CapabilityReferencedPart:
 *   interface=InterfaceName "/" name=UnitName ("/" range=VersionRange)? "#" partName=
 *   PartName|interface=InterfaceName "/" name=UnitName ("/" range=VersionRange)?;
 *
 **/

// interface=InterfaceName "/" name=UnitName ("/" range=VersionRange)? "#" partName=
// PartName|interface=InterfaceName "/" name=UnitName ("/" range=VersionRange)?
protected class CapabilityReferencedPart_Alternatives extends AlternativesToken {

	public CapabilityReferencedPart_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_Group_0(parent, this, 0, inst);
			case 1: return new CapabilityReferencedPart_Group_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCapabilityReferencedPartRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// interface=InterfaceName "/" name=UnitName ("/" range=VersionRange)? "#" partName=
// PartName
protected class CapabilityReferencedPart_Group_0 extends GroupToken {
	
	public CapabilityReferencedPart_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_PartNameAssignment_0_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// interface=InterfaceName
protected class CapabilityReferencedPart_InterfaceAssignment_0_0 extends AssignmentToken  {
	
	public CapabilityReferencedPart_InterfaceAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getInterfaceAssignment_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("interface",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("interface");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getCapabilityReferencedPartAccess().getInterfaceInterfaceNameParserRuleCall_0_0_0();
			return obj;
		}
		return null;
	}

}

// "/"
protected class CapabilityReferencedPart_SolidusKeyword_0_1 extends KeywordToken  {
	
	public CapabilityReferencedPart_SolidusKeyword_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getSolidusKeyword_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_InterfaceAssignment_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=UnitName
protected class CapabilityReferencedPart_NameAssignment_0_2 extends AssignmentToken  {
	
	public CapabilityReferencedPart_NameAssignment_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getNameAssignment_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_SolidusKeyword_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getCapabilityReferencedPartAccess().getNameUnitNameParserRuleCall_0_2_0();
			return obj;
		}
		return null;
	}

}

// ("/" range=VersionRange)?
protected class CapabilityReferencedPart_Group_0_3 extends GroupToken {
	
	public CapabilityReferencedPart_Group_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getGroup_0_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_RangeAssignment_0_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "/"
protected class CapabilityReferencedPart_SolidusKeyword_0_3_0 extends KeywordToken  {
	
	public CapabilityReferencedPart_SolidusKeyword_0_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getSolidusKeyword_0_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_NameAssignment_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// range=VersionRange
protected class CapabilityReferencedPart_RangeAssignment_0_3_1 extends AssignmentToken  {
	
	public CapabilityReferencedPart_RangeAssignment_0_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getRangeAssignment_0_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_SolidusKeyword_0_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("range",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("range");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getCapabilityReferencedPartAccess().getRangeVersionRangeParserRuleCall_0_3_1_0();
			return obj;
		}
		return null;
	}

}


// "#"
protected class CapabilityReferencedPart_NumberSignKeyword_0_4 extends KeywordToken  {
	
	public CapabilityReferencedPart_NumberSignKeyword_0_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getNumberSignKeyword_0_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_Group_0_3(parent, this, 0, inst);
			case 1: return new CapabilityReferencedPart_NameAssignment_0_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// partName=PartName
protected class CapabilityReferencedPart_PartNameAssignment_0_5 extends AssignmentToken  {
	
	public CapabilityReferencedPart_PartNameAssignment_0_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getPartNameAssignment_0_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_NumberSignKeyword_0_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("partName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("partName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getCapabilityReferencedPartAccess().getPartNamePartNameParserRuleCall_0_5_0();
			return obj;
		}
		return null;
	}

}


// interface=InterfaceName "/" name=UnitName ("/" range=VersionRange)?
protected class CapabilityReferencedPart_Group_1 extends GroupToken {
	
	public CapabilityReferencedPart_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_Group_1_3(parent, this, 0, inst);
			case 1: return new CapabilityReferencedPart_NameAssignment_1_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// interface=InterfaceName
protected class CapabilityReferencedPart_InterfaceAssignment_1_0 extends AssignmentToken  {
	
	public CapabilityReferencedPart_InterfaceAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getInterfaceAssignment_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("interface",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("interface");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getCapabilityReferencedPartAccess().getInterfaceInterfaceNameParserRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// "/"
protected class CapabilityReferencedPart_SolidusKeyword_1_1 extends KeywordToken  {
	
	public CapabilityReferencedPart_SolidusKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getSolidusKeyword_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_InterfaceAssignment_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=UnitName
protected class CapabilityReferencedPart_NameAssignment_1_2 extends AssignmentToken  {
	
	public CapabilityReferencedPart_NameAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getNameAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_SolidusKeyword_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getCapabilityReferencedPartAccess().getNameUnitNameParserRuleCall_1_2_0();
			return obj;
		}
		return null;
	}

}

// ("/" range=VersionRange)?
protected class CapabilityReferencedPart_Group_1_3 extends GroupToken {
	
	public CapabilityReferencedPart_Group_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getGroup_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_RangeAssignment_1_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "/"
protected class CapabilityReferencedPart_SolidusKeyword_1_3_0 extends KeywordToken  {
	
	public CapabilityReferencedPart_SolidusKeyword_1_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getSolidusKeyword_1_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_NameAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// range=VersionRange
protected class CapabilityReferencedPart_RangeAssignment_1_3_1 extends AssignmentToken  {
	
	public CapabilityReferencedPart_RangeAssignment_1_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getRangeAssignment_1_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_SolidusKeyword_1_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("range",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("range");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getCapabilityReferencedPartAccess().getRangeVersionRangeParserRuleCall_1_3_1_0();
			return obj;
		}
		return null;
	}

}




/************ end Rule CapabilityReferencedPart ****************/


/************ begin Rule CompoundReferences ****************
 *
 * CompoundReferences:
 *   "{" prerequisites+=Prerequisite* "}";
 *
 **/

// "{" prerequisites+=Prerequisite* "}"
protected class CompoundReferences_Group extends GroupToken {
	
	public CompoundReferences_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCompoundReferencesAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundReferences_RightCurlyBracketKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCompoundReferencesRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "{"
protected class CompoundReferences_LeftCurlyBracketKeyword_0 extends KeywordToken  {
	
	public CompoundReferences_LeftCurlyBracketKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundReferencesAccess().getLeftCurlyBracketKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// prerequisites+=Prerequisite*
protected class CompoundReferences_PrerequisitesAssignment_1 extends AssignmentToken  {
	
	public CompoundReferences_PrerequisitesAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundReferencesAccess().getPrerequisitesAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("prerequisites",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("prerequisites");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrerequisiteRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompoundReferencesAccess().getPrerequisitesPrerequisiteParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompoundReferences_PrerequisitesAssignment_1(parent, next, actIndex, consumed);
			case 1: return new CompoundReferences_LeftCurlyBracketKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class CompoundReferences_RightCurlyBracketKeyword_2 extends KeywordToken  {
	
	public CompoundReferences_RightCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundReferencesAccess().getRightCurlyBracketKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundReferences_PrerequisitesAssignment_1(parent, this, 0, inst);
			case 1: return new CompoundReferences_LeftCurlyBracketKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule CompoundReferences ****************/


/************ begin Rule Action ****************
 *
 * Action returns ActionPart:
 *   visibility=Visibility? synchronized?="synchronized"? "action" PartName "actor"
 *   QualifiedName "(" (actorParameters+=Parameter ("," actorParameters+=Parameter)*)? ")"
 *   ("provides" providedCapabilities+=ProvidedCapability ("," providedCapabilities+=
 *   ProvidedCapability)*)? asserts+=PreConditionAssert? asserts+=PostConditionAssert?
 *   "{" resultGroups+=Result* "}";
 *
 **/

// visibility=Visibility? synchronized?="synchronized"? "action" PartName "actor"
// QualifiedName "(" (actorParameters+=Parameter ("," actorParameters+=Parameter)*)? ")"
// ("provides" providedCapabilities+=ProvidedCapability ("," providedCapabilities+=
// ProvidedCapability)*)? asserts+=PreConditionAssert? asserts+=PostConditionAssert?
// "{" resultGroups+=Result* "}"
protected class Action_Group extends GroupToken {
	
	public Action_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getActionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_RightCurlyBracketKeyword_14(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getActionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// visibility=Visibility?
protected class Action_VisibilityAssignment_0 extends AssignmentToken  {
	
	public Action_VisibilityAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getVisibilityAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("visibility",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("visibility");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getActionAccess().getVisibilityVisibilityEnumRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// synchronized?="synchronized"?
protected class Action_SynchronizedAssignment_1 extends AssignmentToken  {
	
	public Action_SynchronizedAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getSynchronizedAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_VisibilityAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("synchronized",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("synchronized");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getActionAccess().getSynchronizedSynchronizedKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// "action"
protected class Action_ActionKeyword_2 extends KeywordToken  {
	
	public Action_ActionKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getActionAccess().getActionKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_SynchronizedAssignment_1(parent, this, 0, inst);
			case 1: return new Action_VisibilityAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}	
		
}

// PartName
protected class Action_PartNameParserRuleCall_3 extends UnassignedTextToken {

	public Action_PartNameParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getActionAccess().getPartNameParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_ActionKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "actor"
protected class Action_ActorKeyword_4 extends KeywordToken  {
	
	public Action_ActorKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getActionAccess().getActorKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_PartNameParserRuleCall_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// QualifiedName
protected class Action_QualifiedNameParserRuleCall_5 extends UnassignedTextToken {

	public Action_QualifiedNameParserRuleCall_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getActionAccess().getQualifiedNameParserRuleCall_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_ActorKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class Action_LeftParenthesisKeyword_6 extends KeywordToken  {
	
	public Action_LeftParenthesisKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getActionAccess().getLeftParenthesisKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_QualifiedNameParserRuleCall_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (actorParameters+=Parameter ("," actorParameters+=Parameter)*)?
protected class Action_Group_7 extends GroupToken {
	
	public Action_Group_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getActionAccess().getGroup_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_Group_7_1(parent, this, 0, inst);
			case 1: return new Action_ActorParametersAssignment_7_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// actorParameters+=Parameter
protected class Action_ActorParametersAssignment_7_0 extends AssignmentToken  {
	
	public Action_ActorParametersAssignment_7_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getActorParametersAssignment_7_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parameter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("actorParameters",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("actorParameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getActionAccess().getActorParametersParameterParserRuleCall_7_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Action_LeftParenthesisKeyword_6(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," actorParameters+=Parameter)*
protected class Action_Group_7_1 extends GroupToken {
	
	public Action_Group_7_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getActionAccess().getGroup_7_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_ActorParametersAssignment_7_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Action_CommaKeyword_7_1_0 extends KeywordToken  {
	
	public Action_CommaKeyword_7_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getActionAccess().getCommaKeyword_7_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_Group_7_1(parent, this, 0, inst);
			case 1: return new Action_ActorParametersAssignment_7_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// actorParameters+=Parameter
protected class Action_ActorParametersAssignment_7_1_1 extends AssignmentToken  {
	
	public Action_ActorParametersAssignment_7_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getActorParametersAssignment_7_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parameter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("actorParameters",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("actorParameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getActionAccess().getActorParametersParameterParserRuleCall_7_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Action_CommaKeyword_7_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class Action_RightParenthesisKeyword_8 extends KeywordToken  {
	
	public Action_RightParenthesisKeyword_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getActionAccess().getRightParenthesisKeyword_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_Group_7(parent, this, 0, inst);
			case 1: return new Action_LeftParenthesisKeyword_6(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ("provides" providedCapabilities+=ProvidedCapability ("," providedCapabilities+=
// ProvidedCapability)*)?
protected class Action_Group_9 extends GroupToken {
	
	public Action_Group_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getActionAccess().getGroup_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_Group_9_2(parent, this, 0, inst);
			case 1: return new Action_ProvidedCapabilitiesAssignment_9_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "provides"
protected class Action_ProvidesKeyword_9_0 extends KeywordToken  {
	
	public Action_ProvidesKeyword_9_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getActionAccess().getProvidesKeyword_9_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_RightParenthesisKeyword_8(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// providedCapabilities+=ProvidedCapability
protected class Action_ProvidedCapabilitiesAssignment_9_1 extends AssignmentToken  {
	
	public Action_ProvidedCapabilitiesAssignment_9_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getProvidedCapabilitiesAssignment_9_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("providedCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("providedCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProvidedCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getActionAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_9_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Action_ProvidesKeyword_9_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," providedCapabilities+=ProvidedCapability)*
protected class Action_Group_9_2 extends GroupToken {
	
	public Action_Group_9_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getActionAccess().getGroup_9_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_ProvidedCapabilitiesAssignment_9_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Action_CommaKeyword_9_2_0 extends KeywordToken  {
	
	public Action_CommaKeyword_9_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getActionAccess().getCommaKeyword_9_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_Group_9_2(parent, this, 0, inst);
			case 1: return new Action_ProvidedCapabilitiesAssignment_9_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// providedCapabilities+=ProvidedCapability
protected class Action_ProvidedCapabilitiesAssignment_9_2_1 extends AssignmentToken  {
	
	public Action_ProvidedCapabilitiesAssignment_9_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getProvidedCapabilitiesAssignment_9_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("providedCapabilities",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("providedCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProvidedCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getActionAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_9_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Action_CommaKeyword_9_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// asserts+=PreConditionAssert?
protected class Action_AssertsAssignment_10 extends AssignmentToken  {
	
	public Action_AssertsAssignment_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getAssertsAssignment_10();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PreConditionAssert_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("asserts",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("asserts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPreConditionAssertRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getActionAccess().getAssertsPreConditionAssertParserRuleCall_10_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Action_Group_9(parent, next, actIndex, consumed);
			case 1: return new Action_RightParenthesisKeyword_8(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// asserts+=PostConditionAssert?
protected class Action_AssertsAssignment_11 extends AssignmentToken  {
	
	public Action_AssertsAssignment_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getAssertsAssignment_11();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostConditionAssert_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("asserts",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("asserts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPostConditionAssertRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getActionAccess().getAssertsPostConditionAssertParserRuleCall_11_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Action_AssertsAssignment_10(parent, next, actIndex, consumed);
			case 1: return new Action_Group_9(parent, next, actIndex, consumed);
			case 2: return new Action_RightParenthesisKeyword_8(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class Action_LeftCurlyBracketKeyword_12 extends KeywordToken  {
	
	public Action_LeftCurlyBracketKeyword_12(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getActionAccess().getLeftCurlyBracketKeyword_12();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_AssertsAssignment_11(parent, this, 0, inst);
			case 1: return new Action_AssertsAssignment_10(parent, this, 1, inst);
			case 2: return new Action_Group_9(parent, this, 2, inst);
			case 3: return new Action_RightParenthesisKeyword_8(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}

// resultGroups+=Result*
protected class Action_ResultGroupsAssignment_13 extends AssignmentToken  {
	
	public Action_ResultGroupsAssignment_13(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getResultGroupsAssignment_13();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Result_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("resultGroups",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("resultGroups");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getResultRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getActionAccess().getResultGroupsResultParserRuleCall_13_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Action_ResultGroupsAssignment_13(parent, next, actIndex, consumed);
			case 1: return new Action_LeftCurlyBracketKeyword_12(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Action_RightCurlyBracketKeyword_14 extends KeywordToken  {
	
	public Action_RightCurlyBracketKeyword_14(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getActionAccess().getRightCurlyBracketKeyword_14();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_ResultGroupsAssignment_13(parent, this, 0, inst);
			case 1: return new Action_LeftCurlyBracketKeyword_12(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Action ****************/


/************ begin Rule Parameter ****************
 *
 * Parameter:
 *   name=QualifiedName "=" value=Expression; 
 * 
 * 
 * 	        
 * 	
 * / *	
 * Result
 * 	: result += BasicResult
 * 	| '[' (result+=Result)* ']'
 * // 	| group=ResultGroup result+=Result 	// TODO: Wanted, but creates Left recursion
 * 	| group=ResultGroup '{' (result+=Result)* '}' (closure=Closure)?	
 * 	; 
 * * /
 *
 **/

// name=QualifiedName "=" value=Expression
protected class Parameter_Group extends GroupToken {
	
	public Parameter_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getParameterAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parameter_ValueAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getParameterRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=QualifiedName
protected class Parameter_NameAssignment_0 extends AssignmentToken  {
	
	public Parameter_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getParameterAccess().getNameQualifiedNameParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "="
protected class Parameter_EqualsSignKeyword_1 extends KeywordToken  {
	
	public Parameter_EqualsSignKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getParameterAccess().getEqualsSignKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parameter_NameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// value=Expression
protected class Parameter_ValueAssignment_2 extends AssignmentToken  {
	
	public Parameter_ValueAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterAccess().getValueAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_ValueExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getParameterAccess().getValueExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Parameter_EqualsSignKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Parameter ****************/


/************ begin Rule Result ****************
 *
 * Result:
 *   result+=ResultPart group=ResultGroup?; 
 * / *	
 * Result
 * 	: result += BasicResult
 * 	| '[' (result+=Result)* ']'
 * // 	| group=ResultGroup result+=Result 	// TODO: Wanted, but creates Left recursion
 * 	| group=ResultGroup '{' (result+=Result)* '}' (closure=Closure)?	
 * 	; 
 * * /
 *
 **/

// result+=ResultPart group=ResultGroup?
protected class Result_Group extends GroupToken {
	
	public Result_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getResultAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Result_GroupAssignment_1(parent, this, 0, inst);
			case 1: return new Result_ResultAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getResultRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// result+=ResultPart
protected class Result_ResultAssignment_0 extends AssignmentToken  {
	
	public Result_ResultAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getResultAccess().getResultAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ResultPart_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("result",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("result");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getResultPartRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getResultAccess().getResultResultPartParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// group=ResultGroup?
protected class Result_GroupAssignment_1 extends AssignmentToken  {
	
	public Result_GroupAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getResultAccess().getGroupAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ResultGroup_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("group",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("group");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getResultGroupRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getResultAccess().getGroupResultGroupParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Result_ResultAssignment_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Result ****************/


/************ begin Rule ResultPart ****************
 *
 * ResultPart returns Result:
 *   BasicResult|"{" result+=BasicResult* "}";  
 * 	
 *     
 * 	  
 * 	      
 * 	
 * 	
 * / * SIMPLIFIED VERSION OF THE ABOVE (FOR TESTING) - DO NOT REMOVE YET - see issue above.
 * //  Result R, and Group G, Closure C, syntax
 * R 	: result += BR
 * 	| '[' (result +=R)* ']'
 * 	| group=G result+=R
 * 	| group=G '{' (result+=R)* '}' (closure=C)?
 * 	;
 * 	
 * BR	returns R: 'R' '{'  '}' (closure=C)? ;
 * G	: 'G' '{'  (prerequisites += P)* '}' ;
 * C	: 'C' ;
 * P	: 'P' 
 * 	| '{' P* '}'
 * 	;
 * * /
 *
 **/

// BasicResult|"{" result+=BasicResult* "}"  
// 	
//     
// 	  
// 	      
// 	
// 	
// / * SIMPLIFIED VERSION OF THE ABOVE (FOR TESTING) - DO NOT REMOVE YET - see issue above.
// //  Result R, and Group G, Closure C, syntax
// R 	: result += BR
// 	| '[' (result +=R)* ']'
// 	| group=G result+=R
// 	| group=G '{' (result+=R)* '}' (closure=C)?
// 	;
// 	
// BR	returns R: 'R' '{'  '}' (closure=C)? ;
// G	: 'G' '{'  (prerequisites += P)* '}' ;
// C	: 'C' ;
// P	: 'P' 
// 	| '{' P* '}'
// 	;
// * /
protected class ResultPart_Alternatives extends AlternativesToken {

	public ResultPart_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getResultPartAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ResultPart_BasicResultParserRuleCall_0(parent, this, 0, inst);
			case 1: return new ResultPart_Group_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getResultPartRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// BasicResult
protected class ResultPart_BasicResultParserRuleCall_0 extends RuleCallToken {
	
	public ResultPart_BasicResultParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getResultPartAccess().getBasicResultParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasicResult_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(BasicResult_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBasicResultRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// "{" result+=BasicResult* "}"
protected class ResultPart_Group_1 extends GroupToken {
	
	public ResultPart_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getResultPartAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ResultPart_RightCurlyBracketKeyword_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class ResultPart_LeftCurlyBracketKeyword_1_0 extends KeywordToken  {
	
	public ResultPart_LeftCurlyBracketKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getResultPartAccess().getLeftCurlyBracketKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// result+=BasicResult*
protected class ResultPart_ResultAssignment_1_1 extends AssignmentToken  {
	
	public ResultPart_ResultAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getResultPartAccess().getResultAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasicResult_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("result",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("result");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBasicResultRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getResultPartAccess().getResultBasicResultParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ResultPart_ResultAssignment_1_1(parent, next, actIndex, consumed);
			case 1: return new ResultPart_LeftCurlyBracketKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class ResultPart_RightCurlyBracketKeyword_1_2 extends KeywordToken  {
	
	public ResultPart_RightCurlyBracketKeyword_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getResultPartAccess().getRightCurlyBracketKeyword_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ResultPart_ResultAssignment_1_1(parent, this, 0, inst);
			case 1: return new ResultPart_LeftCurlyBracketKeyword_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule ResultPart ****************/


/************ begin Rule BasicResult ****************
 *
 * BasicResult returns Result:
 *   ("when" filter=Filter)? visibility=Visibility? "result" name=PartName? asserts+=
 *   PreConditionAssert? asserts+=PostConditionAssert? "{" paths+=PathGroup* "}" closure=
 *   Closure?; 
 * 	
 * / * SIMPLIFIED VERSION OF THE ABOVE (FOR TESTING) - DO NOT REMOVE YET - see issue above.
 * //  Result R, and Group G, Closure C, syntax
 * R 	: result += BR
 * 	| '[' (result +=R)* ']'
 * 	| group=G result+=R
 * 	| group=G '{' (result+=R)* '}' (closure=C)?
 * 	;
 * 	
 * BR	returns R: 'R' '{'  '}' (closure=C)? ;
 * G	: 'G' '{'  (prerequisites += P)* '}' ;
 * C	: 'C' ;
 * P	: 'P' 
 * 	| '{' P* '}'
 * 	;
 * * /
 *
 **/

// ("when" filter=Filter)? visibility=Visibility? "result" name=PartName? asserts+=
// PreConditionAssert? asserts+=PostConditionAssert? "{" paths+=PathGroup* "}" closure=
// Closure?
protected class BasicResult_Group extends GroupToken {
	
	public BasicResult_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBasicResultAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasicResult_ClosureAssignment_9(parent, this, 0, inst);
			case 1: return new BasicResult_RightCurlyBracketKeyword_8(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBasicResultRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ("when" filter=Filter)?
protected class BasicResult_Group_0 extends GroupToken {
	
	public BasicResult_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBasicResultAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasicResult_FilterAssignment_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "when"
protected class BasicResult_WhenKeyword_0_0 extends KeywordToken  {
	
	public BasicResult_WhenKeyword_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBasicResultAccess().getWhenKeyword_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// filter=Filter
protected class BasicResult_FilterAssignment_0_1 extends AssignmentToken  {
	
	public BasicResult_FilterAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBasicResultAccess().getFilterAssignment_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Filter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("filter",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("filter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFilterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBasicResultAccess().getFilterFilterParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BasicResult_WhenKeyword_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// visibility=Visibility?
protected class BasicResult_VisibilityAssignment_1 extends AssignmentToken  {
	
	public BasicResult_VisibilityAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBasicResultAccess().getVisibilityAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasicResult_Group_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("visibility",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("visibility");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getBasicResultAccess().getVisibilityVisibilityEnumRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "result"
protected class BasicResult_ResultKeyword_2 extends KeywordToken  {
	
	public BasicResult_ResultKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBasicResultAccess().getResultKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasicResult_VisibilityAssignment_1(parent, this, 0, inst);
			case 1: return new BasicResult_Group_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}	
		
}

// name=PartName?
protected class BasicResult_NameAssignment_3 extends AssignmentToken  {
	
	public BasicResult_NameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBasicResultAccess().getNameAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasicResult_ResultKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getBasicResultAccess().getNamePartNameParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// asserts+=PreConditionAssert?
protected class BasicResult_AssertsAssignment_4 extends AssignmentToken  {
	
	public BasicResult_AssertsAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBasicResultAccess().getAssertsAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PreConditionAssert_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("asserts",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("asserts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPreConditionAssertRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBasicResultAccess().getAssertsPreConditionAssertParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BasicResult_NameAssignment_3(parent, next, actIndex, consumed);
			case 1: return new BasicResult_ResultKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// asserts+=PostConditionAssert?
protected class BasicResult_AssertsAssignment_5 extends AssignmentToken  {
	
	public BasicResult_AssertsAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBasicResultAccess().getAssertsAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostConditionAssert_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("asserts",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("asserts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPostConditionAssertRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBasicResultAccess().getAssertsPostConditionAssertParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BasicResult_AssertsAssignment_4(parent, next, actIndex, consumed);
			case 1: return new BasicResult_NameAssignment_3(parent, next, actIndex, consumed);
			case 2: return new BasicResult_ResultKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class BasicResult_LeftCurlyBracketKeyword_6 extends KeywordToken  {
	
	public BasicResult_LeftCurlyBracketKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBasicResultAccess().getLeftCurlyBracketKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasicResult_AssertsAssignment_5(parent, this, 0, inst);
			case 1: return new BasicResult_AssertsAssignment_4(parent, this, 1, inst);
			case 2: return new BasicResult_NameAssignment_3(parent, this, 2, inst);
			case 3: return new BasicResult_ResultKeyword_2(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}

// paths+=PathGroup*
protected class BasicResult_PathsAssignment_7 extends AssignmentToken  {
	
	public BasicResult_PathsAssignment_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBasicResultAccess().getPathsAssignment_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("paths",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("paths");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPathGroupRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBasicResultAccess().getPathsPathGroupParserRuleCall_7_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BasicResult_PathsAssignment_7(parent, next, actIndex, consumed);
			case 1: return new BasicResult_LeftCurlyBracketKeyword_6(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class BasicResult_RightCurlyBracketKeyword_8 extends KeywordToken  {
	
	public BasicResult_RightCurlyBracketKeyword_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBasicResultAccess().getRightCurlyBracketKeyword_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasicResult_PathsAssignment_7(parent, this, 0, inst);
			case 1: return new BasicResult_LeftCurlyBracketKeyword_6(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// closure=Closure?
protected class BasicResult_ClosureAssignment_9 extends AssignmentToken  {
	
	public BasicResult_ClosureAssignment_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBasicResultAccess().getClosureAssignment_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("closure",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("closure");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getClosureRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBasicResultAccess().getClosureClosureParserRuleCall_9_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BasicResult_RightCurlyBracketKeyword_8(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule BasicResult ****************/


/************ begin Rule ResultGroup ****************
 *
 * ResultGroup:
 *   "group" asserts+=PreConditionAssert? asserts+=PostConditionAssert? "{" prerequisites
 *   +=Prerequisite* "}" closure=Closure?;
 *
 **/

// "group" asserts+=PreConditionAssert? asserts+=PostConditionAssert? "{" prerequisites
// +=Prerequisite* "}" closure=Closure?
protected class ResultGroup_Group extends GroupToken {
	
	public ResultGroup_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getResultGroupAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ResultGroup_ClosureAssignment_6(parent, this, 0, inst);
			case 1: return new ResultGroup_RightCurlyBracketKeyword_5(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getResultGroupRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "group"
protected class ResultGroup_GroupKeyword_0 extends KeywordToken  {
	
	public ResultGroup_GroupKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getResultGroupAccess().getGroupKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// asserts+=PreConditionAssert?
protected class ResultGroup_AssertsAssignment_1 extends AssignmentToken  {
	
	public ResultGroup_AssertsAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getResultGroupAccess().getAssertsAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PreConditionAssert_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("asserts",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("asserts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPreConditionAssertRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getResultGroupAccess().getAssertsPreConditionAssertParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ResultGroup_GroupKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// asserts+=PostConditionAssert?
protected class ResultGroup_AssertsAssignment_2 extends AssignmentToken  {
	
	public ResultGroup_AssertsAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getResultGroupAccess().getAssertsAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostConditionAssert_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("asserts",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("asserts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPostConditionAssertRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getResultGroupAccess().getAssertsPostConditionAssertParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ResultGroup_AssertsAssignment_1(parent, next, actIndex, consumed);
			case 1: return new ResultGroup_GroupKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class ResultGroup_LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public ResultGroup_LeftCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getResultGroupAccess().getLeftCurlyBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ResultGroup_AssertsAssignment_2(parent, this, 0, inst);
			case 1: return new ResultGroup_AssertsAssignment_1(parent, this, 1, inst);
			case 2: return new ResultGroup_GroupKeyword_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// prerequisites+=Prerequisite*
protected class ResultGroup_PrerequisitesAssignment_4 extends AssignmentToken  {
	
	public ResultGroup_PrerequisitesAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getResultGroupAccess().getPrerequisitesAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("prerequisites",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("prerequisites");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrerequisiteRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getResultGroupAccess().getPrerequisitesPrerequisiteParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ResultGroup_PrerequisitesAssignment_4(parent, next, actIndex, consumed);
			case 1: return new ResultGroup_LeftCurlyBracketKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class ResultGroup_RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public ResultGroup_RightCurlyBracketKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getResultGroupAccess().getRightCurlyBracketKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ResultGroup_PrerequisitesAssignment_4(parent, this, 0, inst);
			case 1: return new ResultGroup_LeftCurlyBracketKeyword_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// closure=Closure?
protected class ResultGroup_ClosureAssignment_6 extends AssignmentToken  {
	
	public ResultGroup_ClosureAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getResultGroupAccess().getClosureAssignment_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("closure",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("closure");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getClosureRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getResultGroupAccess().getClosureClosureParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ResultGroup_RightCurlyBracketKeyword_5(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ResultGroup ****************/


/************ begin Rule RepositoryConfiguration ****************
 *
 * RepositoryConfiguration:
 *   (location=URI|"resolver" resolverClass=QualifiedName) advice=CompoundAdvice? ";"; 
 * 
 * 
 * 	              
 * 	
 * 
 * / *
 * ** URI TODO: Would like to have better parsing of URL - don't know if possible to push this to lexer
 * ** as we may want to support namespaces (using 'ns:' prefix) (for importing b3 files, common advice, rules etc.).
 * ** The ':' clashes with 'scheme:' which is the only known part in an opaque URI. 
 * * /
 *
 **/

// (location=URI|"resolver" resolverClass=QualifiedName) advice=CompoundAdvice? ";"
protected class RepositoryConfiguration_Group extends GroupToken {
	
	public RepositoryConfiguration_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRepositoryConfigurationAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryConfiguration_SemicolonKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRepositoryConfigurationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// location=URI|"resolver" resolverClass=QualifiedName
protected class RepositoryConfiguration_Alternatives_0 extends AlternativesToken {

	public RepositoryConfiguration_Alternatives_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getRepositoryConfigurationAccess().getAlternatives_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryConfiguration_LocationAssignment_0_0(parent, this, 0, inst);
			case 1: return new RepositoryConfiguration_Group_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// location=URI
protected class RepositoryConfiguration_LocationAssignment_0_0 extends AssignmentToken  {
	
	public RepositoryConfiguration_LocationAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRepositoryConfigurationAccess().getLocationAssignment_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("location",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("location");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getRepositoryConfigurationAccess().getLocationURIParserRuleCall_0_0_0();
			return obj;
		}
		return null;
	}

}

// "resolver" resolverClass=QualifiedName
protected class RepositoryConfiguration_Group_0_1 extends GroupToken {
	
	public RepositoryConfiguration_Group_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRepositoryConfigurationAccess().getGroup_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryConfiguration_ResolverClassAssignment_0_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "resolver"
protected class RepositoryConfiguration_ResolverKeyword_0_1_0 extends KeywordToken  {
	
	public RepositoryConfiguration_ResolverKeyword_0_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRepositoryConfigurationAccess().getResolverKeyword_0_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// resolverClass=QualifiedName
protected class RepositoryConfiguration_ResolverClassAssignment_0_1_1 extends AssignmentToken  {
	
	public RepositoryConfiguration_ResolverClassAssignment_0_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRepositoryConfigurationAccess().getResolverClassAssignment_0_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryConfiguration_ResolverKeyword_0_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("resolverClass",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("resolverClass");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getRepositoryConfigurationAccess().getResolverClassQualifiedNameParserRuleCall_0_1_1_0();
			return obj;
		}
		return null;
	}

}



// advice=CompoundAdvice?
protected class RepositoryConfiguration_AdviceAssignment_1 extends AssignmentToken  {
	
	public RepositoryConfiguration_AdviceAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRepositoryConfigurationAccess().getAdviceAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundAdvice_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("advice",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("advice");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompoundAdviceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRepositoryConfigurationAccess().getAdviceCompoundAdviceParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RepositoryConfiguration_Alternatives_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class RepositoryConfiguration_SemicolonKeyword_2 extends KeywordToken  {
	
	public RepositoryConfiguration_SemicolonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRepositoryConfigurationAccess().getSemicolonKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryConfiguration_AdviceAssignment_1(parent, this, 0, inst);
			case 1: return new RepositoryConfiguration_Alternatives_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule RepositoryConfiguration ****************/



/************ begin Rule NamedAdvice ****************
 *
 * NamedAdvice:
 *   name=QualifiedName? advice=CompoundAdvice; 
 * 
 * / * ADVICE
 * ** TODO: Had to use '?' instead if '*', and '??' intead of '**' as these operators are intermixed with / which sometimes
 * ** makes them look like comments. (Forbidding // comments is not the wanted sollution). 
 * **
 * * /
 *
 **/

// name=QualifiedName? advice=CompoundAdvice
protected class NamedAdvice_Group extends GroupToken {
	
	public NamedAdvice_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getNamedAdviceAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NamedAdvice_AdviceAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getNamedAdviceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=QualifiedName?
protected class NamedAdvice_NameAssignment_0 extends AssignmentToken  {
	
	public NamedAdvice_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNamedAdviceAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getNamedAdviceAccess().getNameQualifiedNameParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// advice=CompoundAdvice
protected class NamedAdvice_AdviceAssignment_1 extends AssignmentToken  {
	
	public NamedAdvice_AdviceAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNamedAdviceAccess().getAdviceAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundAdvice_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("advice",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("advice");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompoundAdviceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getNamedAdviceAccess().getAdviceCompoundAdviceParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NamedAdvice_NameAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}


/************ end Rule NamedAdvice ****************/


/************ begin Rule CompoundAdvice ****************
 *
 * CompoundAdvice:
 *   "{" (advice+=AdviceStatement ";")* "}";
 *
 **/

// "{" (advice+=AdviceStatement ";")* "}"
protected class CompoundAdvice_Group extends GroupToken {
	
	public CompoundAdvice_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCompoundAdviceAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundAdvice_RightCurlyBracketKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCompoundAdviceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "{"
protected class CompoundAdvice_LeftCurlyBracketKeyword_0 extends KeywordToken  {
	
	public CompoundAdvice_LeftCurlyBracketKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundAdviceAccess().getLeftCurlyBracketKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// (advice+=AdviceStatement ";")*
protected class CompoundAdvice_Group_1 extends GroupToken {
	
	public CompoundAdvice_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCompoundAdviceAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundAdvice_SemicolonKeyword_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// advice+=AdviceStatement
protected class CompoundAdvice_AdviceAssignment_1_0 extends AssignmentToken  {
	
	public CompoundAdvice_AdviceAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundAdviceAccess().getAdviceAssignment_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdviceStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("advice",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("advice");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAdviceStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompoundAdviceAccess().getAdviceAdviceStatementParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompoundAdvice_Group_1(parent, next, actIndex, consumed);
			case 1: return new CompoundAdvice_LeftCurlyBracketKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class CompoundAdvice_SemicolonKeyword_1_1 extends KeywordToken  {
	
	public CompoundAdvice_SemicolonKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundAdviceAccess().getSemicolonKeyword_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundAdvice_AdviceAssignment_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "}"
protected class CompoundAdvice_RightCurlyBracketKeyword_2 extends KeywordToken  {
	
	public CompoundAdvice_RightCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundAdviceAccess().getRightCurlyBracketKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundAdvice_Group_1(parent, this, 0, inst);
			case 1: return new CompoundAdvice_LeftCurlyBracketKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule CompoundAdvice ****************/


/************ begin Rule AdviceStatement ****************
 *
 * AdviceStatement:
 *   path=AdvicePath ("=" value=Expression|advice=CompoundAdvice);
 *
 **/

// path=AdvicePath ("=" value=Expression|advice=CompoundAdvice)
protected class AdviceStatement_Group extends GroupToken {
	
	public AdviceStatement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAdviceStatementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdviceStatement_Alternatives_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAdviceStatementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// path=AdvicePath
protected class AdviceStatement_PathAssignment_0 extends AssignmentToken  {
	
	public AdviceStatement_PathAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdviceStatementAccess().getPathAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePath_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("path",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("path");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAdvicePathRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAdviceStatementAccess().getPathAdvicePathParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// "=" value=Expression|advice=CompoundAdvice
protected class AdviceStatement_Alternatives_1 extends AlternativesToken {

	public AdviceStatement_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getAdviceStatementAccess().getAlternatives_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdviceStatement_Group_1_0(parent, this, 0, inst);
			case 1: return new AdviceStatement_AdviceAssignment_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "=" value=Expression
protected class AdviceStatement_Group_1_0 extends GroupToken {
	
	public AdviceStatement_Group_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAdviceStatementAccess().getGroup_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdviceStatement_ValueAssignment_1_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "="
protected class AdviceStatement_EqualsSignKeyword_1_0_0 extends KeywordToken  {
	
	public AdviceStatement_EqualsSignKeyword_1_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAdviceStatementAccess().getEqualsSignKeyword_1_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdviceStatement_PathAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// value=Expression
protected class AdviceStatement_ValueAssignment_1_0_1 extends AssignmentToken  {
	
	public AdviceStatement_ValueAssignment_1_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdviceStatementAccess().getValueAssignment_1_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_ValueExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAdviceStatementAccess().getValueExpressionParserRuleCall_1_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AdviceStatement_EqualsSignKeyword_1_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// advice=CompoundAdvice
protected class AdviceStatement_AdviceAssignment_1_1 extends AssignmentToken  {
	
	public AdviceStatement_AdviceAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdviceStatementAccess().getAdviceAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundAdvice_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("advice",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("advice");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompoundAdviceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAdviceStatementAccess().getAdviceCompoundAdviceParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AdviceStatement_PathAssignment_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AdviceStatement ****************/


/************ begin Rule AdvicePath ****************
 *
 * AdvicePath:
 *   pathElements+=AdvicePathSeparator? pathElements+=AdvicePathElement (pathElements+=
 *   AdvicePathSeparator pathElement+=AdvicePathElement)*;
 *
 **/

// pathElements+=AdvicePathSeparator? pathElements+=AdvicePathElement (pathElements+=
// AdvicePathSeparator pathElement+=AdvicePathElement)*
protected class AdvicePath_Group extends GroupToken {
	
	public AdvicePath_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAdvicePathAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePath_Group_2(parent, this, 0, inst);
			case 1: return new AdvicePath_PathElementsAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAdvicePathRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// pathElements+=AdvicePathSeparator?
protected class AdvicePath_PathElementsAssignment_0 extends AssignmentToken  {
	
	public AdvicePath_PathElementsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdvicePathAccess().getPathElementsAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePathSeparator_AdvicePathChildrenParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("pathElements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("pathElements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAdvicePathSeparatorRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAdvicePathAccess().getPathElementsAdvicePathSeparatorParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// pathElements+=AdvicePathElement
protected class AdvicePath_PathElementsAssignment_1 extends AssignmentToken  {
	
	public AdvicePath_PathElementsAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdvicePathAccess().getPathElementsAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePathElement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("pathElements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("pathElements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAdvicePathElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAdvicePathAccess().getPathElementsAdvicePathElementParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AdvicePath_PathElementsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// (pathElements+=AdvicePathSeparator pathElement+=AdvicePathElement)*
protected class AdvicePath_Group_2 extends GroupToken {
	
	public AdvicePath_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAdvicePathAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePath_PathElementAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// pathElements+=AdvicePathSeparator
protected class AdvicePath_PathElementsAssignment_2_0 extends AssignmentToken  {
	
	public AdvicePath_PathElementsAssignment_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdvicePathAccess().getPathElementsAssignment_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePathSeparator_AdvicePathChildrenParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("pathElements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("pathElements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAdvicePathSeparatorRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAdvicePathAccess().getPathElementsAdvicePathSeparatorParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AdvicePath_Group_2(parent, next, actIndex, consumed);
			case 1: return new AdvicePath_PathElementsAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// pathElement+=AdvicePathElement
protected class AdvicePath_PathElementAssignment_2_1 extends AssignmentToken  {
	
	public AdvicePath_PathElementAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdvicePathAccess().getPathElementAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePathElement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("pathElement",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("pathElement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAdvicePathElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAdvicePathAccess().getPathElementAdvicePathElementParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AdvicePath_PathElementsAssignment_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AdvicePath ****************/


/************ begin Rule AdvicePathSeparator ****************
 *
 * AdvicePathSeparator returns AdvicePathElement:
 *   AdvicePathChildren;
 *
 **/

// AdvicePathChildren
protected class AdvicePathSeparator_AdvicePathChildrenParserRuleCall extends RuleCallToken {
	
	public AdvicePathSeparator_AdvicePathChildrenParserRuleCall(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAdvicePathSeparatorAccess().getAdvicePathChildrenParserRuleCall();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePathChildren_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAdvicePathSeparatorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AdvicePathChildren_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAdvicePathChildrenRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule AdvicePathSeparator ****************/


/************ begin Rule AdvicePathChildren ****************
 *
 * AdvicePathChildren:
 *   {AdvicePathChildren} "/";
 *
 **/

// {AdvicePathChildren} "/"
protected class AdvicePathChildren_Group extends GroupToken {
	
	public AdvicePathChildren_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAdvicePathChildrenAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePathChildren_SolidusKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAdvicePathChildrenRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {AdvicePathChildren}
protected class AdvicePathChildren_AdvicePathChildrenAction_0 extends ActionToken  {

	public AdvicePathChildren_AdvicePathChildrenAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getAdvicePathChildrenAccess().getAdvicePathChildrenAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getAdvicePathChildrenAccess().getAdvicePathChildrenAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "/"
protected class AdvicePathChildren_SolidusKeyword_1 extends KeywordToken  {
	
	public AdvicePathChildren_SolidusKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAdvicePathChildrenAccess().getSolidusKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePathChildren_AdvicePathChildrenAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule AdvicePathChildren ****************/


/************ begin Rule AdvicePathElement ****************
 *
 * AdvicePathElement:
 *   node=( QualifiedName | WildcardNode | "." ) ("[" predicate=Expression "]")?|node="..";
 *
 **/

// node=( QualifiedName | WildcardNode | "." ) ("[" predicate=Expression "]")?|node=".."
protected class AdvicePathElement_Alternatives extends AlternativesToken {

	public AdvicePathElement_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getAdvicePathElementAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePathElement_Group_0(parent, this, 0, inst);
			case 1: return new AdvicePathElement_NodeAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAdvicePathElementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// node=( QualifiedName | WildcardNode | "." ) ("[" predicate=Expression "]")?
protected class AdvicePathElement_Group_0 extends GroupToken {
	
	public AdvicePathElement_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAdvicePathElementAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePathElement_Group_0_1(parent, this, 0, inst);
			case 1: return new AdvicePathElement_NodeAssignment_0_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// node=( QualifiedName | WildcardNode | "." )
protected class AdvicePathElement_NodeAssignment_0_0 extends AssignmentToken  {
	
	public AdvicePathElement_NodeAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdvicePathElementAccess().getNodeAssignment_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("node",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("node");
		if(".".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAdvicePathElementAccess().getNodeFullStopKeyword_0_0_0_2();
			return obj;
		}
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getAdvicePathElementAccess().getNodeQualifiedNameParserRuleCall_0_0_0_0();
			return obj;
		}
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getAdvicePathElementAccess().getNodeWildcardNodeParserRuleCall_0_0_0_1();
			return obj;
		}
		return null;
	}

}

// ("[" predicate=Expression "]")?
protected class AdvicePathElement_Group_0_1 extends GroupToken {
	
	public AdvicePathElement_Group_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAdvicePathElementAccess().getGroup_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePathElement_RightSquareBracketKeyword_0_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class AdvicePathElement_LeftSquareBracketKeyword_0_1_0 extends KeywordToken  {
	
	public AdvicePathElement_LeftSquareBracketKeyword_0_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAdvicePathElementAccess().getLeftSquareBracketKeyword_0_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePathElement_NodeAssignment_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// predicate=Expression
protected class AdvicePathElement_PredicateAssignment_0_1_1 extends AssignmentToken  {
	
	public AdvicePathElement_PredicateAssignment_0_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdvicePathElementAccess().getPredicateAssignment_0_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_ValueExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("predicate",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("predicate");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAdvicePathElementAccess().getPredicateExpressionParserRuleCall_0_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AdvicePathElement_LeftSquareBracketKeyword_0_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class AdvicePathElement_RightSquareBracketKeyword_0_1_2 extends KeywordToken  {
	
	public AdvicePathElement_RightSquareBracketKeyword_0_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAdvicePathElementAccess().getRightSquareBracketKeyword_0_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePathElement_PredicateAssignment_0_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



// node=".."
protected class AdvicePathElement_NodeAssignment_1 extends AssignmentToken  {
	
	public AdvicePathElement_NodeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdvicePathElementAccess().getNodeAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("node",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("node");
		if("..".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAdvicePathElementAccess().getNodeFullStopFullStopKeyword_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule AdvicePathElement ****************/



/************ begin Rule Filter ****************
 *
 * Filter:
 *   "(" predicate=Expression ")"; 
 * 
 *               
 * 
 * / * ASSERTS * /
 *
 **/

// "(" predicate=Expression ")"
protected class Filter_Group extends GroupToken {
	
	public Filter_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFilterAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Filter_RightParenthesisKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFilterRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "("
protected class Filter_LeftParenthesisKeyword_0 extends KeywordToken  {
	
	public Filter_LeftParenthesisKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFilterAccess().getLeftParenthesisKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// predicate=Expression
protected class Filter_PredicateAssignment_1 extends AssignmentToken  {
	
	public Filter_PredicateAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFilterAccess().getPredicateAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_ValueExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("predicate",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("predicate");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFilterAccess().getPredicateExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Filter_LeftParenthesisKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class Filter_RightParenthesisKeyword_2 extends KeywordToken  {
	
	public Filter_RightParenthesisKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFilterAccess().getRightParenthesisKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Filter_PredicateAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Filter ****************/


/************ begin Rule PreConditionAssert ****************
 *
 * PreConditionAssert:
 *   scope="precondition" "{" asserts+=AssertionExpression* "}"; 
 * 
 * / * ASSERTS * /
 *
 **/

// scope="precondition" "{" asserts+=AssertionExpression* "}"
protected class PreConditionAssert_Group extends GroupToken {
	
	public PreConditionAssert_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPreConditionAssertAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PreConditionAssert_RightCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPreConditionAssertRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// scope="precondition"
protected class PreConditionAssert_ScopeAssignment_0 extends AssignmentToken  {
	
	public PreConditionAssert_ScopeAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPreConditionAssertAccess().getScopeAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("scope",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("scope");
		if("precondition".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getPreConditionAssertAccess().getScopePreconditionKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class PreConditionAssert_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public PreConditionAssert_LeftCurlyBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPreConditionAssertAccess().getLeftCurlyBracketKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PreConditionAssert_ScopeAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// asserts+=AssertionExpression*
protected class PreConditionAssert_AssertsAssignment_2 extends AssignmentToken  {
	
	public PreConditionAssert_AssertsAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPreConditionAssertAccess().getAssertsAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssertionExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("asserts",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("asserts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssertionExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPreConditionAssertAccess().getAssertsAssertionExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PreConditionAssert_AssertsAssignment_2(parent, next, actIndex, consumed);
			case 1: return new PreConditionAssert_LeftCurlyBracketKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class PreConditionAssert_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public PreConditionAssert_RightCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPreConditionAssertAccess().getRightCurlyBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PreConditionAssert_AssertsAssignment_2(parent, this, 0, inst);
			case 1: return new PreConditionAssert_LeftCurlyBracketKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule PreConditionAssert ****************/


/************ begin Rule PostConditionAssert ****************
 *
 * PostConditionAssert:
 *   scope="postcondition" "{" asserts+=AssertionExpression* "}";
 *
 **/

// scope="postcondition" "{" asserts+=AssertionExpression* "}"
protected class PostConditionAssert_Group extends GroupToken {
	
	public PostConditionAssert_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPostConditionAssertAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostConditionAssert_RightCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPostConditionAssertRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// scope="postcondition"
protected class PostConditionAssert_ScopeAssignment_0 extends AssignmentToken  {
	
	public PostConditionAssert_ScopeAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPostConditionAssertAccess().getScopeAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("scope",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("scope");
		if("postcondition".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getPostConditionAssertAccess().getScopePostconditionKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class PostConditionAssert_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public PostConditionAssert_LeftCurlyBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPostConditionAssertAccess().getLeftCurlyBracketKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostConditionAssert_ScopeAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// asserts+=AssertionExpression*
protected class PostConditionAssert_AssertsAssignment_2 extends AssignmentToken  {
	
	public PostConditionAssert_AssertsAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPostConditionAssertAccess().getAssertsAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssertionExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("asserts",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("asserts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssertionExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPostConditionAssertAccess().getAssertsAssertionExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PostConditionAssert_AssertsAssignment_2(parent, next, actIndex, consumed);
			case 1: return new PostConditionAssert_LeftCurlyBracketKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class PostConditionAssert_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public PostConditionAssert_RightCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPostConditionAssertAccess().getRightCurlyBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostConditionAssert_AssertsAssignment_2(parent, this, 0, inst);
			case 1: return new PostConditionAssert_LeftCurlyBracketKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule PostConditionAssert ****************/


/************ begin Rule AssertionExpression ****************
 *
 * AssertionExpression:
 *   "assert" expr=Expression ("," message=STRING)? ";"; 
 * 
 *              
 * 
 * / * EXPRESSIONS * /
 *
 **/

// "assert" expr=Expression ("," message=STRING)? ";"
protected class AssertionExpression_Group extends GroupToken {
	
	public AssertionExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAssertionExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssertionExpression_SemicolonKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAssertionExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "assert"
protected class AssertionExpression_AssertKeyword_0 extends KeywordToken  {
	
	public AssertionExpression_AssertKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAssertionExpressionAccess().getAssertKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// expr=Expression
protected class AssertionExpression_ExprAssignment_1 extends AssignmentToken  {
	
	public AssertionExpression_ExprAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssertionExpressionAccess().getExprAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_ValueExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAssertionExpressionAccess().getExprExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AssertionExpression_AssertKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," message=STRING)?
protected class AssertionExpression_Group_2 extends GroupToken {
	
	public AssertionExpression_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAssertionExpressionAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssertionExpression_MessageAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class AssertionExpression_CommaKeyword_2_0 extends KeywordToken  {
	
	public AssertionExpression_CommaKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAssertionExpressionAccess().getCommaKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssertionExpression_ExprAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// message=STRING
protected class AssertionExpression_MessageAssignment_2_1 extends AssignmentToken  {
	
	public AssertionExpression_MessageAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssertionExpressionAccess().getMessageAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssertionExpression_CommaKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("message",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("message");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAssertionExpressionAccess().getMessageSTRINGTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}


// ";"
protected class AssertionExpression_SemicolonKeyword_3 extends KeywordToken  {
	
	public AssertionExpression_SemicolonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAssertionExpressionAccess().getSemicolonKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssertionExpression_Group_2(parent, this, 0, inst);
			case 1: return new AssertionExpression_ExprAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule AssertionExpression ****************/


/************ begin Rule SyntaxElement ****************
 *
 * SyntaxElement:
 *   Expression; 
 * / * EXPRESSIONS * /
 *
 **/

// Expression
protected class SyntaxElement_ExpressionParserRuleCall extends RuleCallToken {
	
	public SyntaxElement_ExpressionParserRuleCall(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getSyntaxElementAccess().getExpressionParserRuleCall();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_ValueExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSyntaxElementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Expression_ValueExpressionParserRuleCall.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule SyntaxElement ****************/


/************ begin Rule Expression ****************
 *
 * Expression:
 *   ValueExpression;
 *
 **/

// ValueExpression
protected class Expression_ValueExpressionParserRuleCall extends RuleCallToken {
	
	public Expression_ValueExpressionParserRuleCall(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionAccess().getValueExpressionParserRuleCall();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ValueExpression_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ValueExpression_ValueAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getValueExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule Expression ****************/


/************ begin Rule ValueExpression ****************
 *
 * ValueExpression:
 *   value=OrExpression; 
 * 
 * 
 * 	   
 * 	
 * 	
 * //LetExpression:
 * //	"let" identifier=ID "=" varExpr=Expression ":" target=Expression;
 *
 **/

// value=OrExpression
protected class ValueExpression_ValueAssignment extends AssignmentToken  {
	
	public ValueExpression_ValueAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getValueExpressionAccess().getValueAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getValueExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOrExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getValueExpressionAccess().getValueOrExpressionParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule ValueExpression ****************/


/************ begin Rule OrExpression ****************
 *
 * OrExpression returns Expression:
 *   AndExpression ({BooleanOperation.left=current} operator="||" right=AndExpression)*; 
 * 	
 * //LetExpression:
 * //	"let" identifier=ID "=" varExpr=Expression ":" target=Expression;
 *
 **/

// AndExpression ({BooleanOperation.left=current} operator="||" right=AndExpression)*
protected class OrExpression_Group extends GroupToken {
	
	public OrExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrExpression_Group_1(parent, this, 0, inst);
			case 1: return new OrExpression_AndExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getOrExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// AndExpression
protected class OrExpression_AndExpressionParserRuleCall_0 extends RuleCallToken {
	
	public OrExpression_AndExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AndExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAndExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({BooleanOperation.left=current} operator="||" right=AndExpression)*
protected class OrExpression_Group_1 extends GroupToken {
	
	public OrExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrExpression_RightAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {BooleanOperation.left=current}
protected class OrExpression_BooleanOperationLeftAction_1_0 extends ActionToken  {

	public OrExpression_BooleanOperationLeftAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getBooleanOperationLeftAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrExpression_Group_1(parent, this, 0, inst);
			case 1: return new OrExpression_AndExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getOrExpressionAccess().getBooleanOperationLeftAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("left", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("left")) return null;
		return getDescr((EObject) val);
	}
}

// operator="||"
protected class OrExpression_OperatorAssignment_1_1 extends AssignmentToken  {
	
	public OrExpression_OperatorAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrExpression_BooleanOperationLeftAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("operator",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("operator");
		if("||".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getOrExpressionAccess().getOperatorVerticalLineVerticalLineKeyword_1_1_0();
			return obj;
		}
		return null;
	}

}

// right=AndExpression
protected class OrExpression_RightAssignment_1_2 extends AssignmentToken  {
	
	public OrExpression_RightAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getRightAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("right",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAndExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OrExpression_OperatorAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule OrExpression ****************/


/************ begin Rule AndExpression ****************
 *
 * AndExpression returns Expression:
 *   RelationalExpression ({BooleanOperation.left=current} operator="&&" right=
 *   RelationalExpression)*;
 *
 **/

// RelationalExpression ({BooleanOperation.left=current} operator="&&" right=
// RelationalExpression)*
protected class AndExpression_Group extends GroupToken {
	
	public AndExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_Group_1(parent, this, 0, inst);
			case 1: return new AndExpression_RelationalExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAndExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// RelationalExpression
protected class AndExpression_RelationalExpressionParserRuleCall_0 extends RuleCallToken {
	
	public AndExpression_RelationalExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getRelationalExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationalExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RelationalExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRelationalExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({BooleanOperation.left=current} operator="&&" right=RelationalExpression)*
protected class AndExpression_Group_1 extends GroupToken {
	
	public AndExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_RightAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {BooleanOperation.left=current}
protected class AndExpression_BooleanOperationLeftAction_1_0 extends ActionToken  {

	public AndExpression_BooleanOperationLeftAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getBooleanOperationLeftAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_Group_1(parent, this, 0, inst);
			case 1: return new AndExpression_RelationalExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getAndExpressionAccess().getBooleanOperationLeftAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("left", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("left")) return null;
		return getDescr((EObject) val);
	}
}

// operator="&&"
protected class AndExpression_OperatorAssignment_1_1 extends AssignmentToken  {
	
	public AndExpression_OperatorAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_BooleanOperationLeftAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("operator",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("operator");
		if("&&".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAndExpressionAccess().getOperatorAmpersandAmpersandKeyword_1_1_0();
			return obj;
		}
		return null;
	}

}

// right=RelationalExpression
protected class AndExpression_RightAssignment_1_2 extends AssignmentToken  {
	
	public AndExpression_RightAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getRightAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationalExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("right",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRelationalExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAndExpressionAccess().getRightRelationalExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AndExpression_OperatorAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AndExpression ****************/


/************ begin Rule RelationalExpression ****************
 *
 * RelationalExpression returns Expression:
 *   AdditiveExpression ({BooleanOperation.left=current} operator=( "~=" | "==" | "!=" | ">=" |
 *   "<=" | ">" | "<" ) right=AdditiveExpression)*;
 *
 **/

// AdditiveExpression ({BooleanOperation.left=current} operator=( "~=" | "==" | "!=" | ">=" |
// "<=" | ">" | "<" ) right=AdditiveExpression)*
protected class RelationalExpression_Group extends GroupToken {
	
	public RelationalExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationalExpression_Group_1(parent, this, 0, inst);
			case 1: return new RelationalExpression_AdditiveExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRelationalExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// AdditiveExpression
protected class RelationalExpression_AdditiveExpressionParserRuleCall_0 extends RuleCallToken {
	
	public RelationalExpression_AdditiveExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getAdditiveExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdditiveExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AdditiveExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAdditiveExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({BooleanOperation.left=current} operator=( "~=" | "==" | "!=" | ">=" | "<=" | ">" | "<" ) right
// =AdditiveExpression)*
protected class RelationalExpression_Group_1 extends GroupToken {
	
	public RelationalExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationalExpression_RightAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {BooleanOperation.left=current}
protected class RelationalExpression_BooleanOperationLeftAction_1_0 extends ActionToken  {

	public RelationalExpression_BooleanOperationLeftAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getBooleanOperationLeftAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationalExpression_Group_1(parent, this, 0, inst);
			case 1: return new RelationalExpression_AdditiveExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getRelationalExpressionAccess().getBooleanOperationLeftAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("left", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("left")) return null;
		return getDescr((EObject) val);
	}
}

// operator=( "~=" | "==" | "!=" | ">=" | "<=" | ">" | "<" )
protected class RelationalExpression_OperatorAssignment_1_1 extends AssignmentToken  {
	
	public RelationalExpression_OperatorAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationalExpression_BooleanOperationLeftAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("operator",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("operator");
		if("~=".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getRelationalExpressionAccess().getOperatorTildeEqualsSignKeyword_1_1_0_0();
			return obj;
		}
		if("==".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getRelationalExpressionAccess().getOperatorEqualsSignEqualsSignKeyword_1_1_0_1();
			return obj;
		}
		if("!=".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getRelationalExpressionAccess().getOperatorExclamationMarkEqualsSignKeyword_1_1_0_2();
			return obj;
		}
		if(">=".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getRelationalExpressionAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3();
			return obj;
		}
		if("<=".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getRelationalExpressionAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_4();
			return obj;
		}
		if(">".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getRelationalExpressionAccess().getOperatorGreaterThanSignKeyword_1_1_0_5();
			return obj;
		}
		if("<".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getRelationalExpressionAccess().getOperatorLessThanSignKeyword_1_1_0_6();
			return obj;
		}
		return null;
	}

}

// right=AdditiveExpression
protected class RelationalExpression_RightAssignment_1_2 extends AssignmentToken  {
	
	public RelationalExpression_RightAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getRightAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdditiveExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("right",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAdditiveExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRelationalExpressionAccess().getRightAdditiveExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RelationalExpression_OperatorAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule RelationalExpression ****************/


/************ begin Rule AdditiveExpression ****************
 *
 * AdditiveExpression returns Expression:
 *   MultiplicativeExpression ({OperationCall.params+=current} name=( "+" | "-" ) params+=
 *   MultiplicativeExpression)*;
 *
 **/

// MultiplicativeExpression ({OperationCall.params+=current} name=( "+" | "-" ) params+=
// MultiplicativeExpression)*
protected class AdditiveExpression_Group extends GroupToken {
	
	public AdditiveExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdditiveExpression_Group_1(parent, this, 0, inst);
			case 1: return new AdditiveExpression_MultiplicativeExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAdditiveExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// MultiplicativeExpression
protected class AdditiveExpression_MultiplicativeExpressionParserRuleCall_0 extends RuleCallToken {
	
	public AdditiveExpression_MultiplicativeExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(MultiplicativeExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({OperationCall.params+=current} name=( "+" | "-" ) params+=MultiplicativeExpression)*
protected class AdditiveExpression_Group_1 extends GroupToken {
	
	public AdditiveExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdditiveExpression_ParamsAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {OperationCall.params+=current}
protected class AdditiveExpression_OperationCallParamsAction_1_0 extends ActionToken  {

	public AdditiveExpression_OperationCallParamsAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getOperationCallParamsAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdditiveExpression_Group_1(parent, this, 0, inst);
			case 1: return new AdditiveExpression_MultiplicativeExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getAdditiveExpressionAccess().getOperationCallParamsAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("params", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("params")) return null;
		return getDescr((EObject) val);
	}
}

// name=( "+" | "-" )
protected class AdditiveExpression_NameAssignment_1_1 extends AssignmentToken  {
	
	public AdditiveExpression_NameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getNameAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdditiveExpression_OperationCallParamsAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if("+".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAdditiveExpressionAccess().getNamePlusSignKeyword_1_1_0_0();
			return obj;
		}
		if("-".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAdditiveExpressionAccess().getNameHyphenMinusKeyword_1_1_0_1();
			return obj;
		}
		return null;
	}

}

// params+=MultiplicativeExpression
protected class AdditiveExpression_ParamsAssignment_1_2 extends AssignmentToken  {
	
	public AdditiveExpression_ParamsAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getParamsAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAdditiveExpressionAccess().getParamsMultiplicativeExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AdditiveExpression_NameAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AdditiveExpression ****************/


/************ begin Rule MultiplicativeExpression ****************
 *
 * MultiplicativeExpression returns Expression:
 *   UnaryOrInfixExpression ({OperationCall.params+=current} name=( "*" | "/" ) params+=
 *   UnaryOrInfixExpression)*;
 *
 **/

// UnaryOrInfixExpression ({OperationCall.params+=current} name=( "*" | "/" ) params+=
// UnaryOrInfixExpression)*
protected class MultiplicativeExpression_Group extends GroupToken {
	
	public MultiplicativeExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_Group_1(parent, this, 0, inst);
			case 1: return new MultiplicativeExpression_UnaryOrInfixExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// UnaryOrInfixExpression
protected class MultiplicativeExpression_UnaryOrInfixExpressionParserRuleCall_0 extends RuleCallToken {
	
	public MultiplicativeExpression_UnaryOrInfixExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getUnaryOrInfixExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryOrInfixExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UnaryOrInfixExpression_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUnaryOrInfixExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({OperationCall.params+=current} name=( "*" | "/" ) params+=UnaryOrInfixExpression)*
protected class MultiplicativeExpression_Group_1 extends GroupToken {
	
	public MultiplicativeExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_ParamsAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {OperationCall.params+=current}
protected class MultiplicativeExpression_OperationCallParamsAction_1_0 extends ActionToken  {

	public MultiplicativeExpression_OperationCallParamsAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getOperationCallParamsAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_Group_1(parent, this, 0, inst);
			case 1: return new MultiplicativeExpression_UnaryOrInfixExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getMultiplicativeExpressionAccess().getOperationCallParamsAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("params", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("params")) return null;
		return getDescr((EObject) val);
	}
}

// name=( "*" | "/" )
protected class MultiplicativeExpression_NameAssignment_1_1 extends AssignmentToken  {
	
	public MultiplicativeExpression_NameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getNameAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_OperationCallParamsAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if("*".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getMultiplicativeExpressionAccess().getNameAsteriskKeyword_1_1_0_0();
			return obj;
		}
		if("/".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getMultiplicativeExpressionAccess().getNameSolidusKeyword_1_1_0_1();
			return obj;
		}
		return null;
	}

}

// params+=UnaryOrInfixExpression
protected class MultiplicativeExpression_ParamsAssignment_1_2 extends AssignmentToken  {
	
	public MultiplicativeExpression_ParamsAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getParamsAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryOrInfixExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUnaryOrInfixExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMultiplicativeExpressionAccess().getParamsUnaryOrInfixExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MultiplicativeExpression_NameAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule MultiplicativeExpression ****************/


/************ begin Rule UnaryOrInfixExpression ****************
 *
 * UnaryOrInfixExpression returns Expression:
 *   UnaryExpression|InfixExpression;
 *
 **/

// UnaryExpression|InfixExpression
protected class UnaryOrInfixExpression_Alternatives extends AlternativesToken {

	public UnaryOrInfixExpression_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getUnaryOrInfixExpressionAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryOrInfixExpression_UnaryExpressionParserRuleCall_0(parent, this, 0, inst);
			case 1: return new UnaryOrInfixExpression_InfixExpressionParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnaryOrInfixExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// UnaryExpression
protected class UnaryOrInfixExpression_UnaryExpressionParserRuleCall_0 extends RuleCallToken {
	
	public UnaryOrInfixExpression_UnaryExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getUnaryOrInfixExpressionAccess().getUnaryExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UnaryExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUnaryExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// InfixExpression
protected class UnaryOrInfixExpression_InfixExpressionParserRuleCall_1 extends RuleCallToken {
	
	public UnaryOrInfixExpression_InfixExpressionParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getUnaryOrInfixExpressionAccess().getInfixExpressionParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(InfixExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getInfixExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule UnaryOrInfixExpression ****************/


/************ begin Rule UnaryExpression ****************
 *
 * UnaryExpression returns OperationCall:
 *   name=( "!" | "-" ) params+=InfixExpression;
 *
 **/

// name=( "!" | "-" ) params+=InfixExpression
protected class UnaryExpression_Group extends GroupToken {
	
	public UnaryExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnaryExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryExpression_ParamsAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnaryExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=( "!" | "-" )
protected class UnaryExpression_NameAssignment_0 extends AssignmentToken  {
	
	public UnaryExpression_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnaryExpressionAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if("!".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getUnaryExpressionAccess().getNameExclamationMarkKeyword_0_0_0();
			return obj;
		}
		if("-".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getUnaryExpressionAccess().getNameHyphenMinusKeyword_0_0_1();
			return obj;
		}
		return null;
	}

}

// params+=InfixExpression
protected class UnaryExpression_ParamsAssignment_1 extends AssignmentToken  {
	
	public UnaryExpression_ParamsAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnaryExpressionAccess().getParamsAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInfixExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnaryExpressionAccess().getParamsInfixExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new UnaryExpression_NameAssignment_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule UnaryExpression ****************/


/************ begin Rule InfixExpression ****************
 *
 * InfixExpression returns Expression:
 *   PrimaryExpression ({OperationCall.target=current} "->" name=ID "(" (params+=Parameter
 *   ("," params+=Parameter)*)? ")")*; 
 * 	
 *     
 * 	  
 * 		                // |
 * //		({FeatureCall.target=current} "." type=Type) |
 * //		({TypeSelectExpression.target=current} "." name="typeSelect" "(" type=Type ")") |
 * //		({CollectionExpression.target=current} name=("collect"|"select"|"selectFirst"|"reject"|"exists"|"notExists"|"sortBy"|"forAll") "(" (var=ID "|")? exp=Expression ")")
 *
 **/

// PrimaryExpression ({OperationCall.target=current} "->" name=ID "(" (params+=Parameter
// ("," params+=Parameter)*)? ")")* 
// 	  
// 		                // |
// //		({FeatureCall.target=current} "." type=Type) |
// //		({TypeSelectExpression.target=current} "." name="typeSelect" "(" type=Type ")") |
// //		({CollectionExpression.target=current} name=("collect"|"select"|"selectFirst"|"reject"|"exists"|"notExists"|"sortBy"|"forAll") "(" (var=ID "|")? exp=Expression ")")
protected class InfixExpression_Group extends GroupToken {
	
	public InfixExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Group_1(parent, this, 0, inst);
			case 1: return new InfixExpression_PrimaryExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getInfixExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// PrimaryExpression
protected class InfixExpression_PrimaryExpressionParserRuleCall_0 extends RuleCallToken {
	
	public InfixExpression_PrimaryExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getPrimaryExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimaryExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(PrimaryExpression_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPrimaryExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({OperationCall.target=current} "->" name=ID "(" (params+=Parameter ("," params+=
// Parameter)*)? ")")*
protected class InfixExpression_Group_1 extends GroupToken {
	
	public InfixExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_RightParenthesisKeyword_1_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {OperationCall.target=current}
protected class InfixExpression_OperationCallTargetAction_1_0 extends ActionToken  {

	public InfixExpression_OperationCallTargetAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getOperationCallTargetAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Group_1(parent, this, 0, inst);
			case 1: return new InfixExpression_PrimaryExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getInfixExpressionAccess().getOperationCallTargetAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("target", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("target")) return null;
		return getDescr((EObject) val);
	}
}

// "->"
protected class InfixExpression_HyphenMinusGreaterThanSignKeyword_1_1 extends KeywordToken  {
	
	public InfixExpression_HyphenMinusGreaterThanSignKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getHyphenMinusGreaterThanSignKeyword_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_OperationCallTargetAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=ID
protected class InfixExpression_NameAssignment_1_2 extends AssignmentToken  {
	
	public InfixExpression_NameAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getNameAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_HyphenMinusGreaterThanSignKeyword_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getInfixExpressionAccess().getNameIDTerminalRuleCall_1_2_0();
			return obj;
		}
		return null;
	}

}

// "("
protected class InfixExpression_LeftParenthesisKeyword_1_3 extends KeywordToken  {
	
	public InfixExpression_LeftParenthesisKeyword_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getLeftParenthesisKeyword_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_NameAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (params+=Parameter ("," params+=Parameter)*)?
protected class InfixExpression_Group_1_4 extends GroupToken {
	
	public InfixExpression_Group_1_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getGroup_1_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Group_1_4_1(parent, this, 0, inst);
			case 1: return new InfixExpression_ParamsAssignment_1_4_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// params+=Parameter
protected class InfixExpression_ParamsAssignment_1_4_0 extends AssignmentToken  {
	
	public InfixExpression_ParamsAssignment_1_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getParamsAssignment_1_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parameter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getInfixExpressionAccess().getParamsParameterParserRuleCall_1_4_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InfixExpression_LeftParenthesisKeyword_1_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," params+=Parameter)*
protected class InfixExpression_Group_1_4_1 extends GroupToken {
	
	public InfixExpression_Group_1_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getGroup_1_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_ParamsAssignment_1_4_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class InfixExpression_CommaKeyword_1_4_1_0 extends KeywordToken  {
	
	public InfixExpression_CommaKeyword_1_4_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getCommaKeyword_1_4_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Group_1_4_1(parent, this, 0, inst);
			case 1: return new InfixExpression_ParamsAssignment_1_4_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// params+=Parameter
protected class InfixExpression_ParamsAssignment_1_4_1_1 extends AssignmentToken  {
	
	public InfixExpression_ParamsAssignment_1_4_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getParamsAssignment_1_4_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parameter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getInfixExpressionAccess().getParamsParameterParserRuleCall_1_4_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InfixExpression_CommaKeyword_1_4_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class InfixExpression_RightParenthesisKeyword_1_5 extends KeywordToken  {
	
	public InfixExpression_RightParenthesisKeyword_1_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getRightParenthesisKeyword_1_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Group_1_4(parent, this, 0, inst);
			case 1: return new InfixExpression_LeftParenthesisKeyword_1_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule InfixExpression ****************/


/************ begin Rule PrimaryExpression ****************
 *
 * PrimaryExpression returns Expression:
 *   Literal|GlobalVarExpression|ParanthesizedExpression; 
 * 
 *     
 * 	   
 * //	FeatureCall |
 * //	ListLiteral |
 * //	ConstructorCallExpression |
 *
 **/

// Literal|GlobalVarExpression|ParanthesizedExpression 
// 
//     
// 	   
// //	FeatureCall |
// //	ListLiteral |
// //	ConstructorCallExpression |
protected class PrimaryExpression_Alternatives extends AlternativesToken {

	public PrimaryExpression_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimaryExpression_LiteralParserRuleCall_0(parent, this, 0, inst);
			case 1: return new PrimaryExpression_GlobalVarExpressionParserRuleCall_1(parent, this, 1, inst);
			case 2: return new PrimaryExpression_ParanthesizedExpressionParserRuleCall_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPrimaryExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Literal
protected class PrimaryExpression_LiteralParserRuleCall_0 extends RuleCallToken {
	
	public PrimaryExpression_LiteralParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Literal_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Literal_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// GlobalVarExpression  
// //	FeatureCall |
// //	ListLiteral |
// //	ConstructorCallExpression |
protected class PrimaryExpression_GlobalVarExpressionParserRuleCall_1 extends RuleCallToken {
	
	public PrimaryExpression_GlobalVarExpressionParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getGlobalVarExpressionParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new GlobalVarExpression_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(GlobalVarExpression_NameAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getGlobalVarExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ParanthesizedExpression
protected class PrimaryExpression_ParanthesizedExpressionParserRuleCall_2 extends RuleCallToken {
	
	public PrimaryExpression_ParanthesizedExpressionParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getParanthesizedExpressionParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParanthesizedExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ParanthesizedExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getParanthesizedExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule PrimaryExpression ****************/


/************ begin Rule Literal ****************
 *
 * Literal:
 *   BooleanLiteral|IntegerLiteral|NullLiteral|StringLiteral;
 *
 **/

// BooleanLiteral|IntegerLiteral|NullLiteral|StringLiteral
protected class Literal_Alternatives extends AlternativesToken {

	public Literal_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getLiteralAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Literal_BooleanLiteralParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Literal_IntegerLiteralParserRuleCall_1(parent, this, 1, inst);
			case 2: return new Literal_NullLiteralParserRuleCall_2(parent, this, 2, inst);
			case 3: return new Literal_StringLiteralParserRuleCall_3(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// BooleanLiteral
protected class Literal_BooleanLiteralParserRuleCall_0 extends RuleCallToken {
	
	public Literal_BooleanLiteralParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BooleanLiteral_ValAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(BooleanLiteral_ValAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBooleanLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// IntegerLiteral
protected class Literal_IntegerLiteralParserRuleCall_1 extends RuleCallToken {
	
	public Literal_IntegerLiteralParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralAccess().getIntegerLiteralParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntegerLiteral_ValAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(IntegerLiteral_ValAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getIntegerLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// NullLiteral
protected class Literal_NullLiteralParserRuleCall_2 extends RuleCallToken {
	
	public Literal_NullLiteralParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NullLiteral_ValAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(NullLiteral_ValAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getNullLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// StringLiteral
protected class Literal_StringLiteralParserRuleCall_3 extends RuleCallToken {
	
	public Literal_StringLiteralParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringLiteral_ValAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(StringLiteral_ValAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getStringLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Literal ****************/


/************ begin Rule BooleanLiteral ****************
 *
 * BooleanLiteral:
 *   val=( "true" | "false" );
 *
 **/

// val=( "true" | "false" )
protected class BooleanLiteral_ValAssignment extends AssignmentToken  {
	
	public BooleanLiteral_ValAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBooleanLiteralAccess().getValAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBooleanLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val");
		if("true".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getBooleanLiteralAccess().getValTrueKeyword_0_0();
			return obj;
		}
		if("false".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getBooleanLiteralAccess().getValFalseKeyword_0_1();
			return obj;
		}
		return null;
	}

}

/************ end Rule BooleanLiteral ****************/


/************ begin Rule IntegerLiteral ****************
 *
 * IntegerLiteral:
 *   val=INT;
 *
 **/

// val=INT
protected class IntegerLiteral_ValAssignment extends AssignmentToken  {
	
	public IntegerLiteral_ValAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getIntegerLiteralAccess().getValAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getIntegerLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getIntegerLiteralAccess().getValINTTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule IntegerLiteral ****************/


/************ begin Rule NullLiteral ****************
 *
 * NullLiteral:
 *   val="null";
 *
 **/

// val="null"
protected class NullLiteral_ValAssignment extends AssignmentToken  {
	
	public NullLiteral_ValAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNullLiteralAccess().getValAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getNullLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val");
		if("null".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getNullLiteralAccess().getValNullKeyword_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule NullLiteral ****************/


/************ begin Rule StringLiteral ****************
 *
 * StringLiteral:
 *   val=STRING;
 *
 **/

// val=STRING
protected class StringLiteral_ValAssignment extends AssignmentToken  {
	
	public StringLiteral_ValAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStringLiteralAccess().getValAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getStringLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getStringLiteralAccess().getValSTRINGTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule StringLiteral ****************/


/************ begin Rule ParanthesizedExpression ****************
 *
 * ParanthesizedExpression returns Expression:
 *   "(" Expression ")";
 *
 **/

// "(" Expression ")"
protected class ParanthesizedExpression_Group extends GroupToken {
	
	public ParanthesizedExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getParanthesizedExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParanthesizedExpression_RightParenthesisKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getParanthesizedExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "("
protected class ParanthesizedExpression_LeftParenthesisKeyword_0 extends KeywordToken  {
	
	public ParanthesizedExpression_LeftParenthesisKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getParanthesizedExpressionAccess().getLeftParenthesisKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// Expression
protected class ParanthesizedExpression_ExpressionParserRuleCall_1 extends RuleCallToken {
	
	public ParanthesizedExpression_ExpressionParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getParanthesizedExpressionAccess().getExpressionParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_ValueExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Expression_ValueExpressionParserRuleCall.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParanthesizedExpression_LeftParenthesisKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// ")"
protected class ParanthesizedExpression_RightParenthesisKeyword_2 extends KeywordToken  {
	
	public ParanthesizedExpression_RightParenthesisKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getParanthesizedExpressionAccess().getRightParenthesisKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParanthesizedExpression_ExpressionParserRuleCall_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ParanthesizedExpression ****************/


/************ begin Rule GlobalVarExpression ****************
 *
 * GlobalVarExpression:
 *   name=QualifiedName;
 *
 **/

// name=QualifiedName
protected class GlobalVarExpression_NameAssignment extends AssignmentToken  {
	
	public GlobalVarExpression_NameAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getGlobalVarExpressionAccess().getNameAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getGlobalVarExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getGlobalVarExpressionAccess().getNameQualifiedNameParserRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule GlobalVarExpression ****************/

}
