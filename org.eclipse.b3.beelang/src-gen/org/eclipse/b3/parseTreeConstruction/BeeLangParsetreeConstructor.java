/*
* generated by Xtext
*/
package org.eclipse.b3.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.b3.services.BeeLangGrammarAccess;

import com.google.inject.Inject;

public class BeeLangParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private BeeLangGrammarAccess grammarAccess;
		
	public BeeLangGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BeeModel_Group(this, this, 0, inst);
			case 1: return new Import_Group(this, this, 1, inst);
			case 2: return new Unit_Group(this, this, 2, inst);
			case 3: return new ProvidedCapability_Group(this, this, 3, inst);
			case 4: return new RequiredCapability_Group(this, this, 4, inst);
			case 5: return new NamedPropertyStatements_Group(this, this, 5, inst);
			case 6: return new PropertyStatements_Group(this, this, 6, inst);
			case 7: return new PropertyStatement_Group(this, this, 7, inst);
			case 8: return new UnsetPropertyStatement_Group(this, this, 8, inst);
			case 9: return new AnnotationStatement_Group(this, this, 9, inst);
			case 10: return new PropertyExpression_ExpressionParserRuleCall(this, this, 10, inst);
			case 11: return new Synchronization_Group(this, this, 11, inst);
			case 12: return new BuildPart_Alternatives(this, this, 12, inst);
			case 13: return new Artifacts_Group(this, this, 13, inst);
			case 14: return new PathGroup_Group(this, this, 14, inst);
			case 15: return new PathExpression_Alternatives(this, this, 15, inst);
			case 16: return new ExprStatement_Group(this, this, 16, inst);
			case 17: return new Group_Group(this, this, 17, inst);
			case 18: return new Prerequisite_Group(this, this, 18, inst);
			case 19: return new Closure_Group(this, this, 19, inst);
			case 20: return new PrerequisiteEntry_Alternatives(this, this, 20, inst);
			case 21: return new PartInSelf_PartNameAssignment(this, this, 21, inst);
			case 22: return new CapabilityReferencedPart_Alternatives(this, this, 22, inst);
			case 23: return new CompoundReferences_Group(this, this, 23, inst);
			case 24: return new Action_Group(this, this, 24, inst);
			case 25: return new Parameter_ValAssignment(this, this, 25, inst);
			case 26: return new Layout_Group(this, this, 26, inst);
			case 27: return new ActionInputGroup_Group(this, this, 27, inst);
			case 28: return new RepositoryConfiguration_Group(this, this, 28, inst);
			case 29: return new NamedAdvice_Group(this, this, 29, inst);
			case 30: return new Advice_Group(this, this, 30, inst);
			case 31: return new CompoundAdvice_Group(this, this, 31, inst);
			case 32: return new AdviceStatement_Group(this, this, 32, inst);
			case 33: return new AdvicePath_Group(this, this, 33, inst);
			case 34: return new AdvicePathSeparator_AdvicePathChildrenParserRuleCall(this, this, 34, inst);
			case 35: return new AdvicePathChildren_Group(this, this, 35, inst);
			case 36: return new AdvicePathElement_Alternatives(this, this, 36, inst);
			case 37: return new Filter_Group(this, this, 37, inst);
			case 38: return new PreConditionAssert_Group(this, this, 38, inst);
			case 39: return new PostConditionAssert_Group(this, this, 39, inst);
			case 40: return new AssertionExpression_Group(this, this, 40, inst);
			case 41: return new Statement_Alternatives(this, this, 41, inst);
			case 42: return new BreakStatement_Group(this, this, 42, inst);
			case 43: return new ContinueStatement_Group(this, this, 43, inst);
			case 44: return new CompoundStatement_Group(this, this, 44, inst);
			case 45: return new Statements_StatementsAssignment(this, this, 45, inst);
			case 46: return new WhileStatement_Group(this, this, 46, inst);
			case 47: return new SwitchStatement_Group(this, this, 47, inst);
			case 48: return new Case_Group(this, this, 48, inst);
			case 49: return new ForStatement_Group(this, this, 49, inst);
			case 50: return new ReturnStatement_Group(this, this, 50, inst);
			case 51: return new SyntaxElement_ExpressionParserRuleCall(this, this, 51, inst);
			case 52: return new VarExpressionList_Group(this, this, 52, inst);
			case 53: return new ExpressionList_Group(this, this, 53, inst);
			case 54: return new VarExpression_Alternatives(this, this, 54, inst);
			case 55: return new Expression_ValueExpressionParserRuleCall(this, this, 55, inst);
			case 56: return new ValueExpression_ValueAssignment(this, this, 56, inst);
			case 57: return new AssignmentExpression_Group(this, this, 57, inst);
			case 58: return new ChainExpression_ChainedExpressionParserRuleCall(this, this, 58, inst);
			case 59: return new ChainedExpression_IfExpressionParserRuleCall(this, this, 59, inst);
			case 60: return new IfExpression_Group(this, this, 60, inst);
			case 61: return new OrExpression_Group(this, this, 61, inst);
			case 62: return new AndExpression_Group(this, this, 62, inst);
			case 63: return new RelationalExpression_Group(this, this, 63, inst);
			case 64: return new AdditiveExpression_Group(this, this, 64, inst);
			case 65: return new MultiplicativeExpression_Group(this, this, 65, inst);
			case 66: return new UnaryOrInfixExpression_Alternatives(this, this, 66, inst);
			case 67: return new UnaryExpression_Group(this, this, 67, inst);
			case 68: return new PostopExpression_Group(this, this, 68, inst);
			case 69: return new InfixExpression_Group(this, this, 69, inst);
			case 70: return new PrimaryExpression_Alternatives(this, this, 70, inst);
			case 71: return new PropertyValue_NameAssignment(this, this, 71, inst);
			case 72: return new VariableValue_NameAssignment(this, this, 72, inst);
			case 73: return new FeatureCall_OperationCallParserRuleCall(this, this, 73, inst);
			case 74: return new OperationCall_Group(this, this, 74, inst);
			case 75: return new Literal_Alternatives(this, this, 75, inst);
			case 76: return new ValueLiteral_Alternatives(this, this, 76, inst);
			case 77: return new BooleanLiteral_ValAssignment(this, this, 77, inst);
			case 78: return new IntegerLiteral_Alternatives(this, this, 78, inst);
			case 79: return new NullLiteral_ValAssignment(this, this, 79, inst);
			case 80: return new StringLiteral_ValAssignment(this, this, 80, inst);
			case 81: return new RealLiteral_ValAssignment(this, this, 81, inst);
			case 82: return new RegexpLiteral_ValAssignment(this, this, 82, inst);
			case 83: return new ParanthesizedExpression_Group(this, this, 83, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule BeeModel ****************
 *
 * BeeModel:
 *   imports+=Import* body=Unit; 
 *                 
 * 
 * // Redeclare the default ID without the ^ keyword escape mechanism, and including
 * // the JS $ char which is allowed in the first position.
 * //
 *
 **/

// imports+=Import* body=Unit
protected class BeeModel_Group extends GroupToken {
	
	public BeeModel_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBeeModelAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BeeModel_BodyAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBeeModelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// imports+=Import*
protected class BeeModel_ImportsAssignment_0 extends AssignmentToken  {
	
	public BeeModel_ImportsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBeeModelAccess().getImportsAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("imports",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("imports");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBeeModelAccess().getImportsImportParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BeeModel_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// body=Unit
protected class BeeModel_BodyAssignment_1 extends AssignmentToken  {
	
	public BeeModel_BodyAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBeeModelAccess().getBodyAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("body",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUnitRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBeeModelAccess().getBodyUnitParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BeeModel_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}


/************ end Rule BeeModel ****************/















/************ begin Rule Import ****************
 *
 * Import:
 *   "import" importClass=QualifiedName ".*"? ";"; 
 * 
 * / *
 * ** Import
 * ** TODO: Is specified as import of URI, a String, should be QID
 * * /	
 *   
 * 	         
 * 		
 * / * UNIT - the body (compare to java class)
 * * /
 *
 **/

// "import" importClass=QualifiedName ".*"? ";"
protected class Import_Group extends GroupToken {
	
	public Import_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getImportAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_SemicolonKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "import"
protected class Import_ImportKeyword_0 extends KeywordToken  {
	
	public Import_ImportKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getImportAccess().getImportKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// importClass=QualifiedName
protected class Import_ImportClassAssignment_1 extends AssignmentToken  {
	
	public Import_ImportClassAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getImportAccess().getImportClassAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_ImportKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("importClass",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("importClass");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getImportAccess().getImportClassQualifiedNameParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Import_SemicolonKeyword_3 extends KeywordToken  {
	
	public Import_SemicolonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getImportAccess().getSemicolonKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_ImportClassAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Import ****************/


/************ begin Rule Unit ****************
 *
 * Unit returns BuildUnit hidden ( WS , ML_COMMENT , SL_COMMENT ):
 *   executionMode=ExecutionMode? "unit" name=UnitName? ("version" version=Version)? (
 *   "implements" implements+=InterfaceName ("," implements+=InterfaceName)*)? "{" (
 *   "properties" propertyStatements+=NamedPropertyStatements)* ("provides" "{" (
 *   providedCapability+=ProvidedCapability ";")+ "}"|"provides" providedCapability+=
 *   ProvidedCapability ";"|"requires" "{" (requiredCapabilities+=RequiredCapability ";")
 *   + "}"|"requires" requiredCapabilities+=RequiredCapability ";"|"meta" "requires" "{" (
 *   metaRequiredCapabilities+=RequiredCapability ";")+ "}"|"meta" "requires"
 *   metaRequiredCapabilities+=RequiredCapability ";"|"advice" advice+=NamedAdvice|
 *   "sequential" "{" synchronize+=Synchronization+ "}"|"sequential" synchronize+=
 *   Synchronization|parts+=BuildPart|"repositories" "{" repositoryConfig+=
 *   RepositoryConfiguration* "}")* "}";  
 * 		
 * / * UNIT - the body (compare to java class)
 * * /	
 *             
 * 	    
 * 	          
 * 		           
 * 	
 * 			 //-- PROPERTIES
 * 			 // goes first, because they may be used in the other clauses.
 * 			 //
 * 			          
 * 		
 * 		 	 //-- PROVIDES
 * 			               
 * 			          
 * 			//-- REQUIRES & META REQUIRES
 * 			               
 * 			          
 * 			                  
 * 			            
 * 			//--ADVICE
 * 			       
 * 			//--SYNCHRONIZE
 * 			                  
 * 			           
 * 			//--PARTS
 * 			         			
 * 			//-- REPOSITORIES
 *
 **/

// executionMode=ExecutionMode? "unit" name=UnitName? ("version" version=Version)? (
// "implements" implements+=InterfaceName ("," implements+=InterfaceName)*)? "{" (
// "properties" propertyStatements+=NamedPropertyStatements)* ("provides" "{" (
// providedCapability+=ProvidedCapability ";")+ "}"|"provides" providedCapability+=
// ProvidedCapability ";"|"requires" "{" (requiredCapabilities+=RequiredCapability ";")
// + "}"|"requires" requiredCapabilities+=RequiredCapability ";"|"meta" "requires" "{" (
// metaRequiredCapabilities+=RequiredCapability ";")+ "}"|"meta" "requires"
// metaRequiredCapabilities+=RequiredCapability ";"|"advice" advice+=NamedAdvice|
// "sequential" "{" synchronize+=Synchronization+ "}"|"sequential" synchronize+=
// Synchronization|parts+=BuildPart|"repositories" "{" repositoryConfig+=
// RepositoryConfiguration* "}")* "}" 
// 	    
// 	          
// 		           
// 	
// 			 //-- PROPERTIES
// 			 // goes first, because they may be used in the other clauses.
// 			 //
// 			          
// 		
// 		 	 //-- PROVIDES
// 			               
// 			          
// 			//-- REQUIRES & META REQUIRES
// 			               
// 			          
// 			                  
// 			            
// 			//--ADVICE
// 			       
// 			//--SYNCHRONIZE
// 			                  
// 			           
// 			//--PARTS
// 			         			
// 			//-- REPOSITORIES
protected class Unit_Group extends GroupToken {
	
	public Unit_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RightCurlyBracketKeyword_8(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnitRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// executionMode=ExecutionMode?
protected class Unit_ExecutionModeAssignment_0 extends AssignmentToken  {
	
	public Unit_ExecutionModeAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getExecutionModeAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("executionMode",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("executionMode");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getUnitAccess().getExecutionModeExecutionModeEnumRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "unit"
protected class Unit_UnitKeyword_1 extends KeywordToken  {
	
	public Unit_UnitKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getUnitKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_ExecutionModeAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=UnitName?
protected class Unit_NameAssignment_2 extends AssignmentToken  {
	
	public Unit_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_UnitKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getUnitAccess().getNameUnitNameParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ("version" version=Version)?
protected class Unit_Group_3 extends GroupToken {
	
	public Unit_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_VersionAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "version"
protected class Unit_VersionKeyword_3_0 extends KeywordToken  {
	
	public Unit_VersionKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getVersionKeyword_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_NameAssignment_2(parent, this, 0, inst);
			case 1: return new Unit_UnitKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// version=Version
protected class Unit_VersionAssignment_3_1 extends AssignmentToken  {
	
	public Unit_VersionAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getVersionAssignment_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_VersionKeyword_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("version",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("version");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getUnitAccess().getVersionVersionParserRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}


// ("implements" implements+=InterfaceName ("," implements+=InterfaceName)*)?
protected class Unit_Group_4 extends GroupToken {
	
	public Unit_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_4_2(parent, this, 0, inst);
			case 1: return new Unit_ImplementsAssignment_4_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "implements"
protected class Unit_ImplementsKeyword_4_0 extends KeywordToken  {
	
	public Unit_ImplementsKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getImplementsKeyword_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_3(parent, this, 0, inst);
			case 1: return new Unit_NameAssignment_2(parent, this, 1, inst);
			case 2: return new Unit_UnitKeyword_1(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// implements+=InterfaceName
protected class Unit_ImplementsAssignment_4_1 extends AssignmentToken  {
	
	public Unit_ImplementsAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getImplementsAssignment_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_ImplementsKeyword_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("implements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("implements");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getUnitAccess().getImplementsInterfaceNameParserRuleCall_4_1_0();
			return obj;
		}
		return null;
	}

}

// ("," implements+=InterfaceName)*
protected class Unit_Group_4_2 extends GroupToken {
	
	public Unit_Group_4_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_4_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_ImplementsAssignment_4_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Unit_CommaKeyword_4_2_0 extends KeywordToken  {
	
	public Unit_CommaKeyword_4_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getCommaKeyword_4_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_4_2(parent, this, 0, inst);
			case 1: return new Unit_ImplementsAssignment_4_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// implements+=InterfaceName
protected class Unit_ImplementsAssignment_4_2_1 extends AssignmentToken  {
	
	public Unit_ImplementsAssignment_4_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getImplementsAssignment_4_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_CommaKeyword_4_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("implements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("implements");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getUnitAccess().getImplementsInterfaceNameParserRuleCall_4_2_1_0();
			return obj;
		}
		return null;
	}

}



// "{"
protected class Unit_LeftCurlyBracketKeyword_5 extends KeywordToken  {
	
	public Unit_LeftCurlyBracketKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_4(parent, this, 0, inst);
			case 1: return new Unit_Group_3(parent, this, 1, inst);
			case 2: return new Unit_NameAssignment_2(parent, this, 2, inst);
			case 3: return new Unit_UnitKeyword_1(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}

// ("properties" propertyStatements+=NamedPropertyStatements)*
protected class Unit_Group_6 extends GroupToken {
	
	public Unit_Group_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_PropertyStatementsAssignment_6_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "properties"
protected class Unit_PropertiesKeyword_6_0 extends KeywordToken  {
	
	public Unit_PropertiesKeyword_6_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getPropertiesKeyword_6_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_6(parent, this, 0, inst);
			case 1: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// propertyStatements+=NamedPropertyStatements
protected class Unit_PropertyStatementsAssignment_6_1 extends AssignmentToken  {
	
	public Unit_PropertyStatementsAssignment_6_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getPropertyStatementsAssignment_6_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NamedPropertyStatements_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("propertyStatements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("propertyStatements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNamedPropertyStatementsRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getPropertyStatementsNamedPropertyStatementsParserRuleCall_6_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_PropertiesKeyword_6_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("provides" "{" (providedCapability+=ProvidedCapability ";")+ "}"|"provides"
// providedCapability+=ProvidedCapability ";"|"requires" "{" (requiredCapabilities+=
// RequiredCapability ";")+ "}"|"requires" requiredCapabilities+=RequiredCapability ";"
// |"meta" "requires" "{" (metaRequiredCapabilities+=RequiredCapability ";")+ "}"|"meta"
// "requires" metaRequiredCapabilities+=RequiredCapability ";"|"advice" advice+=
// NamedAdvice|"sequential" "{" synchronize+=Synchronization+ "}"|"sequential"
// synchronize+=Synchronization|parts+=BuildPart|"repositories" "{" repositoryConfig
// +=RepositoryConfiguration* "}")* 
// 		 	 //-- PROVIDES
// 			               
// 			          
// 			//-- REQUIRES & META REQUIRES
// 			               
// 			          
// 			                  
// 			            
// 			//--ADVICE
// 			       
// 			//--SYNCHRONIZE
// 			                  
// 			           
// 			//--PARTS
// 			         			
// 			//-- REPOSITORIES
protected class Unit_Alternatives_7 extends AlternativesToken {

	public Unit_Alternatives_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getUnitAccess().getAlternatives_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_7_0(parent, this, 0, inst);
			case 1: return new Unit_Group_7_1(parent, this, 1, inst);
			case 2: return new Unit_Group_7_2(parent, this, 2, inst);
			case 3: return new Unit_Group_7_3(parent, this, 3, inst);
			case 4: return new Unit_Group_7_4(parent, this, 4, inst);
			case 5: return new Unit_Group_7_5(parent, this, 5, inst);
			case 6: return new Unit_Group_7_6(parent, this, 6, inst);
			case 7: return new Unit_Group_7_7(parent, this, 7, inst);
			case 8: return new Unit_Group_7_8(parent, this, 8, inst);
			case 9: return new Unit_PartsAssignment_7_9(parent, this, 9, inst);
			case 10: return new Unit_Group_7_10(parent, this, 10, inst);
			default: return null;
		}	
	}	
		
}

// "provides" "{" (providedCapability+=ProvidedCapability ";")+ "}"
protected class Unit_Group_7_0 extends GroupToken {
	
	public Unit_Group_7_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_7_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RightCurlyBracketKeyword_7_0_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "provides"
protected class Unit_ProvidesKeyword_7_0_0 extends KeywordToken  {
	
	public Unit_ProvidesKeyword_7_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getProvidesKeyword_7_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_7(parent, this, 0, inst);
			case 1: return new Unit_Group_6(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Unit_LeftCurlyBracketKeyword_7_0_1 extends KeywordToken  {
	
	public Unit_LeftCurlyBracketKeyword_7_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_7_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_ProvidesKeyword_7_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (providedCapability+=ProvidedCapability ";")+
protected class Unit_Group_7_0_2 extends GroupToken {
	
	public Unit_Group_7_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_7_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SemicolonKeyword_7_0_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// providedCapability+=ProvidedCapability
protected class Unit_ProvidedCapabilityAssignment_7_0_2_0 extends AssignmentToken  {
	
	public Unit_ProvidedCapabilityAssignment_7_0_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getProvidedCapabilityAssignment_7_0_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("providedCapability",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("providedCapability");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProvidedCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getProvidedCapabilityProvidedCapabilityParserRuleCall_7_0_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_Group_7_0_2(parent, next, actIndex, consumed);
			case 1: return new Unit_LeftCurlyBracketKeyword_7_0_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Unit_SemicolonKeyword_7_0_2_1 extends KeywordToken  {
	
	public Unit_SemicolonKeyword_7_0_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSemicolonKeyword_7_0_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_ProvidedCapabilityAssignment_7_0_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "}"
protected class Unit_RightCurlyBracketKeyword_7_0_3 extends KeywordToken  {
	
	public Unit_RightCurlyBracketKeyword_7_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_7_0_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_7_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "provides" providedCapability+=ProvidedCapability ";"
protected class Unit_Group_7_1 extends GroupToken {
	
	public Unit_Group_7_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_7_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SemicolonKeyword_7_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "provides"
protected class Unit_ProvidesKeyword_7_1_0 extends KeywordToken  {
	
	public Unit_ProvidesKeyword_7_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getProvidesKeyword_7_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_7(parent, this, 0, inst);
			case 1: return new Unit_Group_6(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// providedCapability+=ProvidedCapability
protected class Unit_ProvidedCapabilityAssignment_7_1_1 extends AssignmentToken  {
	
	public Unit_ProvidedCapabilityAssignment_7_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getProvidedCapabilityAssignment_7_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("providedCapability",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("providedCapability");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProvidedCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getProvidedCapabilityProvidedCapabilityParserRuleCall_7_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_ProvidesKeyword_7_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Unit_SemicolonKeyword_7_1_2 extends KeywordToken  {
	
	public Unit_SemicolonKeyword_7_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSemicolonKeyword_7_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_ProvidedCapabilityAssignment_7_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "requires" "{" (requiredCapabilities+=RequiredCapability ";")+ "}"
protected class Unit_Group_7_2 extends GroupToken {
	
	public Unit_Group_7_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_7_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RightCurlyBracketKeyword_7_2_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "requires"
protected class Unit_RequiresKeyword_7_2_0 extends KeywordToken  {
	
	public Unit_RequiresKeyword_7_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRequiresKeyword_7_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_7(parent, this, 0, inst);
			case 1: return new Unit_Group_6(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Unit_LeftCurlyBracketKeyword_7_2_1 extends KeywordToken  {
	
	public Unit_LeftCurlyBracketKeyword_7_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_7_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RequiresKeyword_7_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (requiredCapabilities+=RequiredCapability ";")+
protected class Unit_Group_7_2_2 extends GroupToken {
	
	public Unit_Group_7_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_7_2_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SemicolonKeyword_7_2_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// requiredCapabilities+=RequiredCapability
protected class Unit_RequiredCapabilitiesAssignment_7_2_2_0 extends AssignmentToken  {
	
	public Unit_RequiredCapabilitiesAssignment_7_2_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getRequiredCapabilitiesAssignment_7_2_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("requiredCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("requiredCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRequiredCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_2_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_Group_7_2_2(parent, next, actIndex, consumed);
			case 1: return new Unit_LeftCurlyBracketKeyword_7_2_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Unit_SemicolonKeyword_7_2_2_1 extends KeywordToken  {
	
	public Unit_SemicolonKeyword_7_2_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSemicolonKeyword_7_2_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RequiredCapabilitiesAssignment_7_2_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "}"
protected class Unit_RightCurlyBracketKeyword_7_2_3 extends KeywordToken  {
	
	public Unit_RightCurlyBracketKeyword_7_2_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_7_2_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_7_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "requires" requiredCapabilities+=RequiredCapability ";"
protected class Unit_Group_7_3 extends GroupToken {
	
	public Unit_Group_7_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_7_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SemicolonKeyword_7_3_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "requires"
protected class Unit_RequiresKeyword_7_3_0 extends KeywordToken  {
	
	public Unit_RequiresKeyword_7_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRequiresKeyword_7_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_7(parent, this, 0, inst);
			case 1: return new Unit_Group_6(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// requiredCapabilities+=RequiredCapability
protected class Unit_RequiredCapabilitiesAssignment_7_3_1 extends AssignmentToken  {
	
	public Unit_RequiredCapabilitiesAssignment_7_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getRequiredCapabilitiesAssignment_7_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("requiredCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("requiredCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRequiredCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_RequiresKeyword_7_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Unit_SemicolonKeyword_7_3_2 extends KeywordToken  {
	
	public Unit_SemicolonKeyword_7_3_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSemicolonKeyword_7_3_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RequiredCapabilitiesAssignment_7_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "meta" "requires" "{" (metaRequiredCapabilities+=RequiredCapability ";")+ "}"
protected class Unit_Group_7_4 extends GroupToken {
	
	public Unit_Group_7_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_7_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RightCurlyBracketKeyword_7_4_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "meta"
protected class Unit_MetaKeyword_7_4_0 extends KeywordToken  {
	
	public Unit_MetaKeyword_7_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getMetaKeyword_7_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_7(parent, this, 0, inst);
			case 1: return new Unit_Group_6(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "requires"
protected class Unit_RequiresKeyword_7_4_1 extends KeywordToken  {
	
	public Unit_RequiresKeyword_7_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRequiresKeyword_7_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_MetaKeyword_7_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Unit_LeftCurlyBracketKeyword_7_4_2 extends KeywordToken  {
	
	public Unit_LeftCurlyBracketKeyword_7_4_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_7_4_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RequiresKeyword_7_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (metaRequiredCapabilities+=RequiredCapability ";")+
protected class Unit_Group_7_4_3 extends GroupToken {
	
	public Unit_Group_7_4_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_7_4_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SemicolonKeyword_7_4_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// metaRequiredCapabilities+=RequiredCapability
protected class Unit_MetaRequiredCapabilitiesAssignment_7_4_3_0 extends AssignmentToken  {
	
	public Unit_MetaRequiredCapabilitiesAssignment_7_4_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getMetaRequiredCapabilitiesAssignment_7_4_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("metaRequiredCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("metaRequiredCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRequiredCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getMetaRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_4_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_Group_7_4_3(parent, next, actIndex, consumed);
			case 1: return new Unit_LeftCurlyBracketKeyword_7_4_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Unit_SemicolonKeyword_7_4_3_1 extends KeywordToken  {
	
	public Unit_SemicolonKeyword_7_4_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSemicolonKeyword_7_4_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_MetaRequiredCapabilitiesAssignment_7_4_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "}"
protected class Unit_RightCurlyBracketKeyword_7_4_4 extends KeywordToken  {
	
	public Unit_RightCurlyBracketKeyword_7_4_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_7_4_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_7_4_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "meta" "requires" metaRequiredCapabilities+=RequiredCapability ";"
protected class Unit_Group_7_5 extends GroupToken {
	
	public Unit_Group_7_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_7_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SemicolonKeyword_7_5_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "meta"
protected class Unit_MetaKeyword_7_5_0 extends KeywordToken  {
	
	public Unit_MetaKeyword_7_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getMetaKeyword_7_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_7(parent, this, 0, inst);
			case 1: return new Unit_Group_6(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "requires"
protected class Unit_RequiresKeyword_7_5_1 extends KeywordToken  {
	
	public Unit_RequiresKeyword_7_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRequiresKeyword_7_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_MetaKeyword_7_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// metaRequiredCapabilities+=RequiredCapability
protected class Unit_MetaRequiredCapabilitiesAssignment_7_5_2 extends AssignmentToken  {
	
	public Unit_MetaRequiredCapabilitiesAssignment_7_5_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getMetaRequiredCapabilitiesAssignment_7_5_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("metaRequiredCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("metaRequiredCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRequiredCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getMetaRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_5_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_RequiresKeyword_7_5_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Unit_SemicolonKeyword_7_5_3 extends KeywordToken  {
	
	public Unit_SemicolonKeyword_7_5_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSemicolonKeyword_7_5_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_MetaRequiredCapabilitiesAssignment_7_5_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "advice" advice+=NamedAdvice
protected class Unit_Group_7_6 extends GroupToken {
	
	public Unit_Group_7_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_7_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_AdviceAssignment_7_6_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "advice"
protected class Unit_AdviceKeyword_7_6_0 extends KeywordToken  {
	
	public Unit_AdviceKeyword_7_6_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getAdviceKeyword_7_6_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_7(parent, this, 0, inst);
			case 1: return new Unit_Group_6(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// advice+=NamedAdvice
protected class Unit_AdviceAssignment_7_6_1 extends AssignmentToken  {
	
	public Unit_AdviceAssignment_7_6_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getAdviceAssignment_7_6_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NamedAdvice_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("advice",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("advice");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNamedAdviceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getAdviceNamedAdviceParserRuleCall_7_6_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_AdviceKeyword_7_6_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "sequential" "{" synchronize+=Synchronization+ "}"
protected class Unit_Group_7_7 extends GroupToken {
	
	public Unit_Group_7_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_7_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RightCurlyBracketKeyword_7_7_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "sequential"
protected class Unit_SequentialKeyword_7_7_0 extends KeywordToken  {
	
	public Unit_SequentialKeyword_7_7_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSequentialKeyword_7_7_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_7(parent, this, 0, inst);
			case 1: return new Unit_Group_6(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Unit_LeftCurlyBracketKeyword_7_7_1 extends KeywordToken  {
	
	public Unit_LeftCurlyBracketKeyword_7_7_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_7_7_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SequentialKeyword_7_7_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// synchronize+=Synchronization+
protected class Unit_SynchronizeAssignment_7_7_2 extends AssignmentToken  {
	
	public Unit_SynchronizeAssignment_7_7_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getSynchronizeAssignment_7_7_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("synchronize",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("synchronize");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSynchronizationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getSynchronizeSynchronizationParserRuleCall_7_7_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_SynchronizeAssignment_7_7_2(parent, next, actIndex, consumed);
			case 1: return new Unit_LeftCurlyBracketKeyword_7_7_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Unit_RightCurlyBracketKeyword_7_7_3 extends KeywordToken  {
	
	public Unit_RightCurlyBracketKeyword_7_7_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_7_7_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SynchronizeAssignment_7_7_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "sequential" synchronize+=Synchronization
protected class Unit_Group_7_8 extends GroupToken {
	
	public Unit_Group_7_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_7_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SynchronizeAssignment_7_8_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "sequential"
protected class Unit_SequentialKeyword_7_8_0 extends KeywordToken  {
	
	public Unit_SequentialKeyword_7_8_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSequentialKeyword_7_8_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_7(parent, this, 0, inst);
			case 1: return new Unit_Group_6(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// synchronize+=Synchronization
protected class Unit_SynchronizeAssignment_7_8_1 extends AssignmentToken  {
	
	public Unit_SynchronizeAssignment_7_8_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getSynchronizeAssignment_7_8_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("synchronize",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("synchronize");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSynchronizationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getSynchronizeSynchronizationParserRuleCall_7_8_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_SequentialKeyword_7_8_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// parts+=BuildPart
protected class Unit_PartsAssignment_7_9 extends AssignmentToken  {
	
	public Unit_PartsAssignment_7_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getPartsAssignment_7_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BuildPart_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parts",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBuildPartRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getPartsBuildPartParserRuleCall_7_9_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_Alternatives_7(parent, next, actIndex, consumed);
			case 1: return new Unit_Group_6(parent, next, actIndex, consumed);
			case 2: return new Unit_LeftCurlyBracketKeyword_5(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "repositories" "{" repositoryConfig+=RepositoryConfiguration* "}"
protected class Unit_Group_7_10 extends GroupToken {
	
	public Unit_Group_7_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_7_10();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RightCurlyBracketKeyword_7_10_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "repositories"
protected class Unit_RepositoriesKeyword_7_10_0 extends KeywordToken  {
	
	public Unit_RepositoriesKeyword_7_10_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRepositoriesKeyword_7_10_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_7(parent, this, 0, inst);
			case 1: return new Unit_Group_6(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Unit_LeftCurlyBracketKeyword_7_10_1 extends KeywordToken  {
	
	public Unit_LeftCurlyBracketKeyword_7_10_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_7_10_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RepositoriesKeyword_7_10_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// repositoryConfig+=RepositoryConfiguration*
protected class Unit_RepositoryConfigAssignment_7_10_2 extends AssignmentToken  {
	
	public Unit_RepositoryConfigAssignment_7_10_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getRepositoryConfigAssignment_7_10_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryConfiguration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("repositoryConfig",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("repositoryConfig");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRepositoryConfigurationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getRepositoryConfigRepositoryConfigurationParserRuleCall_7_10_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_RepositoryConfigAssignment_7_10_2(parent, next, actIndex, consumed);
			case 1: return new Unit_LeftCurlyBracketKeyword_7_10_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Unit_RightCurlyBracketKeyword_7_10_3 extends KeywordToken  {
	
	public Unit_RightCurlyBracketKeyword_7_10_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_7_10_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RepositoryConfigAssignment_7_10_2(parent, this, 0, inst);
			case 1: return new Unit_LeftCurlyBracketKeyword_7_10_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



// "}"
protected class Unit_RightCurlyBracketKeyword_8 extends KeywordToken  {
	
	public Unit_RightCurlyBracketKeyword_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_7(parent, this, 0, inst);
			case 1: return new Unit_Group_6(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_5(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Unit ****************/


/************ begin Rule ProvidedCapability ****************
 *
 * ProvidedCapability:
 *   ("when" filter=Filter)? interface=QualifiedName "/" name=QualifiedName ("/" version=
 *   Version)?;
 *
 **/

// ("when" filter=Filter)? interface=QualifiedName "/" name=QualifiedName ("/" version=
// Version)?
protected class ProvidedCapability_Group extends GroupToken {
	
	public ProvidedCapability_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group_4(parent, this, 0, inst);
			case 1: return new ProvidedCapability_NameAssignment_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getProvidedCapabilityRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ("when" filter=Filter)?
protected class ProvidedCapability_Group_0 extends GroupToken {
	
	public ProvidedCapability_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_FilterAssignment_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "when"
protected class ProvidedCapability_WhenKeyword_0_0 extends KeywordToken  {
	
	public ProvidedCapability_WhenKeyword_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getWhenKeyword_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// filter=Filter
protected class ProvidedCapability_FilterAssignment_0_1 extends AssignmentToken  {
	
	public ProvidedCapability_FilterAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getFilterAssignment_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Filter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("filter",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("filter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFilterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getProvidedCapabilityAccess().getFilterFilterParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProvidedCapability_WhenKeyword_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// interface=QualifiedName
protected class ProvidedCapability_InterfaceAssignment_1 extends AssignmentToken  {
	
	public ProvidedCapability_InterfaceAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getInterfaceAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("interface",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("interface");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getProvidedCapabilityAccess().getInterfaceQualifiedNameParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "/"
protected class ProvidedCapability_SolidusKeyword_2 extends KeywordToken  {
	
	public ProvidedCapability_SolidusKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getSolidusKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_InterfaceAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=QualifiedName
protected class ProvidedCapability_NameAssignment_3 extends AssignmentToken  {
	
	public ProvidedCapability_NameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getNameAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_SolidusKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getProvidedCapabilityAccess().getNameQualifiedNameParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ("/" version=Version)?
protected class ProvidedCapability_Group_4 extends GroupToken {
	
	public ProvidedCapability_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getGroup_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_VersionAssignment_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "/"
protected class ProvidedCapability_SolidusKeyword_4_0 extends KeywordToken  {
	
	public ProvidedCapability_SolidusKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getSolidusKeyword_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_NameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// version=Version
protected class ProvidedCapability_VersionAssignment_4_1 extends AssignmentToken  {
	
	public ProvidedCapability_VersionAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getVersionAssignment_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_SolidusKeyword_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("version",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("version");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getProvidedCapabilityAccess().getVersionVersionParserRuleCall_4_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule ProvidedCapability ****************/


/************ begin Rule RequiredCapability ****************
 *
 * RequiredCapability:
 *   ("when" filter=Filter)? interface=QualifiedName "/" name=QualifiedName ("/" range=
 *   VersionRange)?; 
 *                    
 * 
 * // An optionally named sequence of property statements
 *
 **/

// ("when" filter=Filter)? interface=QualifiedName "/" name=QualifiedName ("/" range=
// VersionRange)?
protected class RequiredCapability_Group extends GroupToken {
	
	public RequiredCapability_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_Group_4(parent, this, 0, inst);
			case 1: return new RequiredCapability_NameAssignment_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRequiredCapabilityRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ("when" filter=Filter)?
protected class RequiredCapability_Group_0 extends GroupToken {
	
	public RequiredCapability_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_FilterAssignment_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "when"
protected class RequiredCapability_WhenKeyword_0_0 extends KeywordToken  {
	
	public RequiredCapability_WhenKeyword_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getWhenKeyword_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// filter=Filter
protected class RequiredCapability_FilterAssignment_0_1 extends AssignmentToken  {
	
	public RequiredCapability_FilterAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getFilterAssignment_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Filter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("filter",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("filter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFilterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRequiredCapabilityAccess().getFilterFilterParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RequiredCapability_WhenKeyword_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// interface=QualifiedName
protected class RequiredCapability_InterfaceAssignment_1 extends AssignmentToken  {
	
	public RequiredCapability_InterfaceAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getInterfaceAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_Group_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("interface",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("interface");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getRequiredCapabilityAccess().getInterfaceQualifiedNameParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "/"
protected class RequiredCapability_SolidusKeyword_2 extends KeywordToken  {
	
	public RequiredCapability_SolidusKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getSolidusKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_InterfaceAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=QualifiedName
protected class RequiredCapability_NameAssignment_3 extends AssignmentToken  {
	
	public RequiredCapability_NameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getNameAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_SolidusKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getRequiredCapabilityAccess().getNameQualifiedNameParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ("/" range=VersionRange)?
protected class RequiredCapability_Group_4 extends GroupToken {
	
	public RequiredCapability_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getGroup_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_RangeAssignment_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "/"
protected class RequiredCapability_SolidusKeyword_4_0 extends KeywordToken  {
	
	public RequiredCapability_SolidusKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getSolidusKeyword_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_NameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// range=VersionRange
protected class RequiredCapability_RangeAssignment_4_1 extends AssignmentToken  {
	
	public RequiredCapability_RangeAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getRangeAssignment_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_SolidusKeyword_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("range",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("range");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getRequiredCapabilityAccess().getRangeVersionRangeParserRuleCall_4_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule RequiredCapability ****************/


/************ begin Rule NamedPropertyStatements ****************
 *
 * NamedPropertyStatements returns PropertyStatements:
 *   name=ID? statements=PropertyStatements; 
 * 
 * // An optionally named sequence of property statements
 *     
 * 	             
 * 	
 * 
 * // Sequence of property statements
 *
 **/

// name=ID? statements=PropertyStatements
protected class NamedPropertyStatements_Group extends GroupToken {
	
	public NamedPropertyStatements_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getNamedPropertyStatementsAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NamedPropertyStatements_StatementsAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getNamedPropertyStatementsRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=ID?
protected class NamedPropertyStatements_NameAssignment_0 extends AssignmentToken  {
	
	public NamedPropertyStatements_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNamedPropertyStatementsAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getNamedPropertyStatementsAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// statements=PropertyStatements
protected class NamedPropertyStatements_StatementsAssignment_1 extends AssignmentToken  {
	
	public NamedPropertyStatements_StatementsAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNamedPropertyStatementsAccess().getStatementsAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyStatements_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyStatementsRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getNamedPropertyStatementsAccess().getStatementsPropertyStatementsParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NamedPropertyStatements_NameAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}


/************ end Rule NamedPropertyStatements ****************/


/************ begin Rule PropertyStatements ****************
 *
 * PropertyStatements returns PropertyStatement:
 *   "{" (("when" filter=Filter)? (statements+=UnsetPropertyStatement|statements+=
 *   PropertyStatement|statements+=PropertyStatements))* "}"; 
 * 
 * // Sequence of property statements
 *
 **/

// "{" (("when" filter=Filter)? (statements+=UnsetPropertyStatement|statements+=
// PropertyStatement|statements+=PropertyStatements))* "}"
protected class PropertyStatements_Group extends GroupToken {
	
	public PropertyStatements_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPropertyStatementsAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyStatements_RightCurlyBracketKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPropertyStatementsRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "{"
protected class PropertyStatements_LeftCurlyBracketKeyword_0 extends KeywordToken  {
	
	public PropertyStatements_LeftCurlyBracketKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPropertyStatementsAccess().getLeftCurlyBracketKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// (("when" filter=Filter)? (statements+=UnsetPropertyStatement|statements+=
// PropertyStatement|statements+=PropertyStatements))*
protected class PropertyStatements_Group_1 extends GroupToken {
	
	public PropertyStatements_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPropertyStatementsAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyStatements_Alternatives_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("when" filter=Filter)?
protected class PropertyStatements_Group_1_0 extends GroupToken {
	
	public PropertyStatements_Group_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPropertyStatementsAccess().getGroup_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyStatements_FilterAssignment_1_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "when"
protected class PropertyStatements_WhenKeyword_1_0_0 extends KeywordToken  {
	
	public PropertyStatements_WhenKeyword_1_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPropertyStatementsAccess().getWhenKeyword_1_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyStatements_Group_1(parent, this, 0, inst);
			case 1: return new PropertyStatements_LeftCurlyBracketKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// filter=Filter
protected class PropertyStatements_FilterAssignment_1_0_1 extends AssignmentToken  {
	
	public PropertyStatements_FilterAssignment_1_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyStatementsAccess().getFilterAssignment_1_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Filter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("filter",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("filter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFilterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPropertyStatementsAccess().getFilterFilterParserRuleCall_1_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PropertyStatements_WhenKeyword_1_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// statements+=UnsetPropertyStatement|statements+=PropertyStatement|statements+=
// PropertyStatements
protected class PropertyStatements_Alternatives_1_1 extends AlternativesToken {

	public PropertyStatements_Alternatives_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getPropertyStatementsAccess().getAlternatives_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyStatements_StatementsAssignment_1_1_0(parent, this, 0, inst);
			case 1: return new PropertyStatements_StatementsAssignment_1_1_1(parent, this, 1, inst);
			case 2: return new PropertyStatements_StatementsAssignment_1_1_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// statements+=UnsetPropertyStatement
protected class PropertyStatements_StatementsAssignment_1_1_0 extends AssignmentToken  {
	
	public PropertyStatements_StatementsAssignment_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyStatementsAccess().getStatementsAssignment_1_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnsetPropertyStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUnsetPropertyStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPropertyStatementsAccess().getStatementsUnsetPropertyStatementParserRuleCall_1_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PropertyStatements_Group_1_0(parent, next, actIndex, consumed);
			case 1: return new PropertyStatements_Group_1(parent, next, actIndex, consumed);
			case 2: return new PropertyStatements_LeftCurlyBracketKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// statements+=PropertyStatement
protected class PropertyStatements_StatementsAssignment_1_1_1 extends AssignmentToken  {
	
	public PropertyStatements_StatementsAssignment_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyStatementsAccess().getStatementsAssignment_1_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPropertyStatementsAccess().getStatementsPropertyStatementParserRuleCall_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PropertyStatements_Group_1_0(parent, next, actIndex, consumed);
			case 1: return new PropertyStatements_Group_1(parent, next, actIndex, consumed);
			case 2: return new PropertyStatements_LeftCurlyBracketKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// statements+=PropertyStatements
protected class PropertyStatements_StatementsAssignment_1_1_2 extends AssignmentToken  {
	
	public PropertyStatements_StatementsAssignment_1_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyStatementsAccess().getStatementsAssignment_1_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyStatements_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyStatementsRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPropertyStatementsAccess().getStatementsPropertyStatementsParserRuleCall_1_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PropertyStatements_Group_1_0(parent, next, actIndex, consumed);
			case 1: return new PropertyStatements_Group_1(parent, next, actIndex, consumed);
			case 2: return new PropertyStatements_LeftCurlyBracketKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// "}"
protected class PropertyStatements_RightCurlyBracketKeyword_2 extends KeywordToken  {
	
	public PropertyStatements_RightCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPropertyStatementsAccess().getRightCurlyBracketKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyStatements_Group_1(parent, this, 0, inst);
			case 1: return new PropertyStatements_LeftCurlyBracketKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule PropertyStatements ****************/


/************ begin Rule PropertyStatement ****************
 *
 * PropertyStatement:
 *   immutable?="immutable"? key=PropertyName op=( "=" | "+=" | "-=" | "*=" | "/=" ) value=
 *   PropertyExpression ";";
 *
 **/

// immutable?="immutable"? key=PropertyName op=( "=" | "+=" | "-=" | "*=" | "/=" ) value=
// PropertyExpression ";"
protected class PropertyStatement_Group extends GroupToken {
	
	public PropertyStatement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPropertyStatementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyStatement_SemicolonKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPropertyStatementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// immutable?="immutable"?
protected class PropertyStatement_ImmutableAssignment_0 extends AssignmentToken  {
	
	public PropertyStatement_ImmutableAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyStatementAccess().getImmutableAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("immutable",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("immutable");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getPropertyStatementAccess().getImmutableImmutableKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// key=PropertyName
protected class PropertyStatement_KeyAssignment_1 extends AssignmentToken  {
	
	public PropertyStatement_KeyAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyStatementAccess().getKeyAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyStatement_ImmutableAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("key",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("key");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getPropertyStatementAccess().getKeyPropertyNameParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// op=( "=" | "+=" | "-=" | "*=" | "/=" )
protected class PropertyStatement_OpAssignment_2 extends AssignmentToken  {
	
	public PropertyStatement_OpAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyStatementAccess().getOpAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyStatement_KeyAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("op",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("op");
		if("=".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getPropertyStatementAccess().getOpEqualsSignKeyword_2_0_0();
			return obj;
		}
		if("+=".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getPropertyStatementAccess().getOpPlusSignEqualsSignKeyword_2_0_1();
			return obj;
		}
		if("-=".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getPropertyStatementAccess().getOpHyphenMinusEqualsSignKeyword_2_0_2();
			return obj;
		}
		if("*=".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getPropertyStatementAccess().getOpAsteriskEqualsSignKeyword_2_0_3();
			return obj;
		}
		if("/=".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getPropertyStatementAccess().getOpSolidusEqualsSignKeyword_2_0_4();
			return obj;
		}
		return null;
	}

}

// value=PropertyExpression
protected class PropertyStatement_ValueAssignment_3 extends AssignmentToken  {
	
	public PropertyStatement_ValueAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyStatementAccess().getValueAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyExpression_ExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPropertyStatementAccess().getValuePropertyExpressionParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PropertyStatement_OpAssignment_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class PropertyStatement_SemicolonKeyword_4 extends KeywordToken  {
	
	public PropertyStatement_SemicolonKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPropertyStatementAccess().getSemicolonKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyStatement_ValueAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule PropertyStatement ****************/


/************ begin Rule UnsetPropertyStatement ****************
 *
 * UnsetPropertyStatement returns PropertyStatement:
 *   "unset" unsetProperties+=PropertyName ";"; 
 * 
 *     
 * 	             
 * 	
 * 
 * // identical to nested properties statement, but used to get a separate data type
 *
 **/

// "unset" unsetProperties+=PropertyName ";"
protected class UnsetPropertyStatement_Group extends GroupToken {
	
	public UnsetPropertyStatement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnsetPropertyStatementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnsetPropertyStatement_SemicolonKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnsetPropertyStatementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "unset"
protected class UnsetPropertyStatement_UnsetKeyword_0 extends KeywordToken  {
	
	public UnsetPropertyStatement_UnsetKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnsetPropertyStatementAccess().getUnsetKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// unsetProperties+=PropertyName
protected class UnsetPropertyStatement_UnsetPropertiesAssignment_1 extends AssignmentToken  {
	
	public UnsetPropertyStatement_UnsetPropertiesAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnsetPropertyStatementAccess().getUnsetPropertiesAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnsetPropertyStatement_UnsetKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("unsetProperties",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("unsetProperties");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getUnsetPropertyStatementAccess().getUnsetPropertiesPropertyNameParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class UnsetPropertyStatement_SemicolonKeyword_2 extends KeywordToken  {
	
	public UnsetPropertyStatement_SemicolonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnsetPropertyStatementAccess().getSemicolonKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnsetPropertyStatement_UnsetPropertiesAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule UnsetPropertyStatement ****************/


/************ begin Rule AnnotationStatement ****************
 *
 * AnnotationStatement returns PropertyStatement:
 *   ("when" filter=Filter)? immutable?="immutable"? key=PropertyName op=( "=" | "+=" | "-=" |
 *   "*=" | "/=" ) value=PropertyExpression ";"; 
 * 
 * // identical to nested properties statement, but used to get a separate data type
 *
 **/

// ("when" filter=Filter)? immutable?="immutable"? key=PropertyName op=( "=" | "+=" | "-=" |
// "*=" | "/=" ) value=PropertyExpression ";"
protected class AnnotationStatement_Group extends GroupToken {
	
	public AnnotationStatement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAnnotationStatementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AnnotationStatement_SemicolonKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAnnotationStatementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ("when" filter=Filter)?
protected class AnnotationStatement_Group_0 extends GroupToken {
	
	public AnnotationStatement_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAnnotationStatementAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AnnotationStatement_FilterAssignment_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "when"
protected class AnnotationStatement_WhenKeyword_0_0 extends KeywordToken  {
	
	public AnnotationStatement_WhenKeyword_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAnnotationStatementAccess().getWhenKeyword_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// filter=Filter
protected class AnnotationStatement_FilterAssignment_0_1 extends AssignmentToken  {
	
	public AnnotationStatement_FilterAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationStatementAccess().getFilterAssignment_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Filter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("filter",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("filter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFilterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAnnotationStatementAccess().getFilterFilterParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AnnotationStatement_WhenKeyword_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// immutable?="immutable"?
protected class AnnotationStatement_ImmutableAssignment_1 extends AssignmentToken  {
	
	public AnnotationStatement_ImmutableAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationStatementAccess().getImmutableAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AnnotationStatement_Group_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("immutable",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("immutable");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAnnotationStatementAccess().getImmutableImmutableKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// key=PropertyName
protected class AnnotationStatement_KeyAssignment_2 extends AssignmentToken  {
	
	public AnnotationStatement_KeyAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationStatementAccess().getKeyAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AnnotationStatement_ImmutableAssignment_1(parent, this, 0, inst);
			case 1: return new AnnotationStatement_Group_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("key",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("key");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getAnnotationStatementAccess().getKeyPropertyNameParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// op=( "=" | "+=" | "-=" | "*=" | "/=" )
protected class AnnotationStatement_OpAssignment_3 extends AssignmentToken  {
	
	public AnnotationStatement_OpAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationStatementAccess().getOpAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AnnotationStatement_KeyAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("op",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("op");
		if("=".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAnnotationStatementAccess().getOpEqualsSignKeyword_3_0_0();
			return obj;
		}
		if("+=".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAnnotationStatementAccess().getOpPlusSignEqualsSignKeyword_3_0_1();
			return obj;
		}
		if("-=".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAnnotationStatementAccess().getOpHyphenMinusEqualsSignKeyword_3_0_2();
			return obj;
		}
		if("*=".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAnnotationStatementAccess().getOpAsteriskEqualsSignKeyword_3_0_3();
			return obj;
		}
		if("/=".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAnnotationStatementAccess().getOpSolidusEqualsSignKeyword_3_0_4();
			return obj;
		}
		return null;
	}

}

// value=PropertyExpression
protected class AnnotationStatement_ValueAssignment_4 extends AssignmentToken  {
	
	public AnnotationStatement_ValueAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationStatementAccess().getValueAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyExpression_ExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAnnotationStatementAccess().getValuePropertyExpressionParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AnnotationStatement_OpAssignment_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class AnnotationStatement_SemicolonKeyword_5 extends KeywordToken  {
	
	public AnnotationStatement_SemicolonKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAnnotationStatementAccess().getSemicolonKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AnnotationStatement_ValueAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule AnnotationStatement ****************/


/************ begin Rule PropertyExpression ****************
 *
 * PropertyExpression:
 *   Expression;
 *
 **/

// Expression
protected class PropertyExpression_ExpressionParserRuleCall extends RuleCallToken {
	
	public PropertyExpression_ExpressionParserRuleCall(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPropertyExpressionAccess().getExpressionParserRuleCall();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_ValueExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPropertyExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Expression_ValueExpressionParserRuleCall.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule PropertyExpression ****************/


/************ begin Rule Synchronization ****************
 *
 * Synchronization:
 *   partrefs+=SynchronizedPart ("," partrefs+=SynchronizedPart)+ ";";  
 * 
 *  
 * 	                // at least 2
 *
 **/

// partrefs+=SynchronizedPart ("," partrefs+=SynchronizedPart)+ ";"                 // at least 2
protected class Synchronization_Group extends GroupToken {
	
	public Synchronization_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSynchronizationAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_SemicolonKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSynchronizationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// partrefs+=SynchronizedPart
protected class Synchronization_PartrefsAssignment_0 extends AssignmentToken  {
	
	public Synchronization_PartrefsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSynchronizationAccess().getPartrefsAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("partrefs",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("partrefs");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getSynchronizationAccess().getPartrefsSynchronizedPartParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ("," partrefs+=SynchronizedPart)+
protected class Synchronization_Group_1 extends GroupToken {
	
	public Synchronization_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSynchronizationAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_PartrefsAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Synchronization_CommaKeyword_1_0 extends KeywordToken  {
	
	public Synchronization_CommaKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSynchronizationAccess().getCommaKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_Group_1(parent, this, 0, inst);
			case 1: return new Synchronization_PartrefsAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// partrefs+=SynchronizedPart
protected class Synchronization_PartrefsAssignment_1_1 extends AssignmentToken  {
	
	public Synchronization_PartrefsAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSynchronizationAccess().getPartrefsAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_CommaKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("partrefs",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("partrefs");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getSynchronizationAccess().getPartrefsSynchronizedPartParserRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}


// ";"     // at least 2
protected class Synchronization_SemicolonKeyword_2 extends KeywordToken  {
	
	public Synchronization_SemicolonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSynchronizationAccess().getSemicolonKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_Group_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Synchronization ****************/



/************ begin Rule BuildPart ****************
 *
 * BuildPart:
 *   Artifacts|Group|Action;
 *
 **/

// Artifacts|Group|Action
protected class BuildPart_Alternatives extends AlternativesToken {

	public BuildPart_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getBuildPartAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BuildPart_ArtifactsParserRuleCall_0(parent, this, 0, inst);
			case 1: return new BuildPart_GroupParserRuleCall_1(parent, this, 1, inst);
			case 2: return new BuildPart_ActionParserRuleCall_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBuildPartRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Artifacts
protected class BuildPart_ArtifactsParserRuleCall_0 extends RuleCallToken {
	
	public BuildPart_ArtifactsParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getBuildPartAccess().getArtifactsParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Artifacts_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Artifacts_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getArtifactsRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Group
protected class BuildPart_GroupParserRuleCall_1 extends RuleCallToken {
	
	public BuildPart_GroupParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getBuildPartAccess().getGroupParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Group_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getGroupRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Action
protected class BuildPart_ActionParserRuleCall_2 extends RuleCallToken {
	
	public BuildPart_ActionParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getBuildPartAccess().getActionParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Action_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getActionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule BuildPart ****************/


/************ begin Rule Artifacts ****************
 *
 * Artifacts returns ArtifactsPart:
 *   visibility=Visibility? "artifacts" name=PartName ("provides" providedCapabilities+=
 *   ProvidedCapability ("," providedCapabilities+=ProvidedCapability)*)? asserts+=
 *   PostConditionAssert? "{" paths+=PathGroup* "}"; 
 * 	
 *      
 * 	          
 * 		                   
 * 		    
 * 		        
 * 	
 * 	
 * / * PATH GROUP
 * * TODO: Allow basePath without paths?
 * * TODO: generated structure is wrong . should be in sequence, basepath and expr are out of band !!
 * * /
 *
 **/

// visibility=Visibility? "artifacts" name=PartName ("provides" providedCapabilities+=
// ProvidedCapability ("," providedCapabilities+=ProvidedCapability)*)? asserts+=
// PostConditionAssert? "{" paths+=PathGroup* "}"
protected class Artifacts_Group extends GroupToken {
	
	public Artifacts_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getArtifactsAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Artifacts_RightCurlyBracketKeyword_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getArtifactsRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// visibility=Visibility?
protected class Artifacts_VisibilityAssignment_0 extends AssignmentToken  {
	
	public Artifacts_VisibilityAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getArtifactsAccess().getVisibilityAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("visibility",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("visibility");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getArtifactsAccess().getVisibilityVisibilityEnumRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "artifacts"
protected class Artifacts_ArtifactsKeyword_1 extends KeywordToken  {
	
	public Artifacts_ArtifactsKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getArtifactsAccess().getArtifactsKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Artifacts_VisibilityAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=PartName
protected class Artifacts_NameAssignment_2 extends AssignmentToken  {
	
	public Artifacts_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getArtifactsAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Artifacts_ArtifactsKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getArtifactsAccess().getNamePartNameParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ("provides" providedCapabilities+=ProvidedCapability ("," providedCapabilities+=
// ProvidedCapability)*)?
protected class Artifacts_Group_3 extends GroupToken {
	
	public Artifacts_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getArtifactsAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Artifacts_Group_3_2(parent, this, 0, inst);
			case 1: return new Artifacts_ProvidedCapabilitiesAssignment_3_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "provides"
protected class Artifacts_ProvidesKeyword_3_0 extends KeywordToken  {
	
	public Artifacts_ProvidesKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getArtifactsAccess().getProvidesKeyword_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Artifacts_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// providedCapabilities+=ProvidedCapability
protected class Artifacts_ProvidedCapabilitiesAssignment_3_1 extends AssignmentToken  {
	
	public Artifacts_ProvidedCapabilitiesAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getArtifactsAccess().getProvidedCapabilitiesAssignment_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("providedCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("providedCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProvidedCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getArtifactsAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Artifacts_ProvidesKeyword_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," providedCapabilities+=ProvidedCapability)*
protected class Artifacts_Group_3_2 extends GroupToken {
	
	public Artifacts_Group_3_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getArtifactsAccess().getGroup_3_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Artifacts_ProvidedCapabilitiesAssignment_3_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Artifacts_CommaKeyword_3_2_0 extends KeywordToken  {
	
	public Artifacts_CommaKeyword_3_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getArtifactsAccess().getCommaKeyword_3_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Artifacts_Group_3_2(parent, this, 0, inst);
			case 1: return new Artifacts_ProvidedCapabilitiesAssignment_3_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// providedCapabilities+=ProvidedCapability
protected class Artifacts_ProvidedCapabilitiesAssignment_3_2_1 extends AssignmentToken  {
	
	public Artifacts_ProvidedCapabilitiesAssignment_3_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getArtifactsAccess().getProvidedCapabilitiesAssignment_3_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("providedCapabilities",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("providedCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProvidedCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getArtifactsAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_3_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Artifacts_CommaKeyword_3_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// asserts+=PostConditionAssert?
protected class Artifacts_AssertsAssignment_4 extends AssignmentToken  {
	
	public Artifacts_AssertsAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getArtifactsAccess().getAssertsAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostConditionAssert_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("asserts",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("asserts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPostConditionAssertRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getArtifactsAccess().getAssertsPostConditionAssertParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Artifacts_Group_3(parent, next, actIndex, consumed);
			case 1: return new Artifacts_NameAssignment_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class Artifacts_LeftCurlyBracketKeyword_5 extends KeywordToken  {
	
	public Artifacts_LeftCurlyBracketKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getArtifactsAccess().getLeftCurlyBracketKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Artifacts_AssertsAssignment_4(parent, this, 0, inst);
			case 1: return new Artifacts_Group_3(parent, this, 1, inst);
			case 2: return new Artifacts_NameAssignment_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// paths+=PathGroup*
protected class Artifacts_PathsAssignment_6 extends AssignmentToken  {
	
	public Artifacts_PathsAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getArtifactsAccess().getPathsAssignment_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("paths",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("paths");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPathGroupRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getArtifactsAccess().getPathsPathGroupParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Artifacts_PathsAssignment_6(parent, next, actIndex, consumed);
			case 1: return new Artifacts_LeftCurlyBracketKeyword_5(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Artifacts_RightCurlyBracketKeyword_7 extends KeywordToken  {
	
	public Artifacts_RightCurlyBracketKeyword_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getArtifactsAccess().getRightCurlyBracketKeyword_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Artifacts_PathsAssignment_6(parent, this, 0, inst);
			case 1: return new Artifacts_LeftCurlyBracketKeyword_5(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Artifacts ****************/


/************ begin Rule PathGroup ****************
 *
 * PathGroup:
 *   ("when" filter=Filter)? (paths+=PathExpression (("," paths+=PathExpression)*|
 *   firstIsBase?="[" paths+=PathExpression ("," paths+=PathExpression)* "]") ";"|
 *   "annotations" "{" ("unset" unsetProperties+=PropertyName ";"|setProperties+=
 *   AnnotationStatement)+ "}"); 
 * 	
 * / * PATH GROUP
 * * TODO: Allow basePath without paths?
 * * TODO: generated structure is wrong . should be in sequence, basepath and expr are out of band !!
 * * /
 *  
 * 	     
 * 		   
 * 		           
 * 		                
 * 		      
 * //		| basePath=PathExpression '[' paths+=PathExpression (',' paths+=PathExpression)* ']' ';'
 * //		| ('expr' pathExpressions += Expression ';' )
 *
 **/

// ("when" filter=Filter)? (paths+=PathExpression (("," paths+=PathExpression)*|
// firstIsBase?="[" paths+=PathExpression ("," paths+=PathExpression)* "]") ";"|
// "annotations" "{" ("unset" unsetProperties+=PropertyName ";"|setProperties+=
// AnnotationStatement)+ "}")      
// 		   
// 		           
// 		                
// 		      
// //		| basePath=PathExpression '[' paths+=PathExpression (',' paths+=PathExpression)* ']' ';'
// //		| ('expr' pathExpressions += Expression ';' )
protected class PathGroup_Group extends GroupToken {
	
	public PathGroup_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_Alternatives_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPathGroupRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ("when" filter=Filter)?
protected class PathGroup_Group_0 extends GroupToken {
	
	public PathGroup_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_FilterAssignment_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "when"
protected class PathGroup_WhenKeyword_0_0 extends KeywordToken  {
	
	public PathGroup_WhenKeyword_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getWhenKeyword_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// filter=Filter
protected class PathGroup_FilterAssignment_0_1 extends AssignmentToken  {
	
	public PathGroup_FilterAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getFilterAssignment_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Filter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("filter",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("filter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFilterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPathGroupAccess().getFilterFilterParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PathGroup_WhenKeyword_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// paths+=PathExpression (("," paths+=PathExpression)*|firstIsBase?="[" paths+=
// PathExpression ("," paths+=PathExpression)* "]") ";"|"annotations" "{" ("unset"
// unsetProperties+=PropertyName ";"|setProperties+=AnnotationStatement)+ "}"  
// 		   
// 		           
// 		                
// 		      
// //		| basePath=PathExpression '[' paths+=PathExpression (',' paths+=PathExpression)* ']' ';'
// //		| ('expr' pathExpressions += Expression ';' )
protected class PathGroup_Alternatives_1 extends AlternativesToken {

	public PathGroup_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getAlternatives_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_Group_1_0(parent, this, 0, inst);
			case 1: return new PathGroup_Group_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// paths+=PathExpression (("," paths+=PathExpression)*|firstIsBase?="[" paths+=
// PathExpression ("," paths+=PathExpression)* "]") ";"    
// 		           
// 		                
// 		      
// //		| basePath=PathExpression '[' paths+=PathExpression (',' paths+=PathExpression)* ']' ';'
// //		| ('expr' pathExpressions += Expression ';' )
protected class PathGroup_Group_1_0 extends GroupToken {
	
	public PathGroup_Group_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getGroup_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_SemicolonKeyword_1_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// paths+=PathExpression
protected class PathGroup_PathsAssignment_1_0_0 extends AssignmentToken  {
	
	public PathGroup_PathsAssignment_1_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getPathsAssignment_1_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("paths",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("paths");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPathExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPathGroupAccess().getPathsPathExpressionParserRuleCall_1_0_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PathGroup_Group_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// ("," paths+=PathExpression)*|firstIsBase?="[" paths+=PathExpression ("," paths+=
// PathExpression)* "]"
protected class PathGroup_Alternatives_1_0_1 extends AlternativesToken {

	public PathGroup_Alternatives_1_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getAlternatives_1_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_Group_1_0_1_0(parent, this, 0, inst);
			case 1: return new PathGroup_Group_1_0_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ("," paths+=PathExpression)*
protected class PathGroup_Group_1_0_1_0 extends GroupToken {
	
	public PathGroup_Group_1_0_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getGroup_1_0_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_PathsAssignment_1_0_1_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class PathGroup_CommaKeyword_1_0_1_0_0 extends KeywordToken  {
	
	public PathGroup_CommaKeyword_1_0_1_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getCommaKeyword_1_0_1_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_Group_1_0_1_0(parent, this, 0, inst);
			case 1: return new PathGroup_PathsAssignment_1_0_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// paths+=PathExpression
protected class PathGroup_PathsAssignment_1_0_1_0_1 extends AssignmentToken  {
	
	public PathGroup_PathsAssignment_1_0_1_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getPathsAssignment_1_0_1_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("paths",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("paths");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPathExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPathGroupAccess().getPathsPathExpressionParserRuleCall_1_0_1_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PathGroup_CommaKeyword_1_0_1_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// firstIsBase?="[" paths+=PathExpression ("," paths+=PathExpression)* "]"
protected class PathGroup_Group_1_0_1_1 extends GroupToken {
	
	public PathGroup_Group_1_0_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getGroup_1_0_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_RightSquareBracketKeyword_1_0_1_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// firstIsBase?="["
protected class PathGroup_FirstIsBaseAssignment_1_0_1_1_0 extends AssignmentToken  {
	
	public PathGroup_FirstIsBaseAssignment_1_0_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getFirstIsBaseAssignment_1_0_1_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_PathsAssignment_1_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("firstIsBase",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("firstIsBase");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getPathGroupAccess().getFirstIsBaseLeftSquareBracketKeyword_1_0_1_1_0_0();
			return obj;
		}
		return null;
	}

}

// paths+=PathExpression
protected class PathGroup_PathsAssignment_1_0_1_1_1 extends AssignmentToken  {
	
	public PathGroup_PathsAssignment_1_0_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getPathsAssignment_1_0_1_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("paths",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("paths");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPathExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPathGroupAccess().getPathsPathExpressionParserRuleCall_1_0_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PathGroup_FirstIsBaseAssignment_1_0_1_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," paths+=PathExpression)*
protected class PathGroup_Group_1_0_1_1_2 extends GroupToken {
	
	public PathGroup_Group_1_0_1_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getGroup_1_0_1_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_PathsAssignment_1_0_1_1_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class PathGroup_CommaKeyword_1_0_1_1_2_0 extends KeywordToken  {
	
	public PathGroup_CommaKeyword_1_0_1_1_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getCommaKeyword_1_0_1_1_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_Group_1_0_1_1_2(parent, this, 0, inst);
			case 1: return new PathGroup_PathsAssignment_1_0_1_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// paths+=PathExpression
protected class PathGroup_PathsAssignment_1_0_1_1_2_1 extends AssignmentToken  {
	
	public PathGroup_PathsAssignment_1_0_1_1_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getPathsAssignment_1_0_1_1_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("paths",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("paths");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPathExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPathGroupAccess().getPathsPathExpressionParserRuleCall_1_0_1_1_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PathGroup_CommaKeyword_1_0_1_1_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "]"
protected class PathGroup_RightSquareBracketKeyword_1_0_1_1_3 extends KeywordToken  {
	
	public PathGroup_RightSquareBracketKeyword_1_0_1_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getRightSquareBracketKeyword_1_0_1_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_Group_1_0_1_1_2(parent, this, 0, inst);
			case 1: return new PathGroup_PathsAssignment_1_0_1_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



// ";"   
// //		| basePath=PathExpression '[' paths+=PathExpression (',' paths+=PathExpression)* ']' ';'
// //		| ('expr' pathExpressions += Expression ';' )
protected class PathGroup_SemicolonKeyword_1_0_2 extends KeywordToken  {
	
	public PathGroup_SemicolonKeyword_1_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getSemicolonKeyword_1_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_Alternatives_1_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "annotations" "{" ("unset" unsetProperties+=PropertyName ";"|setProperties+=
// AnnotationStatement)+ "}"
protected class PathGroup_Group_1_1 extends GroupToken {
	
	public PathGroup_Group_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getGroup_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_RightCurlyBracketKeyword_1_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "annotations"
protected class PathGroup_AnnotationsKeyword_1_1_0 extends KeywordToken  {
	
	public PathGroup_AnnotationsKeyword_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getAnnotationsKeyword_1_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_Group_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// "{"
protected class PathGroup_LeftCurlyBracketKeyword_1_1_1 extends KeywordToken  {
	
	public PathGroup_LeftCurlyBracketKeyword_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getLeftCurlyBracketKeyword_1_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_AnnotationsKeyword_1_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("unset" unsetProperties+=PropertyName ";"|setProperties+=AnnotationStatement)+
protected class PathGroup_Alternatives_1_1_2 extends AlternativesToken {

	public PathGroup_Alternatives_1_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getAlternatives_1_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_Group_1_1_2_0(parent, this, 0, inst);
			case 1: return new PathGroup_SetPropertiesAssignment_1_1_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "unset" unsetProperties+=PropertyName ";"
protected class PathGroup_Group_1_1_2_0 extends GroupToken {
	
	public PathGroup_Group_1_1_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getGroup_1_1_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_SemicolonKeyword_1_1_2_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "unset"
protected class PathGroup_UnsetKeyword_1_1_2_0_0 extends KeywordToken  {
	
	public PathGroup_UnsetKeyword_1_1_2_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getUnsetKeyword_1_1_2_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_Alternatives_1_1_2(parent, this, 0, inst);
			case 1: return new PathGroup_LeftCurlyBracketKeyword_1_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// unsetProperties+=PropertyName
protected class PathGroup_UnsetPropertiesAssignment_1_1_2_0_1 extends AssignmentToken  {
	
	public PathGroup_UnsetPropertiesAssignment_1_1_2_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getUnsetPropertiesAssignment_1_1_2_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_UnsetKeyword_1_1_2_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("unsetProperties",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("unsetProperties");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getPathGroupAccess().getUnsetPropertiesPropertyNameParserRuleCall_1_1_2_0_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class PathGroup_SemicolonKeyword_1_1_2_0_2 extends KeywordToken  {
	
	public PathGroup_SemicolonKeyword_1_1_2_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getSemicolonKeyword_1_1_2_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_UnsetPropertiesAssignment_1_1_2_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// setProperties+=AnnotationStatement
protected class PathGroup_SetPropertiesAssignment_1_1_2_1 extends AssignmentToken  {
	
	public PathGroup_SetPropertiesAssignment_1_1_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getSetPropertiesAssignment_1_1_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AnnotationStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("setProperties",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("setProperties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPathGroupAccess().getSetPropertiesAnnotationStatementParserRuleCall_1_1_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PathGroup_Alternatives_1_1_2(parent, next, actIndex, consumed);
			case 1: return new PathGroup_LeftCurlyBracketKeyword_1_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class PathGroup_RightCurlyBracketKeyword_1_1_3 extends KeywordToken  {
	
	public PathGroup_RightCurlyBracketKeyword_1_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getRightCurlyBracketKeyword_1_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_Alternatives_1_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}




/************ end Rule PathGroup ****************/


/************ begin Rule PathExpression ****************
 *
 * PathExpression:
 *   Path|ExprStatement;
 *
 **/

// Path|ExprStatement
protected class PathExpression_Alternatives extends AlternativesToken {

	public PathExpression_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getPathExpressionAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathExpression_PathParserRuleCall_0(parent, this, 0, inst);
			case 1: return new PathExpression_ExprStatementParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPathExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Path
protected class PathExpression_PathParserRuleCall_0 extends UnassignedTextToken {

	public PathExpression_PathParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPathExpressionAccess().getPathParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// ExprStatement
protected class PathExpression_ExprStatementParserRuleCall_1 extends RuleCallToken {
	
	public PathExpression_ExprStatementParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPathExpressionAccess().getExprStatementParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExprStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ExprStatement_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getExprStatementRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule PathExpression ****************/


/************ begin Rule ExprStatement ****************
 *
 * ExprStatement:
 *   "expr" "(" expression=Expression ")"; 
 * 
 *                   
 * 
 * / *
 * * A path can be written without quotes if it consists of safe chars 
 * * TODO: repace use of ID with better definition.
 * * TODO: Validation of path syntax (MS, n*x) ?
 * * /
 *
 **/

// "expr" "(" expression=Expression ")"
protected class ExprStatement_Group extends GroupToken {
	
	public ExprStatement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getExprStatementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExprStatement_RightParenthesisKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getExprStatementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "expr"
protected class ExprStatement_ExprKeyword_0 extends KeywordToken  {
	
	public ExprStatement_ExprKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getExprStatementAccess().getExprKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "("
protected class ExprStatement_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public ExprStatement_LeftParenthesisKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getExprStatementAccess().getLeftParenthesisKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExprStatement_ExprKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// expression=Expression
protected class ExprStatement_ExpressionAssignment_2 extends AssignmentToken  {
	
	public ExprStatement_ExpressionAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getExprStatementAccess().getExpressionAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_ValueExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expression",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getExprStatementAccess().getExpressionExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExprStatement_LeftParenthesisKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class ExprStatement_RightParenthesisKeyword_3 extends KeywordToken  {
	
	public ExprStatement_RightParenthesisKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getExprStatementAccess().getRightParenthesisKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExprStatement_ExpressionAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ExprStatement ****************/



/************ begin Rule Group ****************
 *
 * Group returns GroupPart:
 *   visibility=Visibility? executionMode=ExecutionMode? "group" name=PartName (
 *   "provides" providedCapabilities+=ProvidedCapability ("," providedCapabilities+=
 *   ProvidedCapability)*)? asserts+=PreConditionAssert? asserts+=PostConditionAssert?
 *   "{" prerequisites+=Prerequisite* "}";
 *
 **/

// visibility=Visibility? executionMode=ExecutionMode? "group" name=PartName (
// "provides" providedCapabilities+=ProvidedCapability ("," providedCapabilities+=
// ProvidedCapability)*)? asserts+=PreConditionAssert? asserts+=PostConditionAssert?
// "{" prerequisites+=Prerequisite* "}"
protected class Group_Group extends GroupToken {
	
	public Group_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getGroupAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_RightCurlyBracketKeyword_9(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getGroupRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// visibility=Visibility?
protected class Group_VisibilityAssignment_0 extends AssignmentToken  {
	
	public Group_VisibilityAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupAccess().getVisibilityAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("visibility",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("visibility");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getGroupAccess().getVisibilityVisibilityEnumRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// executionMode=ExecutionMode?
protected class Group_ExecutionModeAssignment_1 extends AssignmentToken  {
	
	public Group_ExecutionModeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupAccess().getExecutionModeAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_VisibilityAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("executionMode",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("executionMode");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getGroupAccess().getExecutionModeExecutionModeEnumRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "group"
protected class Group_GroupKeyword_2 extends KeywordToken  {
	
	public Group_GroupKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupAccess().getGroupKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_ExecutionModeAssignment_1(parent, this, 0, inst);
			case 1: return new Group_VisibilityAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}	
		
}

// name=PartName
protected class Group_NameAssignment_3 extends AssignmentToken  {
	
	public Group_NameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupAccess().getNameAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_GroupKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getGroupAccess().getNamePartNameParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ("provides" providedCapabilities+=ProvidedCapability ("," providedCapabilities+=
// ProvidedCapability)*)?
protected class Group_Group_4 extends GroupToken {
	
	public Group_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getGroupAccess().getGroup_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_Group_4_2(parent, this, 0, inst);
			case 1: return new Group_ProvidedCapabilitiesAssignment_4_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "provides"
protected class Group_ProvidesKeyword_4_0 extends KeywordToken  {
	
	public Group_ProvidesKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupAccess().getProvidesKeyword_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_NameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// providedCapabilities+=ProvidedCapability
protected class Group_ProvidedCapabilitiesAssignment_4_1 extends AssignmentToken  {
	
	public Group_ProvidedCapabilitiesAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupAccess().getProvidedCapabilitiesAssignment_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("providedCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("providedCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProvidedCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getGroupAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Group_ProvidesKeyword_4_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," providedCapabilities+=ProvidedCapability)*
protected class Group_Group_4_2 extends GroupToken {
	
	public Group_Group_4_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getGroupAccess().getGroup_4_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_ProvidedCapabilitiesAssignment_4_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Group_CommaKeyword_4_2_0 extends KeywordToken  {
	
	public Group_CommaKeyword_4_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupAccess().getCommaKeyword_4_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_Group_4_2(parent, this, 0, inst);
			case 1: return new Group_ProvidedCapabilitiesAssignment_4_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// providedCapabilities+=ProvidedCapability
protected class Group_ProvidedCapabilitiesAssignment_4_2_1 extends AssignmentToken  {
	
	public Group_ProvidedCapabilitiesAssignment_4_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupAccess().getProvidedCapabilitiesAssignment_4_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("providedCapabilities",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("providedCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProvidedCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getGroupAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_4_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Group_CommaKeyword_4_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// asserts+=PreConditionAssert?
protected class Group_AssertsAssignment_5 extends AssignmentToken  {
	
	public Group_AssertsAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupAccess().getAssertsAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PreConditionAssert_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("asserts",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("asserts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPreConditionAssertRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getGroupAccess().getAssertsPreConditionAssertParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Group_Group_4(parent, next, actIndex, consumed);
			case 1: return new Group_NameAssignment_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// asserts+=PostConditionAssert?
protected class Group_AssertsAssignment_6 extends AssignmentToken  {
	
	public Group_AssertsAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupAccess().getAssertsAssignment_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostConditionAssert_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("asserts",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("asserts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPostConditionAssertRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getGroupAccess().getAssertsPostConditionAssertParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Group_AssertsAssignment_5(parent, next, actIndex, consumed);
			case 1: return new Group_Group_4(parent, next, actIndex, consumed);
			case 2: return new Group_NameAssignment_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class Group_LeftCurlyBracketKeyword_7 extends KeywordToken  {
	
	public Group_LeftCurlyBracketKeyword_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupAccess().getLeftCurlyBracketKeyword_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_AssertsAssignment_6(parent, this, 0, inst);
			case 1: return new Group_AssertsAssignment_5(parent, this, 1, inst);
			case 2: return new Group_Group_4(parent, this, 2, inst);
			case 3: return new Group_NameAssignment_3(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}

// prerequisites+=Prerequisite*
protected class Group_PrerequisitesAssignment_8 extends AssignmentToken  {
	
	public Group_PrerequisitesAssignment_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupAccess().getPrerequisitesAssignment_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("prerequisites",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("prerequisites");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrerequisiteRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getGroupAccess().getPrerequisitesPrerequisiteParserRuleCall_8_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Group_PrerequisitesAssignment_8(parent, next, actIndex, consumed);
			case 1: return new Group_LeftCurlyBracketKeyword_7(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Group_RightCurlyBracketKeyword_9 extends KeywordToken  {
	
	public Group_RightCurlyBracketKeyword_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupAccess().getRightCurlyBracketKeyword_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_PrerequisitesAssignment_8(parent, this, 0, inst);
			case 1: return new Group_LeftCurlyBracketKeyword_7(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Group ****************/


/************ begin Rule Prerequisite ****************
 *
 * Prerequisite:
 *   (surpressed?="hidden"? ("when" filter=Filter)? (alias=ID "=")? (partReference=
 *   PrerequisiteEntry closure=Closure?)) ";"; 
 * 
 * 
 * 	                   
 * 	       / *| (partReference=ExprStatement) * /
 *
 **/

// (surpressed?="hidden"? ("when" filter=Filter)? (alias=ID "=")? (partReference=
// PrerequisiteEntry closure=Closure?)) ";"                    
// 	       / *| (partReference=ExprStatement) * /
protected class Prerequisite_Group extends GroupToken {
	
	public Prerequisite_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_SemicolonKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPrerequisiteRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// surpressed?="hidden"? ("when" filter=Filter)? (alias=ID "=")? (partReference=
// PrerequisiteEntry closure=Closure?)                  
// 	       / *| (partReference=ExprStatement) * /
protected class Prerequisite_Group_0 extends GroupToken {
	
	public Prerequisite_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_Group_0_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// surpressed?="hidden"?
protected class Prerequisite_SurpressedAssignment_0_0 extends AssignmentToken  {
	
	public Prerequisite_SurpressedAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getSurpressedAssignment_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("surpressed",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("surpressed");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getPrerequisiteAccess().getSurpressedHiddenKeyword_0_0_0();
			return obj;
		}
		return null;
	}

}

// ("when" filter=Filter)?
protected class Prerequisite_Group_0_1 extends GroupToken {
	
	public Prerequisite_Group_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getGroup_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_FilterAssignment_0_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "when"
protected class Prerequisite_WhenKeyword_0_1_0 extends KeywordToken  {
	
	public Prerequisite_WhenKeyword_0_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getWhenKeyword_0_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_SurpressedAssignment_0_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// filter=Filter
protected class Prerequisite_FilterAssignment_0_1_1 extends AssignmentToken  {
	
	public Prerequisite_FilterAssignment_0_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getFilterAssignment_0_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Filter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("filter",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("filter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFilterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPrerequisiteAccess().getFilterFilterParserRuleCall_0_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Prerequisite_WhenKeyword_0_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// (alias=ID "=")?
protected class Prerequisite_Group_0_2 extends GroupToken {
	
	public Prerequisite_Group_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getGroup_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_EqualsSignKeyword_0_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// alias=ID
protected class Prerequisite_AliasAssignment_0_2_0 extends AssignmentToken  {
	
	public Prerequisite_AliasAssignment_0_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getAliasAssignment_0_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_Group_0_1(parent, this, 0, inst);
			case 1: return new Prerequisite_SurpressedAssignment_0_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("alias",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("alias");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPrerequisiteAccess().getAliasIDTerminalRuleCall_0_2_0_0();
			return obj;
		}
		return null;
	}

}

// "="
protected class Prerequisite_EqualsSignKeyword_0_2_1 extends KeywordToken  {
	
	public Prerequisite_EqualsSignKeyword_0_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getEqualsSignKeyword_0_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_AliasAssignment_0_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// partReference=PrerequisiteEntry closure=Closure?
protected class Prerequisite_Group_0_3 extends GroupToken {
	
	public Prerequisite_Group_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getGroup_0_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_ClosureAssignment_0_3_1(parent, this, 0, inst);
			case 1: return new Prerequisite_PartReferenceAssignment_0_3_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// partReference=PrerequisiteEntry
protected class Prerequisite_PartReferenceAssignment_0_3_0 extends AssignmentToken  {
	
	public Prerequisite_PartReferenceAssignment_0_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getPartReferenceAssignment_0_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrerequisiteEntry_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("partReference",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("partReference");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrerequisiteEntryRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPrerequisiteAccess().getPartReferencePrerequisiteEntryParserRuleCall_0_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Prerequisite_Group_0_2(parent, next, actIndex, consumed);
			case 1: return new Prerequisite_Group_0_1(parent, next, actIndex, consumed);
			case 2: return new Prerequisite_SurpressedAssignment_0_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 3, consumed);
		}	
	}	
}

// closure=Closure?
protected class Prerequisite_ClosureAssignment_0_3_1 extends AssignmentToken  {
	
	public Prerequisite_ClosureAssignment_0_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getClosureAssignment_0_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("closure",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("closure");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getClosureRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPrerequisiteAccess().getClosureClosureParserRuleCall_0_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Prerequisite_PartReferenceAssignment_0_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ";"
protected class Prerequisite_SemicolonKeyword_1 extends KeywordToken  {
	
	public Prerequisite_SemicolonKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getSemicolonKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_Group_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Prerequisite ****************/


/************ begin Rule Closure ****************
 *
 * Closure:
 *   "with" "{" ("properties" "{" ("unset" unsetProperties+=PropertyName ";"|setProperties
 *   +=PropertyStatement)+ "}"|"advice" advice+=CompoundAdvice)* "}";
 *
 **/

// "with" "{" ("properties" "{" ("unset" unsetProperties+=PropertyName ";"|setProperties
// +=PropertyStatement)+ "}"|"advice" advice+=CompoundAdvice)* "}"
protected class Closure_Group extends GroupToken {
	
	public Closure_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getClosureAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_RightCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getClosureRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "with"
protected class Closure_WithKeyword_0 extends KeywordToken  {
	
	public Closure_WithKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureAccess().getWithKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "{"
protected class Closure_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public Closure_LeftCurlyBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureAccess().getLeftCurlyBracketKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_WithKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("properties" "{" ("unset" unsetProperties+=PropertyName ";"|setProperties+=
// PropertyStatement)+ "}"|"advice" advice+=CompoundAdvice)*
protected class Closure_Alternatives_2 extends AlternativesToken {

	public Closure_Alternatives_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getClosureAccess().getAlternatives_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_Group_2_0(parent, this, 0, inst);
			case 1: return new Closure_Group_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "properties" "{" ("unset" unsetProperties+=PropertyName ";"|setProperties+=
// PropertyStatement)+ "}"
protected class Closure_Group_2_0 extends GroupToken {
	
	public Closure_Group_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getClosureAccess().getGroup_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_RightCurlyBracketKeyword_2_0_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "properties"
protected class Closure_PropertiesKeyword_2_0_0 extends KeywordToken  {
	
	public Closure_PropertiesKeyword_2_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureAccess().getPropertiesKeyword_2_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_Alternatives_2(parent, this, 0, inst);
			case 1: return new Closure_LeftCurlyBracketKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Closure_LeftCurlyBracketKeyword_2_0_1 extends KeywordToken  {
	
	public Closure_LeftCurlyBracketKeyword_2_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureAccess().getLeftCurlyBracketKeyword_2_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_PropertiesKeyword_2_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("unset" unsetProperties+=PropertyName ";"|setProperties+=PropertyStatement)+
protected class Closure_Alternatives_2_0_2 extends AlternativesToken {

	public Closure_Alternatives_2_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getClosureAccess().getAlternatives_2_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_Group_2_0_2_0(parent, this, 0, inst);
			case 1: return new Closure_SetPropertiesAssignment_2_0_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "unset" unsetProperties+=PropertyName ";"
protected class Closure_Group_2_0_2_0 extends GroupToken {
	
	public Closure_Group_2_0_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getClosureAccess().getGroup_2_0_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_SemicolonKeyword_2_0_2_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "unset"
protected class Closure_UnsetKeyword_2_0_2_0_0 extends KeywordToken  {
	
	public Closure_UnsetKeyword_2_0_2_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureAccess().getUnsetKeyword_2_0_2_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_Alternatives_2_0_2(parent, this, 0, inst);
			case 1: return new Closure_LeftCurlyBracketKeyword_2_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// unsetProperties+=PropertyName
protected class Closure_UnsetPropertiesAssignment_2_0_2_0_1 extends AssignmentToken  {
	
	public Closure_UnsetPropertiesAssignment_2_0_2_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClosureAccess().getUnsetPropertiesAssignment_2_0_2_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_UnsetKeyword_2_0_2_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("unsetProperties",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("unsetProperties");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getClosureAccess().getUnsetPropertiesPropertyNameParserRuleCall_2_0_2_0_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Closure_SemicolonKeyword_2_0_2_0_2 extends KeywordToken  {
	
	public Closure_SemicolonKeyword_2_0_2_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureAccess().getSemicolonKeyword_2_0_2_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_UnsetPropertiesAssignment_2_0_2_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// setProperties+=PropertyStatement
protected class Closure_SetPropertiesAssignment_2_0_2_1 extends AssignmentToken  {
	
	public Closure_SetPropertiesAssignment_2_0_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClosureAccess().getSetPropertiesAssignment_2_0_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("setProperties",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("setProperties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClosureAccess().getSetPropertiesPropertyStatementParserRuleCall_2_0_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Closure_Alternatives_2_0_2(parent, next, actIndex, consumed);
			case 1: return new Closure_LeftCurlyBracketKeyword_2_0_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class Closure_RightCurlyBracketKeyword_2_0_3 extends KeywordToken  {
	
	public Closure_RightCurlyBracketKeyword_2_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureAccess().getRightCurlyBracketKeyword_2_0_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_Alternatives_2_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "advice" advice+=CompoundAdvice
protected class Closure_Group_2_1 extends GroupToken {
	
	public Closure_Group_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getClosureAccess().getGroup_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_AdviceAssignment_2_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "advice"
protected class Closure_AdviceKeyword_2_1_0 extends KeywordToken  {
	
	public Closure_AdviceKeyword_2_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureAccess().getAdviceKeyword_2_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_Alternatives_2(parent, this, 0, inst);
			case 1: return new Closure_LeftCurlyBracketKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// advice+=CompoundAdvice
protected class Closure_AdviceAssignment_2_1_1 extends AssignmentToken  {
	
	public Closure_AdviceAssignment_2_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClosureAccess().getAdviceAssignment_2_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundAdvice_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("advice",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("advice");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompoundAdviceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClosureAccess().getAdviceCompoundAdviceParserRuleCall_2_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Closure_AdviceKeyword_2_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// "}"
protected class Closure_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public Closure_RightCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureAccess().getRightCurlyBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Closure_Alternatives_2(parent, this, 0, inst);
			case 1: return new Closure_LeftCurlyBracketKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Closure ****************/


/************ begin Rule PrerequisiteEntry ****************
 *
 * PrerequisiteEntry:
 *   PartInSelf|CapabilityReferencedPart|CompoundReferences|ExprStatement;
 *
 **/

// PartInSelf|CapabilityReferencedPart|CompoundReferences|ExprStatement
protected class PrerequisiteEntry_Alternatives extends AlternativesToken {

	public PrerequisiteEntry_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getPrerequisiteEntryAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrerequisiteEntry_PartInSelfParserRuleCall_0(parent, this, 0, inst);
			case 1: return new PrerequisiteEntry_CapabilityReferencedPartParserRuleCall_1(parent, this, 1, inst);
			case 2: return new PrerequisiteEntry_CompoundReferencesParserRuleCall_2(parent, this, 2, inst);
			case 3: return new PrerequisiteEntry_ExprStatementParserRuleCall_3(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPrerequisiteEntryRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// PartInSelf
protected class PrerequisiteEntry_PartInSelfParserRuleCall_0 extends RuleCallToken {
	
	public PrerequisiteEntry_PartInSelfParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrerequisiteEntryAccess().getPartInSelfParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PartInSelf_PartNameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(PartInSelf_PartNameAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPartInSelfRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// CapabilityReferencedPart
protected class PrerequisiteEntry_CapabilityReferencedPartParserRuleCall_1 extends RuleCallToken {
	
	public PrerequisiteEntry_CapabilityReferencedPartParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrerequisiteEntryAccess().getCapabilityReferencedPartParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CapabilityReferencedPart_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCapabilityReferencedPartRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// CompoundReferences
protected class PrerequisiteEntry_CompoundReferencesParserRuleCall_2 extends RuleCallToken {
	
	public PrerequisiteEntry_CompoundReferencesParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrerequisiteEntryAccess().getCompoundReferencesParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundReferences_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CompoundReferences_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCompoundReferencesRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ExprStatement
protected class PrerequisiteEntry_ExprStatementParserRuleCall_3 extends RuleCallToken {
	
	public PrerequisiteEntry_ExprStatementParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrerequisiteEntryAccess().getExprStatementParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExprStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ExprStatement_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getExprStatementRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule PrerequisiteEntry ****************/


/************ begin Rule PartInSelf ****************
 *
 * PartInSelf:
 *   partName=PartName; 
 * 	
 * 	      // i.e. self#partName
 *
 **/

// partName=PartName      // i.e. self#partName
protected class PartInSelf_PartNameAssignment extends AssignmentToken  {
	
	public PartInSelf_PartNameAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPartInSelfAccess().getPartNameAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPartInSelfRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("partName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("partName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getPartInSelfAccess().getPartNamePartNameParserRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule PartInSelf ****************/


/************ begin Rule CapabilityReferencedPart ****************
 *
 * CapabilityReferencedPart:
 *   interface=InterfaceName "/" name=UnitName ("/" range=VersionRange)? "#" partName=
 *   PartName|interface=InterfaceName "/" name=UnitName ("/" range=VersionRange)?;
 *
 **/

// interface=InterfaceName "/" name=UnitName ("/" range=VersionRange)? "#" partName=
// PartName|interface=InterfaceName "/" name=UnitName ("/" range=VersionRange)?
protected class CapabilityReferencedPart_Alternatives extends AlternativesToken {

	public CapabilityReferencedPart_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_Group_0(parent, this, 0, inst);
			case 1: return new CapabilityReferencedPart_Group_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCapabilityReferencedPartRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// interface=InterfaceName "/" name=UnitName ("/" range=VersionRange)? "#" partName=
// PartName
protected class CapabilityReferencedPart_Group_0 extends GroupToken {
	
	public CapabilityReferencedPart_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_PartNameAssignment_0_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// interface=InterfaceName
protected class CapabilityReferencedPart_InterfaceAssignment_0_0 extends AssignmentToken  {
	
	public CapabilityReferencedPart_InterfaceAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getInterfaceAssignment_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("interface",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("interface");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getCapabilityReferencedPartAccess().getInterfaceInterfaceNameParserRuleCall_0_0_0();
			return obj;
		}
		return null;
	}

}

// "/"
protected class CapabilityReferencedPart_SolidusKeyword_0_1 extends KeywordToken  {
	
	public CapabilityReferencedPart_SolidusKeyword_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getSolidusKeyword_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_InterfaceAssignment_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=UnitName
protected class CapabilityReferencedPart_NameAssignment_0_2 extends AssignmentToken  {
	
	public CapabilityReferencedPart_NameAssignment_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getNameAssignment_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_SolidusKeyword_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getCapabilityReferencedPartAccess().getNameUnitNameParserRuleCall_0_2_0();
			return obj;
		}
		return null;
	}

}

// ("/" range=VersionRange)?
protected class CapabilityReferencedPart_Group_0_3 extends GroupToken {
	
	public CapabilityReferencedPart_Group_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getGroup_0_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_RangeAssignment_0_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "/"
protected class CapabilityReferencedPart_SolidusKeyword_0_3_0 extends KeywordToken  {
	
	public CapabilityReferencedPart_SolidusKeyword_0_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getSolidusKeyword_0_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_NameAssignment_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// range=VersionRange
protected class CapabilityReferencedPart_RangeAssignment_0_3_1 extends AssignmentToken  {
	
	public CapabilityReferencedPart_RangeAssignment_0_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getRangeAssignment_0_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_SolidusKeyword_0_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("range",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("range");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getCapabilityReferencedPartAccess().getRangeVersionRangeParserRuleCall_0_3_1_0();
			return obj;
		}
		return null;
	}

}


// "#"
protected class CapabilityReferencedPart_NumberSignKeyword_0_4 extends KeywordToken  {
	
	public CapabilityReferencedPart_NumberSignKeyword_0_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getNumberSignKeyword_0_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_Group_0_3(parent, this, 0, inst);
			case 1: return new CapabilityReferencedPart_NameAssignment_0_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// partName=PartName
protected class CapabilityReferencedPart_PartNameAssignment_0_5 extends AssignmentToken  {
	
	public CapabilityReferencedPart_PartNameAssignment_0_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getPartNameAssignment_0_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_NumberSignKeyword_0_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("partName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("partName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getCapabilityReferencedPartAccess().getPartNamePartNameParserRuleCall_0_5_0();
			return obj;
		}
		return null;
	}

}


// interface=InterfaceName "/" name=UnitName ("/" range=VersionRange)?
protected class CapabilityReferencedPart_Group_1 extends GroupToken {
	
	public CapabilityReferencedPart_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_Group_1_3(parent, this, 0, inst);
			case 1: return new CapabilityReferencedPart_NameAssignment_1_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// interface=InterfaceName
protected class CapabilityReferencedPart_InterfaceAssignment_1_0 extends AssignmentToken  {
	
	public CapabilityReferencedPart_InterfaceAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getInterfaceAssignment_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("interface",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("interface");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getCapabilityReferencedPartAccess().getInterfaceInterfaceNameParserRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// "/"
protected class CapabilityReferencedPart_SolidusKeyword_1_1 extends KeywordToken  {
	
	public CapabilityReferencedPart_SolidusKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getSolidusKeyword_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_InterfaceAssignment_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=UnitName
protected class CapabilityReferencedPart_NameAssignment_1_2 extends AssignmentToken  {
	
	public CapabilityReferencedPart_NameAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getNameAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_SolidusKeyword_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getCapabilityReferencedPartAccess().getNameUnitNameParserRuleCall_1_2_0();
			return obj;
		}
		return null;
	}

}

// ("/" range=VersionRange)?
protected class CapabilityReferencedPart_Group_1_3 extends GroupToken {
	
	public CapabilityReferencedPart_Group_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getGroup_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_RangeAssignment_1_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "/"
protected class CapabilityReferencedPart_SolidusKeyword_1_3_0 extends KeywordToken  {
	
	public CapabilityReferencedPart_SolidusKeyword_1_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getSolidusKeyword_1_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_NameAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// range=VersionRange
protected class CapabilityReferencedPart_RangeAssignment_1_3_1 extends AssignmentToken  {
	
	public CapabilityReferencedPart_RangeAssignment_1_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getRangeAssignment_1_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_SolidusKeyword_1_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("range",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("range");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getCapabilityReferencedPartAccess().getRangeVersionRangeParserRuleCall_1_3_1_0();
			return obj;
		}
		return null;
	}

}




/************ end Rule CapabilityReferencedPart ****************/


/************ begin Rule CompoundReferences ****************
 *
 * CompoundReferences:
 *   "{" prerequisites+=Prerequisite* "}";
 *
 **/

// "{" prerequisites+=Prerequisite* "}"
protected class CompoundReferences_Group extends GroupToken {
	
	public CompoundReferences_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCompoundReferencesAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundReferences_RightCurlyBracketKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCompoundReferencesRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "{"
protected class CompoundReferences_LeftCurlyBracketKeyword_0 extends KeywordToken  {
	
	public CompoundReferences_LeftCurlyBracketKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundReferencesAccess().getLeftCurlyBracketKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// prerequisites+=Prerequisite*
protected class CompoundReferences_PrerequisitesAssignment_1 extends AssignmentToken  {
	
	public CompoundReferences_PrerequisitesAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundReferencesAccess().getPrerequisitesAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("prerequisites",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("prerequisites");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrerequisiteRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompoundReferencesAccess().getPrerequisitesPrerequisiteParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompoundReferences_PrerequisitesAssignment_1(parent, next, actIndex, consumed);
			case 1: return new CompoundReferences_LeftCurlyBracketKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class CompoundReferences_RightCurlyBracketKeyword_2 extends KeywordToken  {
	
	public CompoundReferences_RightCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundReferencesAccess().getRightCurlyBracketKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundReferences_PrerequisitesAssignment_1(parent, this, 0, inst);
			case 1: return new CompoundReferences_LeftCurlyBracketKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule CompoundReferences ****************/


/************ begin Rule Action ****************
 *
 * Action returns ActionPart:
 *   visibility=Visibility? executionMode=ExecutionMode? "action" PartName ("provides"
 *   providedCapabilities+=ProvidedCapability ("," providedCapabilities+=
 *   ProvidedCapability)*)? asserts+=PreConditionAssert? asserts+=PostConditionAssert?
 *   "{" ("properties" properties+=PropertyStatements)? advice=Advice? resultGroup=
 *   ActionInputGroup? layout+=Layout* statements=Statements "}"; 
 * 
 *     
 * 	      
 *           
 * 	   
 * //	 'actor' QualifiedName '(' (actorParameters += Parameter (',' actorParameters += Parameter)*)? ')'
 *
 **/

// visibility=Visibility? executionMode=ExecutionMode? "action" PartName ("provides"
// providedCapabilities+=ProvidedCapability ("," providedCapabilities+=
// ProvidedCapability)*)? asserts+=PreConditionAssert? asserts+=PostConditionAssert?
// "{" ("properties" properties+=PropertyStatements)? advice=Advice? resultGroup=
// ActionInputGroup? layout+=Layout* statements=Statements "}"       
//           
// 	   
// //	 'actor' QualifiedName '(' (actorParameters += Parameter (',' actorParameters += Parameter)*)? ')'
protected class Action_Group extends GroupToken {
	
	public Action_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getActionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_RightCurlyBracketKeyword_13(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getActionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// visibility=Visibility?
protected class Action_VisibilityAssignment_0 extends AssignmentToken  {
	
	public Action_VisibilityAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getVisibilityAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("visibility",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("visibility");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getActionAccess().getVisibilityVisibilityEnumRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// executionMode=ExecutionMode?
protected class Action_ExecutionModeAssignment_1 extends AssignmentToken  {
	
	public Action_ExecutionModeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getExecutionModeAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_VisibilityAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("executionMode",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("executionMode");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getActionAccess().getExecutionModeExecutionModeEnumRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "action"
protected class Action_ActionKeyword_2 extends KeywordToken  {
	
	public Action_ActionKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getActionAccess().getActionKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_ExecutionModeAssignment_1(parent, this, 0, inst);
			case 1: return new Action_VisibilityAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}	
		
}

// PartName   
// //	 'actor' QualifiedName '(' (actorParameters += Parameter (',' actorParameters += Parameter)*)? ')'
protected class Action_PartNameParserRuleCall_3 extends UnassignedTextToken {

	public Action_PartNameParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getActionAccess().getPartNameParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_ActionKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("provides" providedCapabilities+=ProvidedCapability ("," providedCapabilities+=
// ProvidedCapability)*)?
protected class Action_Group_4 extends GroupToken {
	
	public Action_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getActionAccess().getGroup_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_Group_4_2(parent, this, 0, inst);
			case 1: return new Action_ProvidedCapabilitiesAssignment_4_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "provides"
protected class Action_ProvidesKeyword_4_0 extends KeywordToken  {
	
	public Action_ProvidesKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getActionAccess().getProvidesKeyword_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_PartNameParserRuleCall_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// providedCapabilities+=ProvidedCapability
protected class Action_ProvidedCapabilitiesAssignment_4_1 extends AssignmentToken  {
	
	public Action_ProvidedCapabilitiesAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getProvidedCapabilitiesAssignment_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("providedCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("providedCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProvidedCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getActionAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Action_ProvidesKeyword_4_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," providedCapabilities+=ProvidedCapability)*
protected class Action_Group_4_2 extends GroupToken {
	
	public Action_Group_4_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getActionAccess().getGroup_4_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_ProvidedCapabilitiesAssignment_4_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Action_CommaKeyword_4_2_0 extends KeywordToken  {
	
	public Action_CommaKeyword_4_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getActionAccess().getCommaKeyword_4_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_Group_4_2(parent, this, 0, inst);
			case 1: return new Action_ProvidedCapabilitiesAssignment_4_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// providedCapabilities+=ProvidedCapability
protected class Action_ProvidedCapabilitiesAssignment_4_2_1 extends AssignmentToken  {
	
	public Action_ProvidedCapabilitiesAssignment_4_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getProvidedCapabilitiesAssignment_4_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("providedCapabilities",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("providedCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProvidedCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getActionAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_4_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Action_CommaKeyword_4_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// asserts+=PreConditionAssert?
protected class Action_AssertsAssignment_5 extends AssignmentToken  {
	
	public Action_AssertsAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getAssertsAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PreConditionAssert_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("asserts",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("asserts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPreConditionAssertRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getActionAccess().getAssertsPreConditionAssertParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Action_Group_4(parent, next, actIndex, consumed);
			case 1: return new Action_PartNameParserRuleCall_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// asserts+=PostConditionAssert?
protected class Action_AssertsAssignment_6 extends AssignmentToken  {
	
	public Action_AssertsAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getAssertsAssignment_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostConditionAssert_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("asserts",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("asserts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPostConditionAssertRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getActionAccess().getAssertsPostConditionAssertParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Action_AssertsAssignment_5(parent, next, actIndex, consumed);
			case 1: return new Action_Group_4(parent, next, actIndex, consumed);
			case 2: return new Action_PartNameParserRuleCall_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class Action_LeftCurlyBracketKeyword_7 extends KeywordToken  {
	
	public Action_LeftCurlyBracketKeyword_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getActionAccess().getLeftCurlyBracketKeyword_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_AssertsAssignment_6(parent, this, 0, inst);
			case 1: return new Action_AssertsAssignment_5(parent, this, 1, inst);
			case 2: return new Action_Group_4(parent, this, 2, inst);
			case 3: return new Action_PartNameParserRuleCall_3(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}

// ("properties" properties+=PropertyStatements)?
protected class Action_Group_8 extends GroupToken {
	
	public Action_Group_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getActionAccess().getGroup_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_PropertiesAssignment_8_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "properties"
protected class Action_PropertiesKeyword_8_0 extends KeywordToken  {
	
	public Action_PropertiesKeyword_8_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getActionAccess().getPropertiesKeyword_8_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_LeftCurlyBracketKeyword_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// properties+=PropertyStatements
protected class Action_PropertiesAssignment_8_1 extends AssignmentToken  {
	
	public Action_PropertiesAssignment_8_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getPropertiesAssignment_8_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyStatements_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("properties",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("properties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyStatementsRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getActionAccess().getPropertiesPropertyStatementsParserRuleCall_8_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Action_PropertiesKeyword_8_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// advice=Advice?
protected class Action_AdviceAssignment_9 extends AssignmentToken  {
	
	public Action_AdviceAssignment_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getAdviceAssignment_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Advice_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("advice",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("advice");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAdviceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getActionAccess().getAdviceAdviceParserRuleCall_9_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Action_Group_8(parent, next, actIndex, consumed);
			case 1: return new Action_LeftCurlyBracketKeyword_7(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// resultGroup=ActionInputGroup?
protected class Action_ResultGroupAssignment_10 extends AssignmentToken  {
	
	public Action_ResultGroupAssignment_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getResultGroupAssignment_10();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ActionInputGroup_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("resultGroup",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("resultGroup");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActionInputGroupRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getActionAccess().getResultGroupActionInputGroupParserRuleCall_10_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Action_AdviceAssignment_9(parent, next, actIndex, consumed);
			case 1: return new Action_Group_8(parent, next, actIndex, consumed);
			case 2: return new Action_LeftCurlyBracketKeyword_7(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// layout+=Layout*
protected class Action_LayoutAssignment_11 extends AssignmentToken  {
	
	public Action_LayoutAssignment_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getLayoutAssignment_11();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Layout_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("layout",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("layout");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLayoutRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getActionAccess().getLayoutLayoutParserRuleCall_11_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Action_LayoutAssignment_11(parent, next, actIndex, consumed);
			case 1: return new Action_ResultGroupAssignment_10(parent, next, actIndex, consumed);
			case 2: return new Action_AdviceAssignment_9(parent, next, actIndex, consumed);
			case 3: return new Action_Group_8(parent, next, actIndex, consumed);
			case 4: return new Action_LeftCurlyBracketKeyword_7(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// statements=Statements
protected class Action_StatementsAssignment_12 extends AssignmentToken  {
	
	public Action_StatementsAssignment_12(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getStatementsAssignment_12();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statements_StatementsAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementsRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getActionAccess().getStatementsStatementsParserRuleCall_12_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Action_LayoutAssignment_11(parent, next, actIndex, consumed);
			case 1: return new Action_ResultGroupAssignment_10(parent, next, actIndex, consumed);
			case 2: return new Action_AdviceAssignment_9(parent, next, actIndex, consumed);
			case 3: return new Action_Group_8(parent, next, actIndex, consumed);
			case 4: return new Action_LeftCurlyBracketKeyword_7(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Action_RightCurlyBracketKeyword_13 extends KeywordToken  {
	
	public Action_RightCurlyBracketKeyword_13(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getActionAccess().getRightCurlyBracketKeyword_13();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_StatementsAssignment_12(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Action ****************/


/************ begin Rule Parameter ****************
 *
 * Parameter:
 *   val=Expression;
 *
 **/

// val=Expression
protected class Parameter_ValAssignment extends AssignmentToken  {
	
	public Parameter_ValAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterAccess().getValAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_ValueExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getParameterRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getParameterAccess().getValExpressionParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule Parameter ****************/


/************ begin Rule Layout ****************
 *
 * Layout:
 *   ("when" filter=Filter)? "layout" name=QualifiedName? asserts+=PostConditionAssert?
 *   "{" paths+=PathGroup* "}"; 
 * 	
 *     
 * 	            
 * //		(asserts += PreConditionAssert)? // precondition does not make sense
 *
 **/

// ("when" filter=Filter)? "layout" name=QualifiedName? asserts+=PostConditionAssert?
// "{" paths+=PathGroup* "}"             
// //		(asserts += PreConditionAssert)? // precondition does not make sense
protected class Layout_Group extends GroupToken {
	
	public Layout_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLayoutAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Layout_RightCurlyBracketKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLayoutRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ("when" filter=Filter)?
protected class Layout_Group_0 extends GroupToken {
	
	public Layout_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLayoutAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Layout_FilterAssignment_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "when"
protected class Layout_WhenKeyword_0_0 extends KeywordToken  {
	
	public Layout_WhenKeyword_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLayoutAccess().getWhenKeyword_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// filter=Filter
protected class Layout_FilterAssignment_0_1 extends AssignmentToken  {
	
	public Layout_FilterAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLayoutAccess().getFilterAssignment_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Filter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("filter",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("filter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFilterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLayoutAccess().getFilterFilterParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Layout_WhenKeyword_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "layout"
protected class Layout_LayoutKeyword_1 extends KeywordToken  {
	
	public Layout_LayoutKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLayoutAccess().getLayoutKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Layout_Group_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=QualifiedName?
protected class Layout_NameAssignment_2 extends AssignmentToken  {
	
	public Layout_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLayoutAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Layout_LayoutKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getLayoutAccess().getNameQualifiedNameParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// asserts+=PostConditionAssert?
protected class Layout_AssertsAssignment_3 extends AssignmentToken  {
	
	public Layout_AssertsAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLayoutAccess().getAssertsAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostConditionAssert_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("asserts",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("asserts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPostConditionAssertRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLayoutAccess().getAssertsPostConditionAssertParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Layout_NameAssignment_2(parent, next, actIndex, consumed);
			case 1: return new Layout_LayoutKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class Layout_LeftCurlyBracketKeyword_4 extends KeywordToken  {
	
	public Layout_LeftCurlyBracketKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLayoutAccess().getLeftCurlyBracketKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Layout_AssertsAssignment_3(parent, this, 0, inst);
			case 1: return new Layout_NameAssignment_2(parent, this, 1, inst);
			case 2: return new Layout_LayoutKeyword_1(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// paths+=PathGroup*
protected class Layout_PathsAssignment_5 extends AssignmentToken  {
	
	public Layout_PathsAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLayoutAccess().getPathsAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("paths",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("paths");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPathGroupRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLayoutAccess().getPathsPathGroupParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Layout_PathsAssignment_5(parent, next, actIndex, consumed);
			case 1: return new Layout_LeftCurlyBracketKeyword_4(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Layout_RightCurlyBracketKeyword_6 extends KeywordToken  {
	
	public Layout_RightCurlyBracketKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLayoutAccess().getRightCurlyBracketKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Layout_PathsAssignment_5(parent, this, 0, inst);
			case 1: return new Layout_LeftCurlyBracketKeyword_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Layout ****************/


/************ begin Rule ActionInputGroup ****************
 *
 * ActionInputGroup:
 *   "group" asserts+=PreConditionAssert? asserts+=PostConditionAssert? "{" prerequisites
 *   +=Prerequisite* "}";
 *
 **/

// "group" asserts+=PreConditionAssert? asserts+=PostConditionAssert? "{" prerequisites
// +=Prerequisite* "}"
protected class ActionInputGroup_Group extends GroupToken {
	
	public ActionInputGroup_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getActionInputGroupAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ActionInputGroup_RightCurlyBracketKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getActionInputGroupRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "group"
protected class ActionInputGroup_GroupKeyword_0 extends KeywordToken  {
	
	public ActionInputGroup_GroupKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getActionInputGroupAccess().getGroupKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// asserts+=PreConditionAssert?
protected class ActionInputGroup_AssertsAssignment_1 extends AssignmentToken  {
	
	public ActionInputGroup_AssertsAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionInputGroupAccess().getAssertsAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PreConditionAssert_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("asserts",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("asserts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPreConditionAssertRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getActionInputGroupAccess().getAssertsPreConditionAssertParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ActionInputGroup_GroupKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// asserts+=PostConditionAssert?
protected class ActionInputGroup_AssertsAssignment_2 extends AssignmentToken  {
	
	public ActionInputGroup_AssertsAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionInputGroupAccess().getAssertsAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostConditionAssert_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("asserts",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("asserts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPostConditionAssertRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getActionInputGroupAccess().getAssertsPostConditionAssertParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ActionInputGroup_AssertsAssignment_1(parent, next, actIndex, consumed);
			case 1: return new ActionInputGroup_GroupKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class ActionInputGroup_LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public ActionInputGroup_LeftCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getActionInputGroupAccess().getLeftCurlyBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ActionInputGroup_AssertsAssignment_2(parent, this, 0, inst);
			case 1: return new ActionInputGroup_AssertsAssignment_1(parent, this, 1, inst);
			case 2: return new ActionInputGroup_GroupKeyword_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// prerequisites+=Prerequisite*
protected class ActionInputGroup_PrerequisitesAssignment_4 extends AssignmentToken  {
	
	public ActionInputGroup_PrerequisitesAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionInputGroupAccess().getPrerequisitesAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("prerequisites",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("prerequisites");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrerequisiteRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getActionInputGroupAccess().getPrerequisitesPrerequisiteParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ActionInputGroup_PrerequisitesAssignment_4(parent, next, actIndex, consumed);
			case 1: return new ActionInputGroup_LeftCurlyBracketKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class ActionInputGroup_RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public ActionInputGroup_RightCurlyBracketKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getActionInputGroupAccess().getRightCurlyBracketKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ActionInputGroup_PrerequisitesAssignment_4(parent, this, 0, inst);
			case 1: return new ActionInputGroup_LeftCurlyBracketKeyword_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ActionInputGroup ****************/


/************ begin Rule RepositoryConfiguration ****************
 *
 * RepositoryConfiguration:
 *   (location=URI|"resolver" resolverClass=QualifiedName) advice=CompoundAdvice? ";"; 
 * 
 * 
 * 	              
 * 	
 * 
 * / *
 * ** URI TODO: Would like to have better parsing of URL - don't know if possible to push this to lexer
 * ** as we may want to support namespaces (using 'ns:' prefix) (for importing b3 files, common advice, rules etc.).
 * ** The ':' clashes with 'scheme:' which is the only known part in an opaque URI. 
 * * /
 *
 **/

// (location=URI|"resolver" resolverClass=QualifiedName) advice=CompoundAdvice? ";"
protected class RepositoryConfiguration_Group extends GroupToken {
	
	public RepositoryConfiguration_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRepositoryConfigurationAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryConfiguration_SemicolonKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRepositoryConfigurationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// location=URI|"resolver" resolverClass=QualifiedName
protected class RepositoryConfiguration_Alternatives_0 extends AlternativesToken {

	public RepositoryConfiguration_Alternatives_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getRepositoryConfigurationAccess().getAlternatives_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryConfiguration_LocationAssignment_0_0(parent, this, 0, inst);
			case 1: return new RepositoryConfiguration_Group_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// location=URI
protected class RepositoryConfiguration_LocationAssignment_0_0 extends AssignmentToken  {
	
	public RepositoryConfiguration_LocationAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRepositoryConfigurationAccess().getLocationAssignment_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("location",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("location");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getRepositoryConfigurationAccess().getLocationURIParserRuleCall_0_0_0();
			return obj;
		}
		return null;
	}

}

// "resolver" resolverClass=QualifiedName
protected class RepositoryConfiguration_Group_0_1 extends GroupToken {
	
	public RepositoryConfiguration_Group_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRepositoryConfigurationAccess().getGroup_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryConfiguration_ResolverClassAssignment_0_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "resolver"
protected class RepositoryConfiguration_ResolverKeyword_0_1_0 extends KeywordToken  {
	
	public RepositoryConfiguration_ResolverKeyword_0_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRepositoryConfigurationAccess().getResolverKeyword_0_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// resolverClass=QualifiedName
protected class RepositoryConfiguration_ResolverClassAssignment_0_1_1 extends AssignmentToken  {
	
	public RepositoryConfiguration_ResolverClassAssignment_0_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRepositoryConfigurationAccess().getResolverClassAssignment_0_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryConfiguration_ResolverKeyword_0_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("resolverClass",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("resolverClass");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getRepositoryConfigurationAccess().getResolverClassQualifiedNameParserRuleCall_0_1_1_0();
			return obj;
		}
		return null;
	}

}



// advice=CompoundAdvice?
protected class RepositoryConfiguration_AdviceAssignment_1 extends AssignmentToken  {
	
	public RepositoryConfiguration_AdviceAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRepositoryConfigurationAccess().getAdviceAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundAdvice_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("advice",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("advice");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompoundAdviceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRepositoryConfigurationAccess().getAdviceCompoundAdviceParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RepositoryConfiguration_Alternatives_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class RepositoryConfiguration_SemicolonKeyword_2 extends KeywordToken  {
	
	public RepositoryConfiguration_SemicolonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRepositoryConfigurationAccess().getSemicolonKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryConfiguration_AdviceAssignment_1(parent, this, 0, inst);
			case 1: return new RepositoryConfiguration_Alternatives_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule RepositoryConfiguration ****************/



/************ begin Rule NamedAdvice ****************
 *
 * NamedAdvice:
 *   name=ID? advice=CompoundAdvice; 
 * 
 * / * ADVICE
 * ** TODO: Had to use '?' instead if '*', and '??' intead of '**' as these operators are intermixed with / which sometimes
 * ** makes them look like comments. (Forbidding // comments is not the wanted sollution). 
 * **
 * * /
 *
 **/

// name=ID? advice=CompoundAdvice
protected class NamedAdvice_Group extends GroupToken {
	
	public NamedAdvice_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getNamedAdviceAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NamedAdvice_AdviceAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getNamedAdviceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=ID?
protected class NamedAdvice_NameAssignment_0 extends AssignmentToken  {
	
	public NamedAdvice_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNamedAdviceAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getNamedAdviceAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// advice=CompoundAdvice
protected class NamedAdvice_AdviceAssignment_1 extends AssignmentToken  {
	
	public NamedAdvice_AdviceAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNamedAdviceAccess().getAdviceAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundAdvice_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("advice",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("advice");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompoundAdviceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getNamedAdviceAccess().getAdviceCompoundAdviceParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NamedAdvice_NameAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}


/************ end Rule NamedAdvice ****************/


/************ begin Rule Advice ****************
 *
 * Advice:
 *   "advice" CompoundAdvice;
 *
 **/

// "advice" CompoundAdvice
protected class Advice_Group extends GroupToken {
	
	public Advice_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAdviceAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Advice_CompoundAdviceParserRuleCall_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAdviceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "advice"
protected class Advice_AdviceKeyword_0 extends KeywordToken  {
	
	public Advice_AdviceKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAdviceAccess().getAdviceKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// CompoundAdvice
protected class Advice_CompoundAdviceParserRuleCall_1 extends RuleCallToken {
	
	public Advice_CompoundAdviceParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAdviceAccess().getCompoundAdviceParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundAdvice_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CompoundAdvice_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCompoundAdviceRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Advice_AdviceKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}


/************ end Rule Advice ****************/


/************ begin Rule CompoundAdvice ****************
 *
 * CompoundAdvice:
 *   "{" (advice+=AdviceStatement ";")* "}";
 *
 **/

// "{" (advice+=AdviceStatement ";")* "}"
protected class CompoundAdvice_Group extends GroupToken {
	
	public CompoundAdvice_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCompoundAdviceAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundAdvice_RightCurlyBracketKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCompoundAdviceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "{"
protected class CompoundAdvice_LeftCurlyBracketKeyword_0 extends KeywordToken  {
	
	public CompoundAdvice_LeftCurlyBracketKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundAdviceAccess().getLeftCurlyBracketKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// (advice+=AdviceStatement ";")*
protected class CompoundAdvice_Group_1 extends GroupToken {
	
	public CompoundAdvice_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCompoundAdviceAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundAdvice_SemicolonKeyword_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// advice+=AdviceStatement
protected class CompoundAdvice_AdviceAssignment_1_0 extends AssignmentToken  {
	
	public CompoundAdvice_AdviceAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundAdviceAccess().getAdviceAssignment_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdviceStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("advice",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("advice");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAdviceStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompoundAdviceAccess().getAdviceAdviceStatementParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompoundAdvice_Group_1(parent, next, actIndex, consumed);
			case 1: return new CompoundAdvice_LeftCurlyBracketKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class CompoundAdvice_SemicolonKeyword_1_1 extends KeywordToken  {
	
	public CompoundAdvice_SemicolonKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundAdviceAccess().getSemicolonKeyword_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundAdvice_AdviceAssignment_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "}"
protected class CompoundAdvice_RightCurlyBracketKeyword_2 extends KeywordToken  {
	
	public CompoundAdvice_RightCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundAdviceAccess().getRightCurlyBracketKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundAdvice_Group_1(parent, this, 0, inst);
			case 1: return new CompoundAdvice_LeftCurlyBracketKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule CompoundAdvice ****************/


/************ begin Rule AdviceStatement ****************
 *
 * AdviceStatement:
 *   path=AdvicePath ("=" value=Expression|advice=CompoundAdvice);
 *
 **/

// path=AdvicePath ("=" value=Expression|advice=CompoundAdvice)
protected class AdviceStatement_Group extends GroupToken {
	
	public AdviceStatement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAdviceStatementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdviceStatement_Alternatives_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAdviceStatementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// path=AdvicePath
protected class AdviceStatement_PathAssignment_0 extends AssignmentToken  {
	
	public AdviceStatement_PathAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdviceStatementAccess().getPathAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePath_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("path",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("path");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAdvicePathRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAdviceStatementAccess().getPathAdvicePathParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// "=" value=Expression|advice=CompoundAdvice
protected class AdviceStatement_Alternatives_1 extends AlternativesToken {

	public AdviceStatement_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getAdviceStatementAccess().getAlternatives_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdviceStatement_Group_1_0(parent, this, 0, inst);
			case 1: return new AdviceStatement_AdviceAssignment_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "=" value=Expression
protected class AdviceStatement_Group_1_0 extends GroupToken {
	
	public AdviceStatement_Group_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAdviceStatementAccess().getGroup_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdviceStatement_ValueAssignment_1_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "="
protected class AdviceStatement_EqualsSignKeyword_1_0_0 extends KeywordToken  {
	
	public AdviceStatement_EqualsSignKeyword_1_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAdviceStatementAccess().getEqualsSignKeyword_1_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdviceStatement_PathAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// value=Expression
protected class AdviceStatement_ValueAssignment_1_0_1 extends AssignmentToken  {
	
	public AdviceStatement_ValueAssignment_1_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdviceStatementAccess().getValueAssignment_1_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_ValueExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAdviceStatementAccess().getValueExpressionParserRuleCall_1_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AdviceStatement_EqualsSignKeyword_1_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// advice=CompoundAdvice
protected class AdviceStatement_AdviceAssignment_1_1 extends AssignmentToken  {
	
	public AdviceStatement_AdviceAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdviceStatementAccess().getAdviceAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundAdvice_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("advice",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("advice");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompoundAdviceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAdviceStatementAccess().getAdviceCompoundAdviceParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AdviceStatement_PathAssignment_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AdviceStatement ****************/


/************ begin Rule AdvicePath ****************
 *
 * AdvicePath:
 *   pathElements+=AdvicePathSeparator? pathElements+=AdvicePathElement (pathElements+=
 *   AdvicePathSeparator pathElement+=AdvicePathElement)*;
 *
 **/

// pathElements+=AdvicePathSeparator? pathElements+=AdvicePathElement (pathElements+=
// AdvicePathSeparator pathElement+=AdvicePathElement)*
protected class AdvicePath_Group extends GroupToken {
	
	public AdvicePath_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAdvicePathAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePath_Group_2(parent, this, 0, inst);
			case 1: return new AdvicePath_PathElementsAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAdvicePathRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// pathElements+=AdvicePathSeparator?
protected class AdvicePath_PathElementsAssignment_0 extends AssignmentToken  {
	
	public AdvicePath_PathElementsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdvicePathAccess().getPathElementsAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePathSeparator_AdvicePathChildrenParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("pathElements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("pathElements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAdvicePathSeparatorRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAdvicePathAccess().getPathElementsAdvicePathSeparatorParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// pathElements+=AdvicePathElement
protected class AdvicePath_PathElementsAssignment_1 extends AssignmentToken  {
	
	public AdvicePath_PathElementsAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdvicePathAccess().getPathElementsAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePathElement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("pathElements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("pathElements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAdvicePathElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAdvicePathAccess().getPathElementsAdvicePathElementParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AdvicePath_PathElementsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// (pathElements+=AdvicePathSeparator pathElement+=AdvicePathElement)*
protected class AdvicePath_Group_2 extends GroupToken {
	
	public AdvicePath_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAdvicePathAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePath_PathElementAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// pathElements+=AdvicePathSeparator
protected class AdvicePath_PathElementsAssignment_2_0 extends AssignmentToken  {
	
	public AdvicePath_PathElementsAssignment_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdvicePathAccess().getPathElementsAssignment_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePathSeparator_AdvicePathChildrenParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("pathElements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("pathElements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAdvicePathSeparatorRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAdvicePathAccess().getPathElementsAdvicePathSeparatorParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AdvicePath_Group_2(parent, next, actIndex, consumed);
			case 1: return new AdvicePath_PathElementsAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// pathElement+=AdvicePathElement
protected class AdvicePath_PathElementAssignment_2_1 extends AssignmentToken  {
	
	public AdvicePath_PathElementAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdvicePathAccess().getPathElementAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePathElement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("pathElement",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("pathElement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAdvicePathElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAdvicePathAccess().getPathElementAdvicePathElementParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AdvicePath_PathElementsAssignment_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AdvicePath ****************/


/************ begin Rule AdvicePathSeparator ****************
 *
 * AdvicePathSeparator returns AdvicePathElement:
 *   AdvicePathChildren;
 *
 **/

// AdvicePathChildren
protected class AdvicePathSeparator_AdvicePathChildrenParserRuleCall extends RuleCallToken {
	
	public AdvicePathSeparator_AdvicePathChildrenParserRuleCall(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAdvicePathSeparatorAccess().getAdvicePathChildrenParserRuleCall();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePathChildren_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAdvicePathSeparatorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AdvicePathChildren_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAdvicePathChildrenRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule AdvicePathSeparator ****************/


/************ begin Rule AdvicePathChildren ****************
 *
 * AdvicePathChildren:
 *   {AdvicePathChildren} "/";
 *
 **/

// {AdvicePathChildren} "/"
protected class AdvicePathChildren_Group extends GroupToken {
	
	public AdvicePathChildren_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAdvicePathChildrenAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePathChildren_SolidusKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAdvicePathChildrenRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {AdvicePathChildren}
protected class AdvicePathChildren_AdvicePathChildrenAction_0 extends ActionToken  {

	public AdvicePathChildren_AdvicePathChildrenAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getAdvicePathChildrenAccess().getAdvicePathChildrenAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getAdvicePathChildrenAccess().getAdvicePathChildrenAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "/"
protected class AdvicePathChildren_SolidusKeyword_1 extends KeywordToken  {
	
	public AdvicePathChildren_SolidusKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAdvicePathChildrenAccess().getSolidusKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePathChildren_AdvicePathChildrenAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule AdvicePathChildren ****************/


/************ begin Rule AdvicePathElement ****************
 *
 * AdvicePathElement:
 *   node=( QualifiedName | WildcardNode | "." ) ("[" predicate=Expression "]")?|node="..";
 *
 **/

// node=( QualifiedName | WildcardNode | "." ) ("[" predicate=Expression "]")?|node=".."
protected class AdvicePathElement_Alternatives extends AlternativesToken {

	public AdvicePathElement_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getAdvicePathElementAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePathElement_Group_0(parent, this, 0, inst);
			case 1: return new AdvicePathElement_NodeAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAdvicePathElementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// node=( QualifiedName | WildcardNode | "." ) ("[" predicate=Expression "]")?
protected class AdvicePathElement_Group_0 extends GroupToken {
	
	public AdvicePathElement_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAdvicePathElementAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePathElement_Group_0_1(parent, this, 0, inst);
			case 1: return new AdvicePathElement_NodeAssignment_0_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// node=( QualifiedName | WildcardNode | "." )
protected class AdvicePathElement_NodeAssignment_0_0 extends AssignmentToken  {
	
	public AdvicePathElement_NodeAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdvicePathElementAccess().getNodeAssignment_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("node",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("node");
		if(".".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAdvicePathElementAccess().getNodeFullStopKeyword_0_0_0_2();
			return obj;
		}
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getAdvicePathElementAccess().getNodeQualifiedNameParserRuleCall_0_0_0_0();
			return obj;
		}
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getAdvicePathElementAccess().getNodeWildcardNodeParserRuleCall_0_0_0_1();
			return obj;
		}
		return null;
	}

}

// ("[" predicate=Expression "]")?
protected class AdvicePathElement_Group_0_1 extends GroupToken {
	
	public AdvicePathElement_Group_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAdvicePathElementAccess().getGroup_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePathElement_RightSquareBracketKeyword_0_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class AdvicePathElement_LeftSquareBracketKeyword_0_1_0 extends KeywordToken  {
	
	public AdvicePathElement_LeftSquareBracketKeyword_0_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAdvicePathElementAccess().getLeftSquareBracketKeyword_0_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePathElement_NodeAssignment_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// predicate=Expression
protected class AdvicePathElement_PredicateAssignment_0_1_1 extends AssignmentToken  {
	
	public AdvicePathElement_PredicateAssignment_0_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdvicePathElementAccess().getPredicateAssignment_0_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_ValueExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("predicate",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("predicate");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAdvicePathElementAccess().getPredicateExpressionParserRuleCall_0_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AdvicePathElement_LeftSquareBracketKeyword_0_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class AdvicePathElement_RightSquareBracketKeyword_0_1_2 extends KeywordToken  {
	
	public AdvicePathElement_RightSquareBracketKeyword_0_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAdvicePathElementAccess().getRightSquareBracketKeyword_0_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdvicePathElement_PredicateAssignment_0_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



// node=".."
protected class AdvicePathElement_NodeAssignment_1 extends AssignmentToken  {
	
	public AdvicePathElement_NodeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdvicePathElementAccess().getNodeAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("node",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("node");
		if("..".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAdvicePathElementAccess().getNodeFullStopFullStopKeyword_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule AdvicePathElement ****************/



/************ begin Rule Filter ****************
 *
 * Filter:
 *   "(" predicate=Expression ")"; 
 * 
 *               
 * 
 * / * ASSERTS * /
 *
 **/

// "(" predicate=Expression ")"
protected class Filter_Group extends GroupToken {
	
	public Filter_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFilterAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Filter_RightParenthesisKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFilterRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "("
protected class Filter_LeftParenthesisKeyword_0 extends KeywordToken  {
	
	public Filter_LeftParenthesisKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFilterAccess().getLeftParenthesisKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// predicate=Expression
protected class Filter_PredicateAssignment_1 extends AssignmentToken  {
	
	public Filter_PredicateAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFilterAccess().getPredicateAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_ValueExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("predicate",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("predicate");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFilterAccess().getPredicateExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Filter_LeftParenthesisKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class Filter_RightParenthesisKeyword_2 extends KeywordToken  {
	
	public Filter_RightParenthesisKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFilterAccess().getRightParenthesisKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Filter_PredicateAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Filter ****************/


/************ begin Rule PreConditionAssert ****************
 *
 * PreConditionAssert:
 *   scope="precondition" "{" asserts+=AssertionExpression* "}"; 
 * 
 * / * ASSERTS * /
 *
 **/

// scope="precondition" "{" asserts+=AssertionExpression* "}"
protected class PreConditionAssert_Group extends GroupToken {
	
	public PreConditionAssert_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPreConditionAssertAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PreConditionAssert_RightCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPreConditionAssertRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// scope="precondition"
protected class PreConditionAssert_ScopeAssignment_0 extends AssignmentToken  {
	
	public PreConditionAssert_ScopeAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPreConditionAssertAccess().getScopeAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("scope",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("scope");
		if("precondition".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getPreConditionAssertAccess().getScopePreconditionKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class PreConditionAssert_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public PreConditionAssert_LeftCurlyBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPreConditionAssertAccess().getLeftCurlyBracketKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PreConditionAssert_ScopeAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// asserts+=AssertionExpression*
protected class PreConditionAssert_AssertsAssignment_2 extends AssignmentToken  {
	
	public PreConditionAssert_AssertsAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPreConditionAssertAccess().getAssertsAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssertionExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("asserts",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("asserts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssertionExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPreConditionAssertAccess().getAssertsAssertionExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PreConditionAssert_AssertsAssignment_2(parent, next, actIndex, consumed);
			case 1: return new PreConditionAssert_LeftCurlyBracketKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class PreConditionAssert_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public PreConditionAssert_RightCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPreConditionAssertAccess().getRightCurlyBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PreConditionAssert_AssertsAssignment_2(parent, this, 0, inst);
			case 1: return new PreConditionAssert_LeftCurlyBracketKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule PreConditionAssert ****************/


/************ begin Rule PostConditionAssert ****************
 *
 * PostConditionAssert:
 *   scope="postcondition" "{" asserts+=AssertionExpression* "}";
 *
 **/

// scope="postcondition" "{" asserts+=AssertionExpression* "}"
protected class PostConditionAssert_Group extends GroupToken {
	
	public PostConditionAssert_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPostConditionAssertAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostConditionAssert_RightCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPostConditionAssertRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// scope="postcondition"
protected class PostConditionAssert_ScopeAssignment_0 extends AssignmentToken  {
	
	public PostConditionAssert_ScopeAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPostConditionAssertAccess().getScopeAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("scope",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("scope");
		if("postcondition".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getPostConditionAssertAccess().getScopePostconditionKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class PostConditionAssert_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public PostConditionAssert_LeftCurlyBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPostConditionAssertAccess().getLeftCurlyBracketKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostConditionAssert_ScopeAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// asserts+=AssertionExpression*
protected class PostConditionAssert_AssertsAssignment_2 extends AssignmentToken  {
	
	public PostConditionAssert_AssertsAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPostConditionAssertAccess().getAssertsAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssertionExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("asserts",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("asserts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssertionExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPostConditionAssertAccess().getAssertsAssertionExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PostConditionAssert_AssertsAssignment_2(parent, next, actIndex, consumed);
			case 1: return new PostConditionAssert_LeftCurlyBracketKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class PostConditionAssert_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public PostConditionAssert_RightCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPostConditionAssertAccess().getRightCurlyBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostConditionAssert_AssertsAssignment_2(parent, this, 0, inst);
			case 1: return new PostConditionAssert_LeftCurlyBracketKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule PostConditionAssert ****************/


/************ begin Rule AssertionExpression ****************
 *
 * AssertionExpression:
 *   "assert" expr=Expression ("," message=STRING)? ";"; 
 * 
 *              
 * 
 * 
 * / * STATEMENTS * /
 *
 **/

// "assert" expr=Expression ("," message=STRING)? ";"
protected class AssertionExpression_Group extends GroupToken {
	
	public AssertionExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAssertionExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssertionExpression_SemicolonKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAssertionExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "assert"
protected class AssertionExpression_AssertKeyword_0 extends KeywordToken  {
	
	public AssertionExpression_AssertKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAssertionExpressionAccess().getAssertKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// expr=Expression
protected class AssertionExpression_ExprAssignment_1 extends AssignmentToken  {
	
	public AssertionExpression_ExprAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssertionExpressionAccess().getExprAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_ValueExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAssertionExpressionAccess().getExprExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AssertionExpression_AssertKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," message=STRING)?
protected class AssertionExpression_Group_2 extends GroupToken {
	
	public AssertionExpression_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAssertionExpressionAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssertionExpression_MessageAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class AssertionExpression_CommaKeyword_2_0 extends KeywordToken  {
	
	public AssertionExpression_CommaKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAssertionExpressionAccess().getCommaKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssertionExpression_ExprAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// message=STRING
protected class AssertionExpression_MessageAssignment_2_1 extends AssignmentToken  {
	
	public AssertionExpression_MessageAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssertionExpressionAccess().getMessageAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssertionExpression_CommaKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("message",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("message");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAssertionExpressionAccess().getMessageSTRINGTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}


// ";"
protected class AssertionExpression_SemicolonKeyword_3 extends KeywordToken  {
	
	public AssertionExpression_SemicolonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAssertionExpressionAccess().getSemicolonKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssertionExpression_Group_2(parent, this, 0, inst);
			case 1: return new AssertionExpression_ExprAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule AssertionExpression ****************/


/************ begin Rule Statement ****************
 *
 * Statement:
 *   SwitchStatement|WhileStatement|ForStatement|CompoundStatement|VarExpression ";"|
 *   BreakStatement|ContinueStatement|ReturnStatement; 
 * 
 * / * STATEMENTS * /
 *
 **/

// SwitchStatement|WhileStatement|ForStatement|CompoundStatement|VarExpression ";"|
// BreakStatement|ContinueStatement|ReturnStatement 
// 
// / * STATEMENTS * /
protected class Statement_Alternatives extends AlternativesToken {

	public Statement_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getStatementAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_SwitchStatementParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Statement_WhileStatementParserRuleCall_1(parent, this, 1, inst);
			case 2: return new Statement_ForStatementParserRuleCall_2(parent, this, 2, inst);
			case 3: return new Statement_CompoundStatementParserRuleCall_3(parent, this, 3, inst);
			case 4: return new Statement_Group_4(parent, this, 4, inst);
			case 5: return new Statement_BreakStatementParserRuleCall_5(parent, this, 5, inst);
			case 6: return new Statement_ContinueStatementParserRuleCall_6(parent, this, 6, inst);
			case 7: return new Statement_ReturnStatementParserRuleCall_7(parent, this, 7, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// SwitchStatement
protected class Statement_SwitchStatementParserRuleCall_0 extends RuleCallToken {
	
	public Statement_SwitchStatementParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getSwitchStatementParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SwitchStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(SwitchStatement_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSwitchStatementRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// WhileStatement
protected class Statement_WhileStatementParserRuleCall_1 extends RuleCallToken {
	
	public Statement_WhileStatementParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WhileStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(WhileStatement_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getWhileStatementRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ForStatement
protected class Statement_ForStatementParserRuleCall_2 extends RuleCallToken {
	
	public Statement_ForStatementParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getForStatementParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ForStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ForStatement_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getForStatementRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// CompoundStatement
protected class Statement_CompoundStatementParserRuleCall_3 extends RuleCallToken {
	
	public Statement_CompoundStatementParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getCompoundStatementParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CompoundStatement_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCompoundStatementRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// VarExpression ";"
protected class Statement_Group_4 extends GroupToken {
	
	public Statement_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStatementAccess().getGroup_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_SemicolonKeyword_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// VarExpression
protected class Statement_VarExpressionParserRuleCall_4_0 extends RuleCallToken {
	
	public Statement_VarExpressionParserRuleCall_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getVarExpressionParserRuleCall_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(VarExpression_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getVarExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class Statement_SemicolonKeyword_4_1 extends KeywordToken  {
	
	public Statement_SemicolonKeyword_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStatementAccess().getSemicolonKeyword_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_VarExpressionParserRuleCall_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// BreakStatement
protected class Statement_BreakStatementParserRuleCall_5 extends RuleCallToken {
	
	public Statement_BreakStatementParserRuleCall_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getBreakStatementParserRuleCall_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BreakStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(BreakStatement_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBreakStatementRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ContinueStatement
protected class Statement_ContinueStatementParserRuleCall_6 extends RuleCallToken {
	
	public Statement_ContinueStatementParserRuleCall_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getContinueStatementParserRuleCall_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContinueStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ContinueStatement_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getContinueStatementRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ReturnStatement
protected class Statement_ReturnStatementParserRuleCall_7 extends RuleCallToken {
	
	public Statement_ReturnStatementParserRuleCall_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ReturnStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ReturnStatement_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getReturnStatementRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Statement ****************/


/************ begin Rule BreakStatement ****************
 *
 * BreakStatement:
 *   {BreakStatement} "break" ";";
 *
 **/

// {BreakStatement} "break" ";"
protected class BreakStatement_Group extends GroupToken {
	
	public BreakStatement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBreakStatementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BreakStatement_SemicolonKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBreakStatementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {BreakStatement}
protected class BreakStatement_BreakStatementAction_0 extends ActionToken  {

	public BreakStatement_BreakStatementAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getBreakStatementAccess().getBreakStatementAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getBreakStatementAccess().getBreakStatementAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "break"
protected class BreakStatement_BreakKeyword_1 extends KeywordToken  {
	
	public BreakStatement_BreakKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBreakStatementAccess().getBreakKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BreakStatement_BreakStatementAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ";"
protected class BreakStatement_SemicolonKeyword_2 extends KeywordToken  {
	
	public BreakStatement_SemicolonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBreakStatementAccess().getSemicolonKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BreakStatement_BreakKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule BreakStatement ****************/


/************ begin Rule ContinueStatement ****************
 *
 * ContinueStatement:
 *   {ContinueStatement} "continue" ";";
 *
 **/

// {ContinueStatement} "continue" ";"
protected class ContinueStatement_Group extends GroupToken {
	
	public ContinueStatement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getContinueStatementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContinueStatement_SemicolonKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getContinueStatementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {ContinueStatement}
protected class ContinueStatement_ContinueStatementAction_0 extends ActionToken  {

	public ContinueStatement_ContinueStatementAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getContinueStatementAccess().getContinueStatementAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getContinueStatementAccess().getContinueStatementAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "continue"
protected class ContinueStatement_ContinueKeyword_1 extends KeywordToken  {
	
	public ContinueStatement_ContinueKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContinueStatementAccess().getContinueKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContinueStatement_ContinueStatementAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ";"
protected class ContinueStatement_SemicolonKeyword_2 extends KeywordToken  {
	
	public ContinueStatement_SemicolonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContinueStatementAccess().getSemicolonKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContinueStatement_ContinueKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ContinueStatement ****************/


/************ begin Rule CompoundStatement ****************
 *
 * CompoundStatement:
 *   "{" statements=Statements "}";
 *
 **/

// "{" statements=Statements "}"
protected class CompoundStatement_Group extends GroupToken {
	
	public CompoundStatement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCompoundStatementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundStatement_RightCurlyBracketKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCompoundStatementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "{"
protected class CompoundStatement_LeftCurlyBracketKeyword_0 extends KeywordToken  {
	
	public CompoundStatement_LeftCurlyBracketKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundStatementAccess().getLeftCurlyBracketKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// statements=Statements
protected class CompoundStatement_StatementsAssignment_1 extends AssignmentToken  {
	
	public CompoundStatement_StatementsAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundStatementAccess().getStatementsAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statements_StatementsAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementsRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompoundStatementAccess().getStatementsStatementsParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompoundStatement_LeftCurlyBracketKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class CompoundStatement_RightCurlyBracketKeyword_2 extends KeywordToken  {
	
	public CompoundStatement_RightCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundStatementAccess().getRightCurlyBracketKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundStatement_StatementsAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule CompoundStatement ****************/


/************ begin Rule Statements ****************
 *
 * Statements:
 *   statements+=Statement*;
 *
 **/

// statements+=Statement*
protected class Statements_StatementsAssignment extends AssignmentToken  {
	
	public Statements_StatementsAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStatementsAccess().getStatementsAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getStatementsRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getStatementsAccess().getStatementsStatementParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Statements_StatementsAssignment(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

/************ end Rule Statements ****************/


/************ begin Rule WhileStatement ****************
 *
 * WhileStatement:
 *   "while" "(" condition=VarExpression ")" body=Statement;
 *
 **/

// "while" "(" condition=VarExpression ")" body=Statement
protected class WhileStatement_Group extends GroupToken {
	
	public WhileStatement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getWhileStatementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WhileStatement_BodyAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getWhileStatementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "while"
protected class WhileStatement_WhileKeyword_0 extends KeywordToken  {
	
	public WhileStatement_WhileKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWhileStatementAccess().getWhileKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "("
protected class WhileStatement_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public WhileStatement_LeftParenthesisKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WhileStatement_WhileKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// condition=VarExpression
protected class WhileStatement_ConditionAssignment_2 extends AssignmentToken  {
	
	public WhileStatement_ConditionAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getWhileStatementAccess().getConditionAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("condition",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("condition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVarExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWhileStatementAccess().getConditionVarExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WhileStatement_LeftParenthesisKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class WhileStatement_RightParenthesisKeyword_3 extends KeywordToken  {
	
	public WhileStatement_RightParenthesisKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WhileStatement_ConditionAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// body=Statement
protected class WhileStatement_BodyAssignment_4 extends AssignmentToken  {
	
	public WhileStatement_BodyAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getWhileStatementAccess().getBodyAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("body",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWhileStatementAccess().getBodyStatementParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WhileStatement_RightParenthesisKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule WhileStatement ****************/


/************ begin Rule SwitchStatement ****************
 *
 * SwitchStatement:
 *   "switch" "(" switchExpr=VarExpression ")" "{" case+=Case* ("default" ":" statements=
 *   Statements)? "}";
 *
 **/

// "switch" "(" switchExpr=VarExpression ")" "{" case+=Case* ("default" ":" statements=
// Statements)? "}"
protected class SwitchStatement_Group extends GroupToken {
	
	public SwitchStatement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSwitchStatementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SwitchStatement_RightCurlyBracketKeyword_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSwitchStatementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "switch"
protected class SwitchStatement_SwitchKeyword_0 extends KeywordToken  {
	
	public SwitchStatement_SwitchKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "("
protected class SwitchStatement_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public SwitchStatement_LeftParenthesisKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SwitchStatement_SwitchKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// switchExpr=VarExpression
protected class SwitchStatement_SwitchExprAssignment_2 extends AssignmentToken  {
	
	public SwitchStatement_SwitchExprAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSwitchStatementAccess().getSwitchExprAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("switchExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("switchExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVarExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSwitchStatementAccess().getSwitchExprVarExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SwitchStatement_LeftParenthesisKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class SwitchStatement_RightParenthesisKeyword_3 extends KeywordToken  {
	
	public SwitchStatement_RightParenthesisKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SwitchStatement_SwitchExprAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class SwitchStatement_LeftCurlyBracketKeyword_4 extends KeywordToken  {
	
	public SwitchStatement_LeftCurlyBracketKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SwitchStatement_RightParenthesisKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// case+=Case*
protected class SwitchStatement_CaseAssignment_5 extends AssignmentToken  {
	
	public SwitchStatement_CaseAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSwitchStatementAccess().getCaseAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Case_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("case",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("case");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCaseRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSwitchStatementAccess().getCaseCaseParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SwitchStatement_CaseAssignment_5(parent, next, actIndex, consumed);
			case 1: return new SwitchStatement_LeftCurlyBracketKeyword_4(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("default" ":" statements=Statements)?
protected class SwitchStatement_Group_6 extends GroupToken {
	
	public SwitchStatement_Group_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSwitchStatementAccess().getGroup_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SwitchStatement_StatementsAssignment_6_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "default"
protected class SwitchStatement_DefaultKeyword_6_0 extends KeywordToken  {
	
	public SwitchStatement_DefaultKeyword_6_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSwitchStatementAccess().getDefaultKeyword_6_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SwitchStatement_CaseAssignment_5(parent, this, 0, inst);
			case 1: return new SwitchStatement_LeftCurlyBracketKeyword_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ":"
protected class SwitchStatement_ColonKeyword_6_1 extends KeywordToken  {
	
	public SwitchStatement_ColonKeyword_6_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSwitchStatementAccess().getColonKeyword_6_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SwitchStatement_DefaultKeyword_6_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// statements=Statements
protected class SwitchStatement_StatementsAssignment_6_2 extends AssignmentToken  {
	
	public SwitchStatement_StatementsAssignment_6_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSwitchStatementAccess().getStatementsAssignment_6_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statements_StatementsAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementsRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSwitchStatementAccess().getStatementsStatementsParserRuleCall_6_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SwitchStatement_ColonKeyword_6_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class SwitchStatement_RightCurlyBracketKeyword_7 extends KeywordToken  {
	
	public SwitchStatement_RightCurlyBracketKeyword_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SwitchStatement_Group_6(parent, this, 0, inst);
			case 1: return new SwitchStatement_CaseAssignment_5(parent, this, 1, inst);
			case 2: return new SwitchStatement_LeftCurlyBracketKeyword_4(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule SwitchStatement ****************/


/************ begin Rule Case ****************
 *
 * Case:
 *   "case" condition=ValueLiteral ":" statements+=Statement;
 *
 **/

// "case" condition=ValueLiteral ":" statements+=Statement
protected class Case_Group extends GroupToken {
	
	public Case_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCaseAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Case_StatementsAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCaseRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "case"
protected class Case_CaseKeyword_0 extends KeywordToken  {
	
	public Case_CaseKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCaseAccess().getCaseKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// condition=ValueLiteral
protected class Case_ConditionAssignment_1 extends AssignmentToken  {
	
	public Case_ConditionAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCaseAccess().getConditionAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ValueLiteral_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("condition",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("condition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getValueLiteralRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCaseAccess().getConditionValueLiteralParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Case_CaseKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ":"
protected class Case_ColonKeyword_2 extends KeywordToken  {
	
	public Case_ColonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCaseAccess().getColonKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Case_ConditionAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// statements+=Statement
protected class Case_StatementsAssignment_3 extends AssignmentToken  {
	
	public Case_StatementsAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCaseAccess().getStatementsAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCaseAccess().getStatementsStatementParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Case_ColonKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Case ****************/


/************ begin Rule ForStatement ****************
 *
 * ForStatement:
 *   {ForStatement} "for" "(" init=VarExpressionList? ";" cond=Expression? ";" iterate=
 *   ExpressionList? ")" body=Statement;
 *
 **/

// {ForStatement} "for" "(" init=VarExpressionList? ";" cond=Expression? ";" iterate=
// ExpressionList? ")" body=Statement
protected class ForStatement_Group extends GroupToken {
	
	public ForStatement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getForStatementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ForStatement_BodyAssignment_9(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getForStatementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {ForStatement}
protected class ForStatement_ForStatementAction_0 extends ActionToken  {

	public ForStatement_ForStatementAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getForStatementAccess().getForStatementAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getForStatementAccess().getForStatementAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "for"
protected class ForStatement_ForKeyword_1 extends KeywordToken  {
	
	public ForStatement_ForKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getForStatementAccess().getForKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ForStatement_ForStatementAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class ForStatement_LeftParenthesisKeyword_2 extends KeywordToken  {
	
	public ForStatement_LeftParenthesisKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ForStatement_ForKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// init=VarExpressionList?
protected class ForStatement_InitAssignment_3 extends AssignmentToken  {
	
	public ForStatement_InitAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getForStatementAccess().getInitAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarExpressionList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("init",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("init");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVarExpressionListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getForStatementAccess().getInitVarExpressionListParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ForStatement_LeftParenthesisKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class ForStatement_SemicolonKeyword_4 extends KeywordToken  {
	
	public ForStatement_SemicolonKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getForStatementAccess().getSemicolonKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ForStatement_InitAssignment_3(parent, this, 0, inst);
			case 1: return new ForStatement_LeftParenthesisKeyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// cond=Expression?
protected class ForStatement_CondAssignment_5 extends AssignmentToken  {
	
	public ForStatement_CondAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getForStatementAccess().getCondAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_ValueExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("cond",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("cond");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getForStatementAccess().getCondExpressionParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ForStatement_SemicolonKeyword_4(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class ForStatement_SemicolonKeyword_6 extends KeywordToken  {
	
	public ForStatement_SemicolonKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getForStatementAccess().getSemicolonKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ForStatement_CondAssignment_5(parent, this, 0, inst);
			case 1: return new ForStatement_SemicolonKeyword_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// iterate=ExpressionList?
protected class ForStatement_IterateAssignment_7 extends AssignmentToken  {
	
	public ForStatement_IterateAssignment_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getForStatementAccess().getIterateAssignment_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExpressionList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("iterate",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("iterate");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getForStatementAccess().getIterateExpressionListParserRuleCall_7_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ForStatement_SemicolonKeyword_6(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class ForStatement_RightParenthesisKeyword_8 extends KeywordToken  {
	
	public ForStatement_RightParenthesisKeyword_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getForStatementAccess().getRightParenthesisKeyword_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ForStatement_IterateAssignment_7(parent, this, 0, inst);
			case 1: return new ForStatement_SemicolonKeyword_6(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// body=Statement
protected class ForStatement_BodyAssignment_9 extends AssignmentToken  {
	
	public ForStatement_BodyAssignment_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getForStatementAccess().getBodyAssignment_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("body",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getForStatementAccess().getBodyStatementParserRuleCall_9_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ForStatement_RightParenthesisKeyword_8(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ForStatement ****************/


/************ begin Rule ReturnStatement ****************
 *
 * ReturnStatement:
 *   "return" return=Expression ";"; 
 * 	
 *  
 * 	      
 * 	
 * 	
 * / * EXPRESSIONS * /
 *
 **/

// "return" return=Expression ";"
protected class ReturnStatement_Group extends GroupToken {
	
	public ReturnStatement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getReturnStatementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ReturnStatement_SemicolonKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getReturnStatementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "return"
protected class ReturnStatement_ReturnKeyword_0 extends KeywordToken  {
	
	public ReturnStatement_ReturnKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getReturnStatementAccess().getReturnKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// return=Expression
protected class ReturnStatement_ReturnAssignment_1 extends AssignmentToken  {
	
	public ReturnStatement_ReturnAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getReturnStatementAccess().getReturnAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_ValueExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("return",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("return");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getReturnStatementAccess().getReturnExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ReturnStatement_ReturnKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class ReturnStatement_SemicolonKeyword_2 extends KeywordToken  {
	
	public ReturnStatement_SemicolonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getReturnStatementAccess().getSemicolonKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ReturnStatement_ReturnAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ReturnStatement ****************/


/************ begin Rule SyntaxElement ****************
 *
 * SyntaxElement:
 *   Expression; 
 * 	
 * / * EXPRESSIONS * /
 *
 **/

// Expression
protected class SyntaxElement_ExpressionParserRuleCall extends RuleCallToken {
	
	public SyntaxElement_ExpressionParserRuleCall(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getSyntaxElementAccess().getExpressionParserRuleCall();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_ValueExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSyntaxElementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Expression_ValueExpressionParserRuleCall.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule SyntaxElement ****************/


/************ begin Rule VarExpressionList ****************
 *
 * VarExpressionList:
 *   expr+=VarExpression ("," expr+=VarExpression)*;
 *
 **/

// expr+=VarExpression ("," expr+=VarExpression)*
protected class VarExpressionList_Group extends GroupToken {
	
	public VarExpressionList_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getVarExpressionListAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarExpressionList_Group_1(parent, this, 0, inst);
			case 1: return new VarExpressionList_ExprAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getVarExpressionListRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// expr+=VarExpression
protected class VarExpressionList_ExprAssignment_0 extends AssignmentToken  {
	
	public VarExpressionList_ExprAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVarExpressionListAccess().getExprAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVarExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getVarExpressionListAccess().getExprVarExpressionParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// ("," expr+=VarExpression)*
protected class VarExpressionList_Group_1 extends GroupToken {
	
	public VarExpressionList_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getVarExpressionListAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarExpressionList_ExprAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class VarExpressionList_CommaKeyword_1_0 extends KeywordToken  {
	
	public VarExpressionList_CommaKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getVarExpressionListAccess().getCommaKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarExpressionList_Group_1(parent, this, 0, inst);
			case 1: return new VarExpressionList_ExprAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// expr+=VarExpression
protected class VarExpressionList_ExprAssignment_1_1 extends AssignmentToken  {
	
	public VarExpressionList_ExprAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVarExpressionListAccess().getExprAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVarExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getVarExpressionListAccess().getExprVarExpressionParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new VarExpressionList_CommaKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule VarExpressionList ****************/


/************ begin Rule ExpressionList ****************
 *
 * ExpressionList returns Expression:
 *   expr+=Expression ("," expr+=Expression)*;
 *
 **/

// expr+=Expression ("," expr+=Expression)*
protected class ExpressionList_Group extends GroupToken {
	
	public ExpressionList_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getExpressionListAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExpressionList_Group_1(parent, this, 0, inst);
			case 1: return new ExpressionList_ExprAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getExpressionListRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// expr+=Expression
protected class ExpressionList_ExprAssignment_0 extends AssignmentToken  {
	
	public ExpressionList_ExprAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getExpressionListAccess().getExprAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_ValueExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getExpressionListAccess().getExprExpressionParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// ("," expr+=Expression)*
protected class ExpressionList_Group_1 extends GroupToken {
	
	public ExpressionList_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getExpressionListAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExpressionList_ExprAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class ExpressionList_CommaKeyword_1_0 extends KeywordToken  {
	
	public ExpressionList_CommaKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getExpressionListAccess().getCommaKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExpressionList_Group_1(parent, this, 0, inst);
			case 1: return new ExpressionList_ExprAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// expr+=Expression
protected class ExpressionList_ExprAssignment_1_1 extends AssignmentToken  {
	
	public ExpressionList_ExprAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getExpressionListAccess().getExprAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_ValueExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getExpressionListAccess().getExprExpressionParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExpressionList_CommaKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ExpressionList ****************/


/************ begin Rule VarExpression ****************
 *
 * VarExpression:
 *   Expression|"var" name=ID "=" value=Expression;
 *
 **/

// Expression|"var" name=ID "=" value=Expression
protected class VarExpression_Alternatives extends AlternativesToken {

	public VarExpression_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getVarExpressionAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarExpression_ExpressionParserRuleCall_0(parent, this, 0, inst);
			case 1: return new VarExpression_Group_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getVarExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Expression
protected class VarExpression_ExpressionParserRuleCall_0 extends RuleCallToken {
	
	public VarExpression_ExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getVarExpressionAccess().getExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_ValueExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Expression_ValueExpressionParserRuleCall.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// "var" name=ID "=" value=Expression
protected class VarExpression_Group_1 extends GroupToken {
	
	public VarExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getVarExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarExpression_ValueAssignment_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "var"
protected class VarExpression_VarKeyword_1_0 extends KeywordToken  {
	
	public VarExpression_VarKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getVarExpressionAccess().getVarKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class VarExpression_NameAssignment_1_1 extends AssignmentToken  {
	
	public VarExpression_NameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVarExpressionAccess().getNameAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarExpression_VarKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getVarExpressionAccess().getNameIDTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// "="
protected class VarExpression_EqualsSignKeyword_1_2 extends KeywordToken  {
	
	public VarExpression_EqualsSignKeyword_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getVarExpressionAccess().getEqualsSignKeyword_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarExpression_NameAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// value=Expression
protected class VarExpression_ValueAssignment_1_3 extends AssignmentToken  {
	
	public VarExpression_ValueAssignment_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVarExpressionAccess().getValueAssignment_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_ValueExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getVarExpressionAccess().getValueExpressionParserRuleCall_1_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new VarExpression_EqualsSignKeyword_1_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule VarExpression ****************/


/************ begin Rule Expression ****************
 *
 * Expression:
 *   ValueExpression;
 *
 **/

// ValueExpression
protected class Expression_ValueExpressionParserRuleCall extends RuleCallToken {
	
	public Expression_ValueExpressionParserRuleCall(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionAccess().getValueExpressionParserRuleCall();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ValueExpression_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ValueExpression_ValueAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getValueExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule Expression ****************/


/************ begin Rule ValueExpression ****************
 *
 * ValueExpression:
 *   value=AssignmentExpression; 
 * 
 *  
 * 	  
 * 	
 * 
 * //TODO: This is left associative, should be right...
 *
 **/

// value=AssignmentExpression
protected class ValueExpression_ValueAssignment extends AssignmentToken  {
	
	public ValueExpression_ValueAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getValueExpressionAccess().getValueAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignmentExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getValueExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssignmentExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getValueExpressionAccess().getValueAssignmentExpressionParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule ValueExpression ****************/


/************ begin Rule AssignmentExpression ****************
 *
 * AssignmentExpression returns Expression:
 *   ChainExpression ({AssignmentOperation.left+=current} op=( "=" | "+=" | "-=" | "*=" | "/=" |
 *   "%=" ) right+=ChainExpression)*; 
 * 
 * //TODO: This is left associative, should be right...
 *
 **/

// ChainExpression ({AssignmentOperation.left+=current} op=( "=" | "+=" | "-=" | "*=" | "/=" |
// "%=" ) right+=ChainExpression)*
protected class AssignmentExpression_Group extends GroupToken {
	
	public AssignmentExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAssignmentExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignmentExpression_Group_1(parent, this, 0, inst);
			case 1: return new AssignmentExpression_ChainExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAssignmentExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ChainExpression
protected class AssignmentExpression_ChainExpressionParserRuleCall_0 extends RuleCallToken {
	
	public AssignmentExpression_ChainExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAssignmentExpressionAccess().getChainExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ChainExpression_ChainedExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ChainExpression_ChainedExpressionParserRuleCall.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getChainExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({AssignmentOperation.left+=current} op=( "=" | "+=" | "-=" | "*=" | "/=" | "%=" ) right+=
// ChainExpression)*
protected class AssignmentExpression_Group_1 extends GroupToken {
	
	public AssignmentExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAssignmentExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignmentExpression_RightAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {AssignmentOperation.left+=current}
protected class AssignmentExpression_AssignmentOperationLeftAction_1_0 extends ActionToken  {

	public AssignmentExpression_AssignmentOperationLeftAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getAssignmentExpressionAccess().getAssignmentOperationLeftAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignmentExpression_Group_1(parent, this, 0, inst);
			case 1: return new AssignmentExpression_ChainExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getAssignmentExpressionAccess().getAssignmentOperationLeftAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("left", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("left")) return null;
		return getDescr((EObject) val);
	}
}

// op=( "=" | "+=" | "-=" | "*=" | "/=" | "%=" )
protected class AssignmentExpression_OpAssignment_1_1 extends AssignmentToken  {
	
	public AssignmentExpression_OpAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssignmentExpressionAccess().getOpAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignmentExpression_AssignmentOperationLeftAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("op",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("op");
		if("=".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAssignmentExpressionAccess().getOpEqualsSignKeyword_1_1_0_0();
			return obj;
		}
		if("+=".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAssignmentExpressionAccess().getOpPlusSignEqualsSignKeyword_1_1_0_1();
			return obj;
		}
		if("-=".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAssignmentExpressionAccess().getOpHyphenMinusEqualsSignKeyword_1_1_0_2();
			return obj;
		}
		if("*=".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAssignmentExpressionAccess().getOpAsteriskEqualsSignKeyword_1_1_0_3();
			return obj;
		}
		if("/=".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAssignmentExpressionAccess().getOpSolidusEqualsSignKeyword_1_1_0_4();
			return obj;
		}
		if("%=".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAssignmentExpressionAccess().getOpPercentSignEqualsSignKeyword_1_1_0_5();
			return obj;
		}
		return null;
	}

}

// right+=ChainExpression
protected class AssignmentExpression_RightAssignment_1_2 extends AssignmentToken  {
	
	public AssignmentExpression_RightAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssignmentExpressionAccess().getRightAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ChainExpression_ChainedExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("right",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getChainExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAssignmentExpressionAccess().getRightChainExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AssignmentExpression_OpAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AssignmentExpression ****************/


/************ begin Rule ChainExpression ****************
 *
 * ChainExpression returns Expression:
 *   ChainedExpression; 
 * 
 * 
 *     
 * 	  //({ChainExpression.first=current} ',' next=ChainedExpression)*
 *
 **/

// ChainedExpression 
// 	  //({ChainExpression.first=current} ',' next=ChainedExpression)*
protected class ChainExpression_ChainedExpressionParserRuleCall extends RuleCallToken {
	
	public ChainExpression_ChainedExpressionParserRuleCall(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getChainExpressionAccess().getChainedExpressionParserRuleCall();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ChainedExpression_IfExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getChainExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ChainedExpression_IfExpressionParserRuleCall.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getChainedExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule ChainExpression ****************/


/************ begin Rule ChainedExpression ****************
 *
 * ChainedExpression returns Expression:
 *   IfExpression;
 *
 **/

// IfExpression
protected class ChainedExpression_IfExpressionParserRuleCall extends RuleCallToken {
	
	public ChainedExpression_IfExpressionParserRuleCall(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getChainedExpressionAccess().getIfExpressionParserRuleCall();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getChainedExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(IfExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getIfExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule ChainedExpression ****************/


/************ begin Rule IfExpression ****************
 *
 * IfExpression returns Expression:
 *   OrExpression ({IfExpression.condition=current} "?" thenPart=ChainedExpression ":"
 *   elsePart=ChainedExpression)?;
 *
 **/

// OrExpression ({IfExpression.condition=current} "?" thenPart=ChainedExpression ":"
// elsePart=ChainedExpression)?
protected class IfExpression_Group extends GroupToken {
	
	public IfExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfExpression_Group_1(parent, this, 0, inst);
			case 1: return new IfExpression_OrExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getIfExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// OrExpression
protected class IfExpression_OrExpressionParserRuleCall_0 extends RuleCallToken {
	
	public IfExpression_OrExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getOrExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(OrExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getOrExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({IfExpression.condition=current} "?" thenPart=ChainedExpression ":" elsePart=
// ChainedExpression)?
protected class IfExpression_Group_1 extends GroupToken {
	
	public IfExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfExpression_ElsePartAssignment_1_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {IfExpression.condition=current}
protected class IfExpression_IfExpressionConditionAction_1_0 extends ActionToken  {

	public IfExpression_IfExpressionConditionAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getIfExpressionConditionAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfExpression_OrExpressionParserRuleCall_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getIfExpressionAccess().getIfExpressionConditionAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("condition", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("condition")) return null;
		return getDescr((EObject) val);
	}
}

// "?"
protected class IfExpression_QuestionMarkKeyword_1_1 extends KeywordToken  {
	
	public IfExpression_QuestionMarkKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getQuestionMarkKeyword_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfExpression_IfExpressionConditionAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// thenPart=ChainedExpression
protected class IfExpression_ThenPartAssignment_1_2 extends AssignmentToken  {
	
	public IfExpression_ThenPartAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getThenPartAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ChainedExpression_IfExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("thenPart",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("thenPart");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getChainedExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getIfExpressionAccess().getThenPartChainedExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfExpression_QuestionMarkKeyword_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ":"
protected class IfExpression_ColonKeyword_1_3 extends KeywordToken  {
	
	public IfExpression_ColonKeyword_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getColonKeyword_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfExpression_ThenPartAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// elsePart=ChainedExpression
protected class IfExpression_ElsePartAssignment_1_4 extends AssignmentToken  {
	
	public IfExpression_ElsePartAssignment_1_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getElsePartAssignment_1_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ChainedExpression_IfExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elsePart",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elsePart");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getChainedExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getIfExpressionAccess().getElsePartChainedExpressionParserRuleCall_1_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfExpression_ColonKeyword_1_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule IfExpression ****************/


/************ begin Rule OrExpression ****************
 *
 * OrExpression returns Expression:
 *   AndExpression ({BooleanOperation.left=current} operator="||" right=AndExpression)*;
 *
 **/

// AndExpression ({BooleanOperation.left=current} operator="||" right=AndExpression)*
protected class OrExpression_Group extends GroupToken {
	
	public OrExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrExpression_Group_1(parent, this, 0, inst);
			case 1: return new OrExpression_AndExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getOrExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// AndExpression
protected class OrExpression_AndExpressionParserRuleCall_0 extends RuleCallToken {
	
	public OrExpression_AndExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AndExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAndExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({BooleanOperation.left=current} operator="||" right=AndExpression)*
protected class OrExpression_Group_1 extends GroupToken {
	
	public OrExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrExpression_RightAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {BooleanOperation.left=current}
protected class OrExpression_BooleanOperationLeftAction_1_0 extends ActionToken  {

	public OrExpression_BooleanOperationLeftAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getBooleanOperationLeftAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrExpression_Group_1(parent, this, 0, inst);
			case 1: return new OrExpression_AndExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getOrExpressionAccess().getBooleanOperationLeftAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("left", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("left")) return null;
		return getDescr((EObject) val);
	}
}

// operator="||"
protected class OrExpression_OperatorAssignment_1_1 extends AssignmentToken  {
	
	public OrExpression_OperatorAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrExpression_BooleanOperationLeftAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("operator",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("operator");
		if("||".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getOrExpressionAccess().getOperatorVerticalLineVerticalLineKeyword_1_1_0();
			return obj;
		}
		return null;
	}

}

// right=AndExpression
protected class OrExpression_RightAssignment_1_2 extends AssignmentToken  {
	
	public OrExpression_RightAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getRightAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("right",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAndExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OrExpression_OperatorAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule OrExpression ****************/


/************ begin Rule AndExpression ****************
 *
 * AndExpression returns Expression:
 *   RelationalExpression ({BooleanOperation.left=current} operator="&&" right=
 *   RelationalExpression)*;
 *
 **/

// RelationalExpression ({BooleanOperation.left=current} operator="&&" right=
// RelationalExpression)*
protected class AndExpression_Group extends GroupToken {
	
	public AndExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_Group_1(parent, this, 0, inst);
			case 1: return new AndExpression_RelationalExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAndExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// RelationalExpression
protected class AndExpression_RelationalExpressionParserRuleCall_0 extends RuleCallToken {
	
	public AndExpression_RelationalExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getRelationalExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationalExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RelationalExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRelationalExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({BooleanOperation.left=current} operator="&&" right=RelationalExpression)*
protected class AndExpression_Group_1 extends GroupToken {
	
	public AndExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_RightAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {BooleanOperation.left=current}
protected class AndExpression_BooleanOperationLeftAction_1_0 extends ActionToken  {

	public AndExpression_BooleanOperationLeftAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getBooleanOperationLeftAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_Group_1(parent, this, 0, inst);
			case 1: return new AndExpression_RelationalExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getAndExpressionAccess().getBooleanOperationLeftAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("left", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("left")) return null;
		return getDescr((EObject) val);
	}
}

// operator="&&"
protected class AndExpression_OperatorAssignment_1_1 extends AssignmentToken  {
	
	public AndExpression_OperatorAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_BooleanOperationLeftAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("operator",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("operator");
		if("&&".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAndExpressionAccess().getOperatorAmpersandAmpersandKeyword_1_1_0();
			return obj;
		}
		return null;
	}

}

// right=RelationalExpression
protected class AndExpression_RightAssignment_1_2 extends AssignmentToken  {
	
	public AndExpression_RightAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getRightAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationalExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("right",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRelationalExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAndExpressionAccess().getRightRelationalExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AndExpression_OperatorAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AndExpression ****************/


/************ begin Rule RelationalExpression ****************
 *
 * RelationalExpression returns Expression:
 *   AdditiveExpression ({BooleanOperation.left=current} operator=( "~=" | "==" | "!=" | ">=" |
 *   "<=" | ">" | "<" ) right=AdditiveExpression)*;
 *
 **/

// AdditiveExpression ({BooleanOperation.left=current} operator=( "~=" | "==" | "!=" | ">=" |
// "<=" | ">" | "<" ) right=AdditiveExpression)*
protected class RelationalExpression_Group extends GroupToken {
	
	public RelationalExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationalExpression_Group_1(parent, this, 0, inst);
			case 1: return new RelationalExpression_AdditiveExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRelationalExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// AdditiveExpression
protected class RelationalExpression_AdditiveExpressionParserRuleCall_0 extends RuleCallToken {
	
	public RelationalExpression_AdditiveExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getAdditiveExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdditiveExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AdditiveExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAdditiveExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({BooleanOperation.left=current} operator=( "~=" | "==" | "!=" | ">=" | "<=" | ">" | "<" ) right
// =AdditiveExpression)*
protected class RelationalExpression_Group_1 extends GroupToken {
	
	public RelationalExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationalExpression_RightAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {BooleanOperation.left=current}
protected class RelationalExpression_BooleanOperationLeftAction_1_0 extends ActionToken  {

	public RelationalExpression_BooleanOperationLeftAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getBooleanOperationLeftAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationalExpression_Group_1(parent, this, 0, inst);
			case 1: return new RelationalExpression_AdditiveExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getRelationalExpressionAccess().getBooleanOperationLeftAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("left", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("left")) return null;
		return getDescr((EObject) val);
	}
}

// operator=( "~=" | "==" | "!=" | ">=" | "<=" | ">" | "<" )
protected class RelationalExpression_OperatorAssignment_1_1 extends AssignmentToken  {
	
	public RelationalExpression_OperatorAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationalExpression_BooleanOperationLeftAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("operator",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("operator");
		if("~=".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getRelationalExpressionAccess().getOperatorTildeEqualsSignKeyword_1_1_0_0();
			return obj;
		}
		if("==".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getRelationalExpressionAccess().getOperatorEqualsSignEqualsSignKeyword_1_1_0_1();
			return obj;
		}
		if("!=".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getRelationalExpressionAccess().getOperatorExclamationMarkEqualsSignKeyword_1_1_0_2();
			return obj;
		}
		if(">=".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getRelationalExpressionAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3();
			return obj;
		}
		if("<=".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getRelationalExpressionAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_4();
			return obj;
		}
		if(">".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getRelationalExpressionAccess().getOperatorGreaterThanSignKeyword_1_1_0_5();
			return obj;
		}
		if("<".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getRelationalExpressionAccess().getOperatorLessThanSignKeyword_1_1_0_6();
			return obj;
		}
		return null;
	}

}

// right=AdditiveExpression
protected class RelationalExpression_RightAssignment_1_2 extends AssignmentToken  {
	
	public RelationalExpression_RightAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getRightAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdditiveExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("right",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAdditiveExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRelationalExpressionAccess().getRightAdditiveExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RelationalExpression_OperatorAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule RelationalExpression ****************/


/************ begin Rule AdditiveExpression ****************
 *
 * AdditiveExpression returns Expression:
 *   MultiplicativeExpression ({OperationCall.params+=current} name=( "+" | "-" ) params+=
 *   MultiplicativeExpression)*;
 *
 **/

// MultiplicativeExpression ({OperationCall.params+=current} name=( "+" | "-" ) params+=
// MultiplicativeExpression)*
protected class AdditiveExpression_Group extends GroupToken {
	
	public AdditiveExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdditiveExpression_Group_1(parent, this, 0, inst);
			case 1: return new AdditiveExpression_MultiplicativeExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAdditiveExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// MultiplicativeExpression
protected class AdditiveExpression_MultiplicativeExpressionParserRuleCall_0 extends RuleCallToken {
	
	public AdditiveExpression_MultiplicativeExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(MultiplicativeExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({OperationCall.params+=current} name=( "+" | "-" ) params+=MultiplicativeExpression)*
protected class AdditiveExpression_Group_1 extends GroupToken {
	
	public AdditiveExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdditiveExpression_ParamsAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {OperationCall.params+=current}
protected class AdditiveExpression_OperationCallParamsAction_1_0 extends ActionToken  {

	public AdditiveExpression_OperationCallParamsAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getOperationCallParamsAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdditiveExpression_Group_1(parent, this, 0, inst);
			case 1: return new AdditiveExpression_MultiplicativeExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getAdditiveExpressionAccess().getOperationCallParamsAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("params", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("params")) return null;
		return getDescr((EObject) val);
	}
}

// name=( "+" | "-" )
protected class AdditiveExpression_NameAssignment_1_1 extends AssignmentToken  {
	
	public AdditiveExpression_NameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getNameAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdditiveExpression_OperationCallParamsAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if("+".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAdditiveExpressionAccess().getNamePlusSignKeyword_1_1_0_0();
			return obj;
		}
		if("-".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAdditiveExpressionAccess().getNameHyphenMinusKeyword_1_1_0_1();
			return obj;
		}
		return null;
	}

}

// params+=MultiplicativeExpression
protected class AdditiveExpression_ParamsAssignment_1_2 extends AssignmentToken  {
	
	public AdditiveExpression_ParamsAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getParamsAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAdditiveExpressionAccess().getParamsMultiplicativeExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AdditiveExpression_NameAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AdditiveExpression ****************/


/************ begin Rule MultiplicativeExpression ****************
 *
 * MultiplicativeExpression returns Expression:
 *   UnaryOrInfixExpression ({OperationCall.params+=current} name=( "*" | "/" | "%" ) params+=
 *   UnaryOrInfixExpression)*;
 *
 **/

// UnaryOrInfixExpression ({OperationCall.params+=current} name=( "*" | "/" | "%" ) params+=
// UnaryOrInfixExpression)*
protected class MultiplicativeExpression_Group extends GroupToken {
	
	public MultiplicativeExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_Group_1(parent, this, 0, inst);
			case 1: return new MultiplicativeExpression_UnaryOrInfixExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// UnaryOrInfixExpression
protected class MultiplicativeExpression_UnaryOrInfixExpressionParserRuleCall_0 extends RuleCallToken {
	
	public MultiplicativeExpression_UnaryOrInfixExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getUnaryOrInfixExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryOrInfixExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UnaryOrInfixExpression_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUnaryOrInfixExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({OperationCall.params+=current} name=( "*" | "/" | "%" ) params+=UnaryOrInfixExpression
// )*
protected class MultiplicativeExpression_Group_1 extends GroupToken {
	
	public MultiplicativeExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_ParamsAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {OperationCall.params+=current}
protected class MultiplicativeExpression_OperationCallParamsAction_1_0 extends ActionToken  {

	public MultiplicativeExpression_OperationCallParamsAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getOperationCallParamsAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_Group_1(parent, this, 0, inst);
			case 1: return new MultiplicativeExpression_UnaryOrInfixExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getMultiplicativeExpressionAccess().getOperationCallParamsAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("params", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("params")) return null;
		return getDescr((EObject) val);
	}
}

// name=( "*" | "/" | "%" )
protected class MultiplicativeExpression_NameAssignment_1_1 extends AssignmentToken  {
	
	public MultiplicativeExpression_NameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getNameAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_OperationCallParamsAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if("*".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getMultiplicativeExpressionAccess().getNameAsteriskKeyword_1_1_0_0();
			return obj;
		}
		if("/".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getMultiplicativeExpressionAccess().getNameSolidusKeyword_1_1_0_1();
			return obj;
		}
		if("%".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getMultiplicativeExpressionAccess().getNamePercentSignKeyword_1_1_0_2();
			return obj;
		}
		return null;
	}

}

// params+=UnaryOrInfixExpression
protected class MultiplicativeExpression_ParamsAssignment_1_2 extends AssignmentToken  {
	
	public MultiplicativeExpression_ParamsAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getParamsAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryOrInfixExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUnaryOrInfixExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMultiplicativeExpressionAccess().getParamsUnaryOrInfixExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MultiplicativeExpression_NameAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule MultiplicativeExpression ****************/


/************ begin Rule UnaryOrInfixExpression ****************
 *
 * UnaryOrInfixExpression returns Expression:
 *   UnaryExpression|PostopExpression;
 *
 **/

// UnaryExpression|PostopExpression
protected class UnaryOrInfixExpression_Alternatives extends AlternativesToken {

	public UnaryOrInfixExpression_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getUnaryOrInfixExpressionAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryOrInfixExpression_UnaryExpressionParserRuleCall_0(parent, this, 0, inst);
			case 1: return new UnaryOrInfixExpression_PostopExpressionParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnaryOrInfixExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// UnaryExpression
protected class UnaryOrInfixExpression_UnaryExpressionParserRuleCall_0 extends RuleCallToken {
	
	public UnaryOrInfixExpression_UnaryExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getUnaryOrInfixExpressionAccess().getUnaryExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UnaryExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUnaryExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// PostopExpression
protected class UnaryOrInfixExpression_PostopExpressionParserRuleCall_1 extends RuleCallToken {
	
	public UnaryOrInfixExpression_PostopExpressionParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getUnaryOrInfixExpressionAccess().getPostopExpressionParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostopExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(PostopExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPostopExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule UnaryOrInfixExpression ****************/


/************ begin Rule UnaryExpression ****************
 *
 * UnaryExpression returns OperationCall:
 *   name=( "!" | "-" | "++" | "--" ) params+=PostopExpression;
 *
 **/

// name=( "!" | "-" | "++" | "--" ) params+=PostopExpression
protected class UnaryExpression_Group extends GroupToken {
	
	public UnaryExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnaryExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryExpression_ParamsAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnaryExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=( "!" | "-" | "++" | "--" )
protected class UnaryExpression_NameAssignment_0 extends AssignmentToken  {
	
	public UnaryExpression_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnaryExpressionAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if("!".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getUnaryExpressionAccess().getNameExclamationMarkKeyword_0_0_0();
			return obj;
		}
		if("-".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getUnaryExpressionAccess().getNameHyphenMinusKeyword_0_0_1();
			return obj;
		}
		if("++".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getUnaryExpressionAccess().getNamePlusSignPlusSignKeyword_0_0_2();
			return obj;
		}
		if("--".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getUnaryExpressionAccess().getNameHyphenMinusHyphenMinusKeyword_0_0_3();
			return obj;
		}
		return null;
	}

}

// params+=PostopExpression
protected class UnaryExpression_ParamsAssignment_1 extends AssignmentToken  {
	
	public UnaryExpression_ParamsAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnaryExpressionAccess().getParamsAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostopExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPostopExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnaryExpressionAccess().getParamsPostopExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new UnaryExpression_NameAssignment_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule UnaryExpression ****************/


/************ begin Rule PostopExpression ****************
 *
 * PostopExpression returns Expression:
 *   InfixExpression ({PostOpCall.target=current} name=( "--" | "++" ))?;
 *
 **/

// InfixExpression ({PostOpCall.target=current} name=( "--" | "++" ))?
protected class PostopExpression_Group extends GroupToken {
	
	public PostopExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPostopExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostopExpression_Group_1(parent, this, 0, inst);
			case 1: return new PostopExpression_InfixExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPostopExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// InfixExpression
protected class PostopExpression_InfixExpressionParserRuleCall_0 extends RuleCallToken {
	
	public PostopExpression_InfixExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPostopExpressionAccess().getInfixExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(InfixExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getInfixExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({PostOpCall.target=current} name=( "--" | "++" ))?
protected class PostopExpression_Group_1 extends GroupToken {
	
	public PostopExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPostopExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostopExpression_NameAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {PostOpCall.target=current}
protected class PostopExpression_PostOpCallTargetAction_1_0 extends ActionToken  {

	public PostopExpression_PostOpCallTargetAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getPostopExpressionAccess().getPostOpCallTargetAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostopExpression_InfixExpressionParserRuleCall_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getPostopExpressionAccess().getPostOpCallTargetAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("target", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("target")) return null;
		return getDescr((EObject) val);
	}
}

// name=( "--" | "++" )
protected class PostopExpression_NameAssignment_1_1 extends AssignmentToken  {
	
	public PostopExpression_NameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPostopExpressionAccess().getNameAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostopExpression_PostOpCallTargetAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if("--".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getPostopExpressionAccess().getNameHyphenMinusHyphenMinusKeyword_1_1_0_0();
			return obj;
		}
		if("++".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getPostopExpressionAccess().getNamePlusSignPlusSignKeyword_1_1_0_1();
			return obj;
		}
		return null;
	}

}



/************ end Rule PostopExpression ****************/


/************ begin Rule InfixExpression ****************
 *
 * InfixExpression returns Expression:
 *   PrimaryExpression ({OperationCall.target=current} "." name=ID "(" (params+=Parameter (
 *   "," params+=Parameter)*)? ")"|{AtCall.target=current} "[" index=Expression "]" ("(" (
 *   params+=Parameter ("," params+=Parameter)*)? ")")?|{FeatureCall.target=current} "."
 *   type=ID)*; 
 * 
 * 	
 *     
 * 	   
 * 	  	               
 * 	  	       
 * 	  		         	  
 * //	  ({OperationCall.target=current} name='[' nameExpr += Parameter ']' "(" (params+=Parameter ("," params+=Parameter)*)? ")") |
 * //	  ({FeatureCall.target=current} type="[" expr=Expression "]") |
 * 	         
 * //		({TypeSelectExpression.target=current} "." name="typeSelect" "(" type=Type ")") |
 * //		({CollectionExpression.target=current} name=("collect"|"select"|"selectFirst"|"reject"|"exists"|"notExists"|"sortBy"|"forAll") "(" (var=ID "|")? exp=Expression ")")
 * 	 
 * 
 * //AtExpression returns Expression
 * //	: PrimaryExpression ( 
 * //		({AtCall.target=current} '[' feature=Parameter ']')
 * //		    ("(" (params+=Parameter ("," params+=Parameter)*)? ")")?
 * //		)*
 * //	;
 *
 **/

// PrimaryExpression ({OperationCall.target=current} "." name=ID "(" (params+=Parameter (
// "," params+=Parameter)*)? ")"|{AtCall.target=current} "[" index=Expression "]" ("(" (
// params+=Parameter ("," params+=Parameter)*)? ")")?|{FeatureCall.target=current} "."
// type=ID)* 
// 	   
// 	  	               
// 	  	       
// 	  		         	  
// //	  ({OperationCall.target=current} name='[' nameExpr += Parameter ']' "(" (params+=Parameter ("," params+=Parameter)*)? ")") |
// //	  ({FeatureCall.target=current} type="[" expr=Expression "]") |
// 	         
// //		({TypeSelectExpression.target=current} "." name="typeSelect" "(" type=Type ")") |
// //		({CollectionExpression.target=current} name=("collect"|"select"|"selectFirst"|"reject"|"exists"|"notExists"|"sortBy"|"forAll") "(" (var=ID "|")? exp=Expression ")")
protected class InfixExpression_Group extends GroupToken {
	
	public InfixExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Alternatives_1(parent, this, 0, inst);
			case 1: return new InfixExpression_PrimaryExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getInfixExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// PrimaryExpression
protected class InfixExpression_PrimaryExpressionParserRuleCall_0 extends RuleCallToken {
	
	public InfixExpression_PrimaryExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getPrimaryExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimaryExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(PrimaryExpression_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPrimaryExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({OperationCall.target=current} "." name=ID "(" (params+=Parameter ("," params+=
// Parameter)*)? ")"|{AtCall.target=current} "[" index=Expression "]" ("(" (params+=
// Parameter ("," params+=Parameter)*)? ")")?|{FeatureCall.target=current} "." type=ID)*
//    
// 	  	               
// 	  	       
// 	  		         	  
// //	  ({OperationCall.target=current} name='[' nameExpr += Parameter ']' "(" (params+=Parameter ("," params+=Parameter)*)? ")") |
// //	  ({FeatureCall.target=current} type="[" expr=Expression "]") |
// 	         
// //		({TypeSelectExpression.target=current} "." name="typeSelect" "(" type=Type ")") |
// //		({CollectionExpression.target=current} name=("collect"|"select"|"selectFirst"|"reject"|"exists"|"notExists"|"sortBy"|"forAll") "(" (var=ID "|")? exp=Expression ")")
protected class InfixExpression_Alternatives_1 extends AlternativesToken {

	public InfixExpression_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getAlternatives_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Group_1_0(parent, this, 0, inst);
			case 1: return new InfixExpression_Group_1_1(parent, this, 1, inst);
			case 2: return new InfixExpression_Group_1_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// {OperationCall.target=current} "." name=ID "(" (params+=Parameter ("," params+=
// Parameter)*)? ")"
protected class InfixExpression_Group_1_0 extends GroupToken {
	
	public InfixExpression_Group_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getGroup_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_RightParenthesisKeyword_1_0_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {OperationCall.target=current}
protected class InfixExpression_OperationCallTargetAction_1_0_0 extends ActionToken  {

	public InfixExpression_OperationCallTargetAction_1_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getOperationCallTargetAction_1_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Alternatives_1(parent, this, 0, inst);
			case 1: return new InfixExpression_PrimaryExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getInfixExpressionAccess().getOperationCallTargetAction_1_0_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("target", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("target")) return null;
		return getDescr((EObject) val);
	}
}

// "."
protected class InfixExpression_FullStopKeyword_1_0_1 extends KeywordToken  {
	
	public InfixExpression_FullStopKeyword_1_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getFullStopKeyword_1_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_OperationCallTargetAction_1_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=ID
protected class InfixExpression_NameAssignment_1_0_2 extends AssignmentToken  {
	
	public InfixExpression_NameAssignment_1_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getNameAssignment_1_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_FullStopKeyword_1_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getInfixExpressionAccess().getNameIDTerminalRuleCall_1_0_2_0();
			return obj;
		}
		return null;
	}

}

// "("
protected class InfixExpression_LeftParenthesisKeyword_1_0_3 extends KeywordToken  {
	
	public InfixExpression_LeftParenthesisKeyword_1_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getLeftParenthesisKeyword_1_0_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_NameAssignment_1_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (params+=Parameter ("," params+=Parameter)*)?
protected class InfixExpression_Group_1_0_4 extends GroupToken {
	
	public InfixExpression_Group_1_0_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getGroup_1_0_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Group_1_0_4_1(parent, this, 0, inst);
			case 1: return new InfixExpression_ParamsAssignment_1_0_4_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// params+=Parameter
protected class InfixExpression_ParamsAssignment_1_0_4_0 extends AssignmentToken  {
	
	public InfixExpression_ParamsAssignment_1_0_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getParamsAssignment_1_0_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parameter_ValAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getInfixExpressionAccess().getParamsParameterParserRuleCall_1_0_4_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InfixExpression_LeftParenthesisKeyword_1_0_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," params+=Parameter)*
protected class InfixExpression_Group_1_0_4_1 extends GroupToken {
	
	public InfixExpression_Group_1_0_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getGroup_1_0_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_ParamsAssignment_1_0_4_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class InfixExpression_CommaKeyword_1_0_4_1_0 extends KeywordToken  {
	
	public InfixExpression_CommaKeyword_1_0_4_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getCommaKeyword_1_0_4_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Group_1_0_4_1(parent, this, 0, inst);
			case 1: return new InfixExpression_ParamsAssignment_1_0_4_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// params+=Parameter
protected class InfixExpression_ParamsAssignment_1_0_4_1_1 extends AssignmentToken  {
	
	public InfixExpression_ParamsAssignment_1_0_4_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getParamsAssignment_1_0_4_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parameter_ValAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getInfixExpressionAccess().getParamsParameterParserRuleCall_1_0_4_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InfixExpression_CommaKeyword_1_0_4_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class InfixExpression_RightParenthesisKeyword_1_0_5 extends KeywordToken  {
	
	public InfixExpression_RightParenthesisKeyword_1_0_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getRightParenthesisKeyword_1_0_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Group_1_0_4(parent, this, 0, inst);
			case 1: return new InfixExpression_LeftParenthesisKeyword_1_0_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// {AtCall.target=current} "[" index=Expression "]" ("(" (params+=Parameter ("," params+=
// Parameter)*)? ")")?
protected class InfixExpression_Group_1_1 extends GroupToken {
	
	public InfixExpression_Group_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getGroup_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Group_1_1_4(parent, this, 0, inst);
			case 1: return new InfixExpression_RightSquareBracketKeyword_1_1_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// {AtCall.target=current}
protected class InfixExpression_AtCallTargetAction_1_1_0 extends ActionToken  {

	public InfixExpression_AtCallTargetAction_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getAtCallTargetAction_1_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Alternatives_1(parent, this, 0, inst);
			case 1: return new InfixExpression_PrimaryExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getInfixExpressionAccess().getAtCallTargetAction_1_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("target", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("target")) return null;
		return getDescr((EObject) val);
	}
}

// "["
protected class InfixExpression_LeftSquareBracketKeyword_1_1_1 extends KeywordToken  {
	
	public InfixExpression_LeftSquareBracketKeyword_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getLeftSquareBracketKeyword_1_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_AtCallTargetAction_1_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// index=Expression
protected class InfixExpression_IndexAssignment_1_1_2 extends AssignmentToken  {
	
	public InfixExpression_IndexAssignment_1_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getIndexAssignment_1_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_ValueExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("index",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("index");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getInfixExpressionAccess().getIndexExpressionParserRuleCall_1_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InfixExpression_LeftSquareBracketKeyword_1_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class InfixExpression_RightSquareBracketKeyword_1_1_3 extends KeywordToken  {
	
	public InfixExpression_RightSquareBracketKeyword_1_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getRightSquareBracketKeyword_1_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_IndexAssignment_1_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("(" (params+=Parameter ("," params+=Parameter)*)? ")")?
protected class InfixExpression_Group_1_1_4 extends GroupToken {
	
	public InfixExpression_Group_1_1_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getGroup_1_1_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_RightParenthesisKeyword_1_1_4_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class InfixExpression_LeftParenthesisKeyword_1_1_4_0 extends KeywordToken  {
	
	public InfixExpression_LeftParenthesisKeyword_1_1_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getLeftParenthesisKeyword_1_1_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_RightSquareBracketKeyword_1_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (params+=Parameter ("," params+=Parameter)*)?
protected class InfixExpression_Group_1_1_4_1 extends GroupToken {
	
	public InfixExpression_Group_1_1_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getGroup_1_1_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Group_1_1_4_1_1(parent, this, 0, inst);
			case 1: return new InfixExpression_ParamsAssignment_1_1_4_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// params+=Parameter
protected class InfixExpression_ParamsAssignment_1_1_4_1_0 extends AssignmentToken  {
	
	public InfixExpression_ParamsAssignment_1_1_4_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getParamsAssignment_1_1_4_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parameter_ValAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getInfixExpressionAccess().getParamsParameterParserRuleCall_1_1_4_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InfixExpression_LeftParenthesisKeyword_1_1_4_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," params+=Parameter)*
protected class InfixExpression_Group_1_1_4_1_1 extends GroupToken {
	
	public InfixExpression_Group_1_1_4_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getGroup_1_1_4_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_ParamsAssignment_1_1_4_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class InfixExpression_CommaKeyword_1_1_4_1_1_0 extends KeywordToken  {
	
	public InfixExpression_CommaKeyword_1_1_4_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getCommaKeyword_1_1_4_1_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Group_1_1_4_1_1(parent, this, 0, inst);
			case 1: return new InfixExpression_ParamsAssignment_1_1_4_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// params+=Parameter
protected class InfixExpression_ParamsAssignment_1_1_4_1_1_1 extends AssignmentToken  {
	
	public InfixExpression_ParamsAssignment_1_1_4_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getParamsAssignment_1_1_4_1_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parameter_ValAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getInfixExpressionAccess().getParamsParameterParserRuleCall_1_1_4_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InfixExpression_CommaKeyword_1_1_4_1_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class InfixExpression_RightParenthesisKeyword_1_1_4_2 extends KeywordToken  {
	
	public InfixExpression_RightParenthesisKeyword_1_1_4_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getRightParenthesisKeyword_1_1_4_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Group_1_1_4_1(parent, this, 0, inst);
			case 1: return new InfixExpression_LeftParenthesisKeyword_1_1_4_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



// {FeatureCall.target=current} "." type=ID
protected class InfixExpression_Group_1_2 extends GroupToken {
	
	public InfixExpression_Group_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getGroup_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_TypeAssignment_1_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {FeatureCall.target=current}
protected class InfixExpression_FeatureCallTargetAction_1_2_0 extends ActionToken  {

	public InfixExpression_FeatureCallTargetAction_1_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getFeatureCallTargetAction_1_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Alternatives_1(parent, this, 0, inst);
			case 1: return new InfixExpression_PrimaryExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getInfixExpressionAccess().getFeatureCallTargetAction_1_2_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("target", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("target")) return null;
		return getDescr((EObject) val);
	}
}

// "."
protected class InfixExpression_FullStopKeyword_1_2_1 extends KeywordToken  {
	
	public InfixExpression_FullStopKeyword_1_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getFullStopKeyword_1_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_FeatureCallTargetAction_1_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=ID
protected class InfixExpression_TypeAssignment_1_2_2 extends AssignmentToken  {
	
	public InfixExpression_TypeAssignment_1_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getTypeAssignment_1_2_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_FullStopKeyword_1_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getInfixExpressionAccess().getTypeIDTerminalRuleCall_1_2_2_0();
			return obj;
		}
		return null;
	}

}




/************ end Rule InfixExpression ****************/


/************ begin Rule PrimaryExpression ****************
 *
 * PrimaryExpression returns Expression:
 *   Literal|FeatureCall|VariableValue|PropertyValue|ParanthesizedExpression; 
 * 
 * //AtExpression returns Expression
 * //	: PrimaryExpression ( 
 * //		({AtCall.target=current} '[' feature=Parameter ']')
 * //		    ("(" (params+=Parameter ("," params+=Parameter)*)? ")")?
 * //		)*
 * //	;
 * 
 * 
 *     
 * 	   
 * 	   
 * //	ListLiteral |
 * //	ConstructorCallExpression |
 *
 **/

// Literal|FeatureCall|VariableValue|PropertyValue|ParanthesizedExpression 
// 
// //AtExpression returns Expression
// //	: PrimaryExpression ( 
// //		({AtCall.target=current} '[' feature=Parameter ']')
// //		    ("(" (params+=Parameter ("," params+=Parameter)*)? ")")?
// //		)*
// //	;
// 
// 
//     
// 	   
// 	   
// //	ListLiteral |
// //	ConstructorCallExpression |
protected class PrimaryExpression_Alternatives extends AlternativesToken {

	public PrimaryExpression_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimaryExpression_LiteralParserRuleCall_0(parent, this, 0, inst);
			case 1: return new PrimaryExpression_FeatureCallParserRuleCall_1(parent, this, 1, inst);
			case 2: return new PrimaryExpression_VariableValueParserRuleCall_2(parent, this, 2, inst);
			case 3: return new PrimaryExpression_PropertyValueParserRuleCall_3(parent, this, 3, inst);
			case 4: return new PrimaryExpression_ParanthesizedExpressionParserRuleCall_4(parent, this, 4, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPrimaryExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Literal
protected class PrimaryExpression_LiteralParserRuleCall_0 extends RuleCallToken {
	
	public PrimaryExpression_LiteralParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Literal_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Literal_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// FeatureCall    
// //	ListLiteral |
// //	ConstructorCallExpression |
protected class PrimaryExpression_FeatureCallParserRuleCall_1 extends RuleCallToken {
	
	public PrimaryExpression_FeatureCallParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getFeatureCallParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureCall_OperationCallParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(FeatureCall_OperationCallParserRuleCall.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getFeatureCallRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// VariableValue
protected class PrimaryExpression_VariableValueParserRuleCall_2 extends RuleCallToken {
	
	public PrimaryExpression_VariableValueParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getVariableValueParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableValue_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(VariableValue_NameAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getVariableValueRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// PropertyValue
protected class PrimaryExpression_PropertyValueParserRuleCall_3 extends RuleCallToken {
	
	public PrimaryExpression_PropertyValueParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getPropertyValueParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyValue_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(PropertyValue_NameAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPropertyValueRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ParanthesizedExpression
protected class PrimaryExpression_ParanthesizedExpressionParserRuleCall_4 extends RuleCallToken {
	
	public PrimaryExpression_ParanthesizedExpressionParserRuleCall_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getParanthesizedExpressionParserRuleCall_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParanthesizedExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ParanthesizedExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getParanthesizedExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule PrimaryExpression ****************/


/************ begin Rule PropertyValue ****************
 *
 * PropertyValue:
 *   name=PID;
 *
 **/

// name=PID
protected class PropertyValue_NameAssignment extends AssignmentToken  {
	
	public PropertyValue_NameAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyValueAccess().getNameAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPropertyValueRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPropertyValueAccess().getNamePIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule PropertyValue ****************/


/************ begin Rule VariableValue ****************
 *
 * VariableValue:
 *   name=ID;
 *
 **/

// name=ID
protected class VariableValue_NameAssignment extends AssignmentToken  {
	
	public VariableValue_NameAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableValueAccess().getNameAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getVariableValueRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getVariableValueAccess().getNameIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule VariableValue ****************/


/************ begin Rule FeatureCall ****************
 *
 * FeatureCall:
 *   OperationCall; 
 * 
 * 
 * 	  //|
 * //	(type=Type) |
 * //	CollectionExpression | 
 * //	TypeSelectExpression
 *
 **/

// OperationCall 
// 	  //|
// //	(type=Type) |
// //	CollectionExpression | 
// //	TypeSelectExpression
protected class FeatureCall_OperationCallParserRuleCall extends RuleCallToken {
	
	public FeatureCall_OperationCallParserRuleCall(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getFeatureCallAccess().getOperationCallParserRuleCall();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OperationCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFeatureCallRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(OperationCall_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getOperationCallRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule FeatureCall ****************/


/************ begin Rule OperationCall ****************
 *
 * OperationCall:
 *   name=( ID | PID ) "(" (params+=Parameter ("," params+=Parameter)*)? ")";
 *
 **/

// name=( ID | PID ) "(" (params+=Parameter ("," params+=Parameter)*)? ")"
protected class OperationCall_Group extends GroupToken {
	
	public OperationCall_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getOperationCallAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OperationCall_RightParenthesisKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getOperationCallRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=( ID | PID )
protected class OperationCall_NameAssignment_0 extends AssignmentToken  {
	
	public OperationCall_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOperationCallAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getOperationCallAccess().getNameIDTerminalRuleCall_0_0_0();
			return obj;
		}
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getOperationCallAccess().getNamePIDTerminalRuleCall_0_0_1();
			return obj;
		}
		return null;
	}

}

// "("
protected class OperationCall_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public OperationCall_LeftParenthesisKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getOperationCallAccess().getLeftParenthesisKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OperationCall_NameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (params+=Parameter ("," params+=Parameter)*)?
protected class OperationCall_Group_2 extends GroupToken {
	
	public OperationCall_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getOperationCallAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OperationCall_Group_2_1(parent, this, 0, inst);
			case 1: return new OperationCall_ParamsAssignment_2_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// params+=Parameter
protected class OperationCall_ParamsAssignment_2_0 extends AssignmentToken  {
	
	public OperationCall_ParamsAssignment_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOperationCallAccess().getParamsAssignment_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parameter_ValAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getOperationCallAccess().getParamsParameterParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OperationCall_LeftParenthesisKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," params+=Parameter)*
protected class OperationCall_Group_2_1 extends GroupToken {
	
	public OperationCall_Group_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getOperationCallAccess().getGroup_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OperationCall_ParamsAssignment_2_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class OperationCall_CommaKeyword_2_1_0 extends KeywordToken  {
	
	public OperationCall_CommaKeyword_2_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getOperationCallAccess().getCommaKeyword_2_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OperationCall_Group_2_1(parent, this, 0, inst);
			case 1: return new OperationCall_ParamsAssignment_2_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// params+=Parameter
protected class OperationCall_ParamsAssignment_2_1_1 extends AssignmentToken  {
	
	public OperationCall_ParamsAssignment_2_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOperationCallAccess().getParamsAssignment_2_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parameter_ValAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getOperationCallAccess().getParamsParameterParserRuleCall_2_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OperationCall_CommaKeyword_2_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class OperationCall_RightParenthesisKeyword_3 extends KeywordToken  {
	
	public OperationCall_RightParenthesisKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getOperationCallAccess().getRightParenthesisKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OperationCall_Group_2(parent, this, 0, inst);
			case 1: return new OperationCall_LeftParenthesisKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule OperationCall ****************/


/************ begin Rule Literal ****************
 *
 * Literal:
 *   ValueLiteral|RegexpLiteral;
 *
 **/

// ValueLiteral|RegexpLiteral
protected class Literal_Alternatives extends AlternativesToken {

	public Literal_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getLiteralAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Literal_ValueLiteralParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Literal_RegexpLiteralParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ValueLiteral
protected class Literal_ValueLiteralParserRuleCall_0 extends RuleCallToken {
	
	public Literal_ValueLiteralParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralAccess().getValueLiteralParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ValueLiteral_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ValueLiteral_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getValueLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// RegexpLiteral
protected class Literal_RegexpLiteralParserRuleCall_1 extends RuleCallToken {
	
	public Literal_RegexpLiteralParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralAccess().getRegexpLiteralParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RegexpLiteral_ValAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RegexpLiteral_ValAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRegexpLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Literal ****************/


/************ begin Rule ValueLiteral ****************
 *
 * ValueLiteral:
 *   BooleanLiteral|IntegerLiteral|NullLiteral|StringLiteral|RealLiteral;
 *
 **/

// BooleanLiteral|IntegerLiteral|NullLiteral|StringLiteral|RealLiteral
protected class ValueLiteral_Alternatives extends AlternativesToken {

	public ValueLiteral_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getValueLiteralAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ValueLiteral_BooleanLiteralParserRuleCall_0(parent, this, 0, inst);
			case 1: return new ValueLiteral_IntegerLiteralParserRuleCall_1(parent, this, 1, inst);
			case 2: return new ValueLiteral_NullLiteralParserRuleCall_2(parent, this, 2, inst);
			case 3: return new ValueLiteral_StringLiteralParserRuleCall_3(parent, this, 3, inst);
			case 4: return new ValueLiteral_RealLiteralParserRuleCall_4(parent, this, 4, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getValueLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// BooleanLiteral
protected class ValueLiteral_BooleanLiteralParserRuleCall_0 extends RuleCallToken {
	
	public ValueLiteral_BooleanLiteralParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getValueLiteralAccess().getBooleanLiteralParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BooleanLiteral_ValAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(BooleanLiteral_ValAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBooleanLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// IntegerLiteral
protected class ValueLiteral_IntegerLiteralParserRuleCall_1 extends RuleCallToken {
	
	public ValueLiteral_IntegerLiteralParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getValueLiteralAccess().getIntegerLiteralParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntegerLiteral_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(IntegerLiteral_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getIntegerLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// NullLiteral
protected class ValueLiteral_NullLiteralParserRuleCall_2 extends RuleCallToken {
	
	public ValueLiteral_NullLiteralParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getValueLiteralAccess().getNullLiteralParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NullLiteral_ValAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(NullLiteral_ValAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getNullLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// StringLiteral
protected class ValueLiteral_StringLiteralParserRuleCall_3 extends RuleCallToken {
	
	public ValueLiteral_StringLiteralParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getValueLiteralAccess().getStringLiteralParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringLiteral_ValAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(StringLiteral_ValAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getStringLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// RealLiteral
protected class ValueLiteral_RealLiteralParserRuleCall_4 extends RuleCallToken {
	
	public ValueLiteral_RealLiteralParserRuleCall_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getValueLiteralAccess().getRealLiteralParserRuleCall_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RealLiteral_ValAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RealLiteral_ValAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRealLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ValueLiteral ****************/


/************ begin Rule BooleanLiteral ****************
 *
 * BooleanLiteral:
 *   val=( "true" | "false" );
 *
 **/

// val=( "true" | "false" )
protected class BooleanLiteral_ValAssignment extends AssignmentToken  {
	
	public BooleanLiteral_ValAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBooleanLiteralAccess().getValAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBooleanLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val");
		if("true".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getBooleanLiteralAccess().getValTrueKeyword_0_0();
			return obj;
		}
		if("false".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getBooleanLiteralAccess().getValFalseKeyword_0_1();
			return obj;
		}
		return null;
	}

}

/************ end Rule BooleanLiteral ****************/


/************ begin Rule IntegerLiteral ****************
 *
 * IntegerLiteral:
 *   val=INT|HEX;
 *
 **/

// val=INT|HEX
protected class IntegerLiteral_Alternatives extends AlternativesToken {

	public IntegerLiteral_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getIntegerLiteralAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntegerLiteral_ValAssignment_0(parent, this, 0, inst);
			case 1: return new IntegerLiteral_HEXTerminalRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getIntegerLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// val=INT
protected class IntegerLiteral_ValAssignment_0 extends AssignmentToken  {
	
	public IntegerLiteral_ValAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getIntegerLiteralAccess().getValAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getIntegerLiteralAccess().getValINTTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// HEX
protected class IntegerLiteral_HEXTerminalRuleCall_1 extends UnassignedTextToken {

	public IntegerLiteral_HEXTerminalRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getIntegerLiteralAccess().getHEXTerminalRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}


/************ end Rule IntegerLiteral ****************/


/************ begin Rule NullLiteral ****************
 *
 * NullLiteral:
 *   val="null";
 *
 **/

// val="null"
protected class NullLiteral_ValAssignment extends AssignmentToken  {
	
	public NullLiteral_ValAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNullLiteralAccess().getValAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getNullLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val");
		if("null".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getNullLiteralAccess().getValNullKeyword_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule NullLiteral ****************/


/************ begin Rule StringLiteral ****************
 *
 * StringLiteral:
 *   val=STRING;
 *
 **/

// val=STRING
protected class StringLiteral_ValAssignment extends AssignmentToken  {
	
	public StringLiteral_ValAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStringLiteralAccess().getValAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getStringLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getStringLiteralAccess().getValSTRINGTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule StringLiteral ****************/


/************ begin Rule RealLiteral ****************
 *
 * RealLiteral:
 *   val=REAL;
 *
 **/

// val=REAL
protected class RealLiteral_ValAssignment extends AssignmentToken  {
	
	public RealLiteral_ValAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRealLiteralAccess().getValAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRealLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getRealLiteralAccess().getValREALTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule RealLiteral ****************/


/************ begin Rule RegexpLiteral ****************
 *
 * RegexpLiteral:
 *   val=REGEX;
 *
 **/

// val=REGEX
protected class RegexpLiteral_ValAssignment extends AssignmentToken  {
	
	public RegexpLiteral_ValAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRegexpLiteralAccess().getValAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRegexpLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getRegexpLiteralAccess().getValREGEXTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule RegexpLiteral ****************/


/************ begin Rule ParanthesizedExpression ****************
 *
 * ParanthesizedExpression returns Expression:
 *   "(" Expression ")";
 *
 **/

// "(" Expression ")"
protected class ParanthesizedExpression_Group extends GroupToken {
	
	public ParanthesizedExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getParanthesizedExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParanthesizedExpression_RightParenthesisKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getParanthesizedExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "("
protected class ParanthesizedExpression_LeftParenthesisKeyword_0 extends KeywordToken  {
	
	public ParanthesizedExpression_LeftParenthesisKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getParanthesizedExpressionAccess().getLeftParenthesisKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// Expression
protected class ParanthesizedExpression_ExpressionParserRuleCall_1 extends RuleCallToken {
	
	public ParanthesizedExpression_ExpressionParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getParanthesizedExpressionAccess().getExpressionParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_ValueExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Expression_ValueExpressionParserRuleCall.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParanthesizedExpression_LeftParenthesisKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// ")"
protected class ParanthesizedExpression_RightParenthesisKeyword_2 extends KeywordToken  {
	
	public ParanthesizedExpression_RightParenthesisKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getParanthesizedExpressionAccess().getRightParenthesisKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParanthesizedExpression_ExpressionParserRuleCall_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ParanthesizedExpression ****************/

}
