<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	Copyright (c) 2006-2007, Cloudsmith Inc.
	The code, documentation and other materials contained herein have been
	licensed under the Eclipse Public License - v 1.0 by the copyright holder
	listed above, as the Initial Contributor under such license. The text of
	such license is available at www.eclipse.org.
-->
<project name="org.eclipse.buckminster.pde.misc">

	<!-- Extract the version of a bundle from its MANIFEST.MF file.
	     Parameters:
	         file: The full path to the manifest file
	         property: The property that will receive the version string
	  -->
	<macrodef name="extractBundleVersion">
		<attribute name="file"/>
		<attribute name="property"/>
		<sequential>
			<loadfile property="@{property}" srcfile="@{file}">
				<filterchain>
					<linecontains>
						<contains value="Bundle-Version:"/>
					</linecontains>
					<replaceregex pattern="Bundle-Version: (.*)$" replace="\1"/>
					<striplinebreaks/>
				</filterchain>
			</loadfile>
		</sequential>
	</macrodef>

	<macrodef name="extractBundleId">
		<attribute name="file"/>
		<attribute name="property"/>
		<sequential>
			<loadfile property="@{property}" srcfile="@{file}">
				<filterchain>
					<linecontains>
						<contains value="Bundle-SymbolicName:"/>
					</linecontains>
					<replaceregex pattern="Bundle-SymbolicName: ([^;]+)(;.*)?$" replace="\1"/>
					<striplinebreaks/>
				</filterchain>
			</loadfile>
		</sequential>
	</macrodef>

	<macrodef name="extractFeatureVersion">
		<attribute name="file"/>
		<attribute name="property"/>
		<sequential>
			<loadfile property="@{property}" srcfile="@{file}">
				<filterchain>
					<striplinebreaks/>
					<replaceregex
						pattern="^.*&lt;feature[^&gt;]*version=&quot;([^&quot;]*)&quot;.*$"
						replace="\1"/>
				</filterchain>
			</loadfile>
		</sequential>
	</macrodef>

	<macrodef name="extractFeatureId">
		<attribute name="file"/>
		<attribute name="property"/>
		<sequential>
			<loadfile property="@{property}" srcfile="@{file}">
				<filterchain>
					<striplinebreaks/>
					<replaceregex
						pattern="^.*&lt;feature[^&gt;]*id=&quot;([^&quot;]*)&quot;.*$"
						replace="\1"/>
				</filterchain>
			</loadfile>
		</sequential>
	</macrodef>


	<target name="create.output.dir">
		<dirname property="output.dir" file="${sp:action.output}"/>
		<mkdir dir="${output.dir}"/>
	</target>

	<target name="create.jar" depends="create.output.dir">
		<buckminster.jar jarfile="${sp:action.output}">
			<buckminster.filesetgroup value="${fs:action.requirements}"/>
		</buckminster.jar>
	</target>

	<target name="create.jar.with.manifest" depends="create.output.dir">
		<buckminster.jar jarfile="${sp:action.output}" manifest="${manifest}" duplicate="preserve">
			<buckminster.filesetgroup value="${fs:action.requirements}"/>
		</buckminster.jar>
	</target>

	<target name="create.bundle.jar">
		<extractBundleVersion file="${sp:manifest}" property="bundle.version"/>
		<extractBundleId file="${sp:manifest}" property="bundle.id"/>
		<mkdir dir="${sp:action.output}"/>
		<buckminster.jar jarfile="${sp:action.output}/${bundle.id}_${bundle.version}.jar" manifest="${sp:manifest}" duplicate="preserve">
			<buckminster.filesetgroup value="${fs:action.requirements}"/>
		</buckminster.jar>
	</target>

	<target name="create.feature.jar">
		<extractFeatureVersion file="${sp:manifest}" property="feature.version"/>
		<extractFeatureId file="${sp:manifest}" property="feature.id"/>
		<mkdir dir="${sp:action.output}"/>
		<buckminster.jar jarfile="${sp:action.output}/${feature.id}_${feature.version}.jar">
			<buckminster.filesetgroup value="${fs:action.requirements}"/>
		</buckminster.jar>
	</target>

	<target name="create.zip" depends="create.output.dir">
		<buckminster.zip zipfile="${sp:action.output}">
			<buckminster.filesetgroup value="${fs:action.requirements}"/>
		</buckminster.zip>
	</target>

	<target name="create.eclipse.product">
		<mkdir dir="${sp:action.output}"/>
		<buckminster.createProductBase
			productFile="${buckminster.eclipse.productFile}"
			outputDir="${sp:action.output}"/>

		<buckminster.copy todir="${sp:action.output}" overwrite="true">
			<buckminster.filesetgroup value="${fs:action.requirements}"/>
		</buckminster.copy>

		<buckminster.convertSiteToRuntime sitedir="${sp:action.output}"/>

		<buckminster.multichmod dir="${sp:action.output}">
			<propertyset>
				<propertyref prefix="buckminster.install.permissions."/>
			</propertyset>
		</buckminster.multichmod>
	</target>

	<target name="create.eclipse.jnlp.product" depends="create.eclipse.product">
		<buckminster.jnlpSiteGenerator sitedir="${sp:action.output}"/>
	</target>

	<target name="create.site.xml">
		<buckminster.updateSiteGenerator outputfile="${sp:action.output}" template="${sp:template}">
			<buckminster.filesetgroup value="${fs:features}"/>
		</buckminster.updateSiteGenerator>
	</target>

	<target name="copy.group">
		<mkdir dir="${sp:action.output}"/>
		<buckminster.copy todir="${sp:action.output}" overwrite="true">
			<buckminster.filesetgroup value="${fs:action.requirements}"/>
		</buckminster.copy>
	</target>

	<target name="delete.group">
		<buckminster.delete>
			<buckminster.filesetgroup value="${fs:action.requirements}"/>
		</buckminster.delete>
	</target>

	<target name="delete.dir">
		<delete dir="${dir.to.delete}" includeemptydirs="true"/>
	</target>

	<target name="delete.file">
		<delete file="${file.to.delete}"/>
	</target>

	<target name="expand.bundle.version" depends="create.output.dir">
		<property name="sp:properties" value=""/>
		<buckminster.consolidateBundle inputFile="${sp:manifest}" outputFile="${sp:action.output}" propertiesFile="${sp:properties}"/>
	</target>

	<target name="expand.feature.version" depends="create.output.dir">
		<property name="sp:properties" value=""/>
		<property name="generateVersionSuffix" value="true"/>
		<buckminster.consolidateFeature inputFile="${sp:manifest}" outputFile="${sp:action.output}" generateVersionSuffix="${generateVersionSuffix}" propertiesFile="${sp:properties}">
			<buckminster.filesetgroup value="${fs:bundles}"/>
			<buckminster.filesetgroup value="${fs:features}"/>
		</buckminster.consolidateFeature>
	</target>

	<target name="unzip" depends="create.output.dir">
		<pathconvert property="zip.input.file">
			<buckminster.valuefileset value="${fs:action.requirements}"/>
		</pathconvert>
		<unzip dest="${sp:action.output}" src="${zip.input.file}"/>
	</target>

	<target name="unjar.named" depends="create.output.dir">
		<pathconvert property="jar.input.file">
			<buckminster.valuefileset value="${fs:action.requirements}"/>
		</pathconvert>
		<basename property="jar.output.folder" file="${jar.input.file}" suffix=".jar"/>		
		<unjar dest="${jar.output.folder}" src="${jar.input.file}"/>
	</target>
</project>
